 TCP/IPSocketsinC#PracticalGuideforProgrammers TheMorganKaufmannPracticalGuidesSeries
SeriesEditor:MichaelJ.DonahooTCP/IPSocketsinC#:PracticalGuideforProgrammers
DavidMakofske,MichaelJ.Donahoo,andKennethL.Calvert
JavaCryptographyExtensions:PracticalGuideforProgrammers
JasonWeiss
JSP:PracticalGuideforJavaProgrammers
RobertJ.Brunner
JSTL:PracticalGuideforJSPProgrammers
SueSpielman
Java:PracticalGuideforProgrammers
ZbigniewM.Sikora
TheStrutsFramework:PracticalGuideforJavaProgrammers
SueSpielman
MulticastSockets:PracticalGuideforProgrammers
DavidMakofskeandKevinAlmeroth
TCP/IPSocketsinJava:PracticalGuideforProgrammers
KennethL.CalvertandMichaelJ.Donahoo
TCP/IPSocketsinC:PracticalGuideforProgrammers
MichaelJ.DonahooandKennethL.Calvert
JDBC:PracticalGuideforJavaProgrammers
GregoryD.Speegle
Forfurtherinformationonthesebooksandforalistofforthcomingtitles,
pleasevisitourwebsiteat
http://www.mkp.com/practical  TCP/IPSocketsinC#PracticalGuideforProgrammersDavidB.MakofskeAkamaiTechnologiesMichaelJ.DonahooBaylorUniversityKennethL.CalvertUniversityofKentucky AMSTERDAM

BOSTON

HEIDELBERG

LONDON
NEWYORK

OXFORD

PARIS

SANDIEGO
SANFRANCISCO

SINGAPORE

SYDNEY

TOKYO
MorganKaufmannisanimprintofElsevier  SeniorEditor
RickAdams
AssociateEditor
KarynJohnson
PublishingServicesManager
SimonCrump
ProjectManager
KyleSarofeen
CoverDesign
YvoNiezebosDesign
CoverImage
GettyImages
Composition
CephaImagingPvt.Ltd.
Copyeditor
HarbourFraserHodder
Proofreader
JacquiBrownstein
Indexer
MichaelFerreira
Interiorprinter
MaplePress
Coverprinter
PhoenixColor
MorganKaufmannPublishersisanimprintofElsevier.
500SansomeStreet,Suite400,SanFrancisco,CA94111
Thisbookisprintedonacid-freepaper.
©2004byElsevierInc.Allrightsreserved.
Designationsusedbycompaniestodistinguishtheirproductsareoftenclaimedastrademarksor
registeredtrademarks.InallinstancesinwhichMorganKaufmannPublishersisawareofaclaim,
theproductnamesappearininitialcapitalorallcapitalletters.Readers,however,shouldcontact
theappropriatecompaniesformorecompleteinformationregardingtrademarksandregistration.
Nopartofthispublicationmaybereproduced,storedinaretrievalsystem,ortransmittedinany
formorbyanymeanselectronic,mechanical,photocopying,scanning,orotherwisewithoutprior
writtenpermissionofthepublisher.
PermissionsmaybesoughtdirectlyfromElseviersScience&TechnologyRightsDepartmentin
Oxford,UK:phone:(+44)1865843830,fax:(+44)1865853333,e-mail:
permissions@elsevier.com.uk
.
Youmayalsocompleteyourrequeston-lineviatheElsevierhomepage(
http://elsevier.com
)by
selectingCustomerSupportandthenObtainingPermissions.
LibraryofCongressCataloging-in-PublicationData
Applicationsubmitted.
ISBN:0-12-466051-7
ForinformationonallMorganKaufmannpublications,
visitourWebsiteat
www.mkp.com
PrintedintheUnitedStatesofAmerica
080706050454321  ForMargieandJacob,fortheirloveandinspiration
David
Formythreegirls:Lisa,Michaela,andMackenzie
Jeff
Formyparents,PaulandEleanorCalvert
Ken  This Page Intentionally Left Blank ContentsPrefaceix
1Introduction1
1.1Networks,Packets,andProtocols1
1.2AboutAddresses4
1.3AboutNames5
1.4ClientsandServers5
1.5WhatIsaSocket?6
1.6Exercises7
2BasicSockets9
2.1SocketAddresses9
2.2SocketImplementationin.NET15
2.3TCPSockets16
2.4UDPSockets29
2.5The.NETSocketClass37
2.6Exercises57
3SendingandReceivingMessages59
3.1EncodingInformation61
3.2ComposingI/OStreams65
3.3FramingandParsing66
3.4ImplementingWireFormatsinC#70
3.5WrappingUp83
3.6Exercises84vii  viiiContents4BeyondtheBasics85
4.1NonblockingI/O85
4.2Multiplexing95
4.3Threads99
4.4AsynchronousI/O117
4.5MultipleRecipients131
4.6ClosingConnections138
4.7WrappingUp145
4.8Exercises146
5UndertheHood147
5.1BufferingandTCP149
5.2BufferDeadlock152
5.3PerformanceImplications154
5.4TCPSocketLifeCycle155
5.5DemultiplexingDemystied165
5.6Exercises167
Appendix:HandlingSocketErrors169
Bibliography171
Index173  PrefaceForyears,collegecoursesincomputernetworkingweretaughtwithlittleornohandson
experience.Forvariousreasons,includingsomegoodones,instructorsapproachedthe
principlesofcomputernetworkingprimarilythroughequations,analyses,andabstract
descriptionsofprotocolstacks.Textbooksmightincludecode,butitwasunconnectedto
anythingstudentscouldgettheirhandson.Perhapsinanidealworldthiswouldsufce,
butwebelievethatstudentslearnbetterwhentheycansee(andthenbuild)concrete
examplesoftheprinciplesatwork.Fortunately,suchexamplesaboundtoday.TheInternet
hasbecomeapartofeverydaylife,andaccesstoitsservicesisreadilyavailabletomost
students(andtheirprograms).
The
BerkeleySocketsinterface
,knownuniversallyassocketsforshort,isthede
factostandardapplicationprogramminginterface(API)fornetworking,spanningawide
rangeofoperatingsystems.ThesocketsAPIwasdesignedtoprovide
generic
accessto
interprocesscommunicationservicesthatmightbeimplementedbywhateverprotocols
weresupportedonaparticularplatformIPX,Appletalk,TCP/IP,andsoon.Asaconse-
quenceofthisgenericapproachthesocketsAPImayappeardauntinglycomplicatedat
rst.But,infact,thebasicsofnetworkprogrammingusingtheInternet(TCP/IP)proto-
colsarenotdifcult.Thesocketsinterfacehasbeenaroundforalongtimeatleastin
Internettimebutitislikelytoremainimportantfortheforeseeablefuture.
Wehavewrittenthisbooktoimprovethesupportforsocket-basedprogramming
exercisesinourownnetworkingcourses.Althoughsomenetworkingtextsdealwithnet-
workprogramming,weknowofnonethatcoverTCP/IPsockets.Excellentreferencebooks
onTCP/IPsocketprogrammingexist,buttheyaretoolargeandcomprehensivetobecon-
sideredasasupplementtoanetworkingtext.Ourgoal,therefore,istoprovideagentleix  xPrefaceintroduction,andahandyreference,thatwillallowstudentstodiverightinwithouttoo
muchhandholding.
Enablingstudentstogettheirhandsonrealnetworkservicesviathesocketsinterface
hasseveralbenets.First,forasurprisingnumberofpeople,socketprogrammingistheir
rstexposuretoconcreterealizationsofconceptspreviouslyseenonlyintheabstract.
Dealingwiththeveryrealconsequencesofmessydetails,suchasthelayoutofdatastruc-
turesinmemory,seemstotriggerakindofepiphanyinsomestudents,andthisexperience
hasconsequencesfarbeyondthenetworkingcourse.Second,wendthatstudentswho
understandhowapplicationprograms
use
theservicesofTCP/IPgenerallyhaveaneasier
timegraspingtheprinciplesoftheunderlyingprotocolsthat
implement
thoseservices.
Finally,basicsocketprogrammingskillsareaspringboardtomoreadvancedassignments,
whichsupportlearningaboutroutingalgorithms,multimediaprotocols,mediumaccess
control,andsoon.IntendedAudienceThisbookisaimedprimarilyatstudentsinintroductorycoursesincomputernetworks,
eitherupper-levelundergraduateorgraduate.Itisintendedasasupplement,tobeused
withatraditionaltextbook,thatshouldexplaintheproblemsandprinciplesofcomputer
networks.Atthesametime,wehavetriedtomakethebookreasonablyself-contained
(exceptfortheassumedbackground)sothatitcanalsobeused,forexample,incourses
onoperatingsystemsordistributedcomputing.Wehavepurposelylimitedthebooks
coverageinordertokeepitspricelowenoughtobereasonableforasupplementarytext
forsuchacourse.Anadditionaltargetaudienceconsistsofpractitionerswhoknowsome
C#andwanttolearnsockets.Thisbookshouldtakeyoufarenoughthatyoucanstart
experimentingandlearningonyourown.
WeassumebasicprogrammingskillsandexperiencewithC#andMicrosoftWindows.
YouareexpectedtobeconversantwithC#conceptssuchasclasses,methods,interfaces,
andbasicinheritance.WeassumethatyouhaveaccesstoaMicrosoftWindowsOSthat
caninstallandrunthe.NETFrameworkSoftwareDevelopmentKit(SDK)1andhasaccess
totheInternet(orsomeotherTCP/IPnetwork).The.NETSDKisafreedownloadavailable
at
www.microsoft.com/net
.Thisbookusesversion1.1ofthe.NETFramework,although
thecodeshouldalsoworkwithversion1.0.Mostofourexamplesinvolvecompilingand
runningprogramsfromaDOScommandline;weassumethatyoucandealwiththat,
althoughMicrosoftVisualStudiomaybeusedaswell. 1IfyoupreferUNIX,thereisalsoanopensourceimplementationofthe.NETdevelopmentframework
calledMonointheworks.See
www.go-mono.com
fordetails.  Prefacexi
ApproachChapter1providesageneraloverviewofnetworkingconcepts.Itisnot,byanymeans,a
completeintroductionbutratherisintendedtoallowreaderstosynchronizewiththecon-
ceptsandterminologyusedthroughoutthebook.Chapter2introducesthemechanicsof
simpleclientsandservers;thecodeinthischaptercanserveasastartingpointforavariety
ofexercises.Chapter3coversthebasicsofmessageconstructionandparsing.Thereader
whodigeststherstthreechaptersshouldinprinciplebeabletoimplementaclientand
serverforagiven(simple)applicationprotocol.Chapter4thendealswithtechniquesthat
arenecessarywhenbuildingmoresophisticatedandrobustclientsandservers.Finally,
inkeepingwithourgoalofillustratingprinciplesthroughprogramming,Chapter5dis-
cussestherelationshipbetweentheprogrammingconstructsandtheunderlyingprotocol
implementationsinsomewhatmoredetail.
Ourgeneralapproachintroducesprogrammingconceptsthroughsimpleprogram
examplesaccompaniedbyline-by-linecommentarythatdescribesthepurposeofevery
partoftheprogram.Thisletsyouseetheimportantobjectsandmethodsastheyareused
incontext.Asyoulookatthecode,youshouldbeabletounderstandthepurposeofeach
andeverylineofcode.
Ourexamplesdonottakeadvantageofalllibraryfacilitiesinthe.NETframework.
The.NETlibraryincludeshundredsofclassesthatcanbeusedfornetworkedapplications
thatarebeyondthescopeofthisbook.Truetoitsname,thisbookisaboutTCP/IPsockets
programming,anditmaintainsatightfocusonthesocket-relatedclassesof.NET.Like-
wise,wedonotcoverrawsocketsprogrammingorsocketsprogrammingusingprotocols
otherthanTCP/IP.Wedonotincludethe
WebRequest
and
WebResponse
classes,oranyof
the
System.Web
classes.Webelievethatonceyouunderstandtheprinciples,usingthese
convenienceclasseswillbestraightforward.Thenetwork-relevantclassesthatwedocover
include
IPAddress
,
Dns
,
TcpClient
,
TcpListener
,
UdpClient
,
Socket
,andtheirassociated
enumerationandhelperclasses.
WeincludebriefAPIsummariesofthe.NETclassesdiscussedforconvenience,
butthesearenotcompletesummaries.Also,since.NETisrelativelynewandevolving,
thereaderisencouragedtoutilizethefulllibraryreferenceontheMicrosoftDeveloper
Networkwebsiteat
msdn.microsoft.com/library
fordetaileddescriptions,examples,and
updates.
ThisbookisnotanintroductiontoC#orthe.NETframework.Weexpectthatthe
readerisalreadyacquaintedwiththelanguageandbasic.NETlibraries(especiallyI/O),and
knowshowtodevelopprogramsinC#.Alltheexamplesinthisbookarenotnecessarily
production-qualitycode.Althoughwestriveforrobustness,theprimarygoalofourcode
examplesistoeducate.Inordertoavoidobscuringtheprincipleswithlargeamountsof
error-handlingcode,wehavesacricedsomerobustnessforbrevityandclarity.Wedonot
catcheveryexceptionthatcouldoccur,andinmostcasesweonlycatchexceptionsthat
areparticulartoaclasswearedescribingoraspecicexamplewearetryingtoillustrate.
Similarly,inordertoavoidclutteringtheexampleswithextraneous(nonsocket-
relatedprogramming)code,wehavemadethemcommand-linebased.Whilethebooks  xiiPrefacewebsite(
www.mkp.com/practical/csharpsockets
)containsanexampleofaGUI-enhanced
networkapplication,wedonotincludeitorexplainitinthetext.AcknowledgmentsWewouldliketothankallthepeoplewhohelpedmakethisbookareality.Despitethe
booksbrevity,manyhourswentintoreviewingtheoriginalproposalandthedraft,and
thereviewersinputhassignicantlyshapedthenalresult.
First,thankstothosewhometiculouslyreviewedthedraftofthetextandmade
suggestionsforimprovement.Theseinclude(inalphabeticalorder):DurgaprasadGorti,
MicrosoftCorporation;AdarshKhare,MicrosoftCorporation;MauroOttaviani,Microsoft
Corporation;andDevSubramanian,ChalmersUniversityofTechnology.Anyerrorsthat
remainare,ofcourse,ourresponsibility.Weareveryinterestedinweedingoutsucherrors
infutureprintings,soifyoundone,pleasesendemailtoanyofus.Wewillmaintainan
erratalistonthebooksWebpage.
Finally,wearegratefultothefolksatMorganKaufmann,especiallyoureditorKaryn
JohnsonandprojectmanagerMamataReddy.ForFurtherInformationThisbookhasawebsite(
www.mkp.com/practical/csharpsockets
)thatcontainsadditional
information,includingallthesourcecodepresentedinthebookanderrata.Fromtimeto
time,wemayalsoplacenewmaterialonthewebsite.Weencourageyoutotakeadvantage
ofthisresource,andtosendusyoursuggestionsforimprovementofanyaspectofthis
book.Youcansendfeedbackviathewebsitemaintainedbythepublisher,oryoucansend
usemailtotheaddressesbelow.
DavidB.Makofske
david_makofske@yahoo.com
MichaelJ.Donahoo
jeff_donahoo@baylor.edu
KennethL.Calvert
calvert@netlab.uky.edu  chapter1IntroductionMillionsofcomputersallovertheworldarenowconnectedtotheworldwide
networkknownastheInternet.TheInternetenablesprogramsrunningoncomputersthou-
sandsofmilesaparttocommunicateandexchangeinformation.Ifyouhaveacomputer
connectedtoanetwork,youhaveundoubtedlyusedaWebbrowseratypicalprogram
thatmakesuseoftheInternet.Whatdoessuchaprogramdotocommunicatewithothers
overanetwork?Theanswervarieswiththeapplicationandtheoperatingsystem(OS),but
agreatmanyprogramsgetaccesstonetworkcommunicationservicesthroughthesock-
etsapplicationprogramminginterface(API).Thegoalofthisbookistogetyoustarted
writingprogramsthatusethesocketsAPI.
BeforedelvingintothedetailsoftheAPI,itisworthtakingabrieflookatthebig
pictureofnetworksandprotocolstoseehowanapplicationprogramminginterfacefor
TCP/IPtsin.Ourgoalhereis
not
toteachyouhownetworksandTCP/IPworkmanyne
textsareavailableforthatpurpose[2,4,10,15,20]butrathertointroducesomebasic
conceptsandterminology.1.1Networks,Packets,andProtocolsAcomputernetworkconsistsofmachinesinterconnectedbycommunicationchannels.
Wecallthesemachines
hosts
and
routers
.Hostsarecomputersthatrunapplicationssuch
asyourWebbrowser,theapplicationprogramsrunningonhostsarereallytheusersof
thenetwork.Routersaremachineswhosejobistorelayor
forward
informationfrom
onecommunicationchanneltoanother.Theymayrunprogramsbuttypicallydonot
runapplicationprograms.Forourpurposes,a
communicationchannel
isameansof1  2Chapter1:Introductionconveyingsequencesofbytesfromonehosttoanother;itmaybeabroadcasttechnology
likeEthernet,adial-upmodemconnection,orsomethingmoresophisticated.
Routersareimportantsimplybecauseitisnotpracticaltoconnecteveryhostdirectly
toeveryotherhost.Instead,afewhostsconnecttoarouter,whichconnectstoother
routers,andsoontoformthenetwork.Thisarrangementletseachmachinegetbywitha
relativelysmallnumberofcommunicationchannels;mosthostsneedonlyone.Programs
thatexchangeinformationoverthenetwork,however,donotinteractdirectlywithrouters
andgenerallyremainblissfullyunawareoftheirexistence.
By
information
weheremeanasequencesofbytesthatareconstructedandinter-
pretedbyprograms.Inthecontextofcomputernetworksthesebytesequencesaregener-
allycalled
packets
.Apacketcontainscontrolinformationthatthenetworkusestodoits
jobandsometimesalsoincludesuserdata.Anexampleisinformationaboutthepackets
destination.Routersusesuchcontrolinformationtogureouthowtoforwardeachpacket.
A
protocol
isanagreementaboutthepacketsexchangedbycommunicatingprograms
andwhattheymean.Aprotocoltellshowpacketsarestructuredforexample,wherethe
destinationinformationislocatedinthepacketandhowbigitisaswellashowthe
informationistobeinterpreted.Aprotocolisusuallydesignedtosolveaspecicproblem
usinggivencapabilities.Forexample,theHypertextTransferProtocol(HTTP)solvesthe
problemoftransferringhypertextobjectsbetweenserverswheretheyarestoredandWeb
browsersthatmakethemavailabletohumanusers.
Implementingausefulnetworkrequiresthatalargenumberofdifferentproblemsbe
solved.Tokeepthingsmanageableandmodular,differentprotocolsaredesignedtosolve
differentsetsofproblems.TCP/IPisonesuchcollectionofsolutions,sometimescalleda
protocolsuite
.IthappenstobethesuiteofprotocolsusedintheInternet,butitcanbe
usedinstand-aloneprivatenetworksaswell;henceforthwhenwesaythenetwork,we
meananynetworkthatusestheTCP/IPprotocolfamily.ThemainprotocolsintheTCP/IP
familyaretheInternetProtocol(IP),theTransmissionControlProtocol(TCP),andtheUser
DatagramProtocol(UDP).
Itturnsouttobeusefultoorganizeprotocolsinafamilyinto
layers
;TCP/IPand
virtuallyallotherprotocolfamiliesareorganizedthisway.Figure1.1showstherelation-
shipsamongtheprotocols,applications,andthesocketsAPIinthehostsandrouters,as
wellastheowofdatafromoneapplication(usingTCP)toanother.TheboxeslabeledTCP,
UDP,andIPrepresentimplementationsofthoseprotocols.Suchimplementationstypically
resideintheoperatingsystemofahost.ApplicationsaccesstheservicesprovidedbyUDP
andTCPthroughthesocketsAPI.Thearrowdepictstheowofdatafromtheapplication,
throughtheTCPandIPimplementations,throughthenetwork,andbackupthroughthe
IPandTCPimplementationsattheotherend.
InTCP/IP,thebottomlayerconsistsoftheunderlyingcommunicationchannels,such
asEthernetordial-upmodemconnections.Thosechannelsareusedbythe
networklayer
,
whichdealswiththeproblemofforwardingpacketstowardtheirdestination(i.e.,what
routersdo).ThesinglenetworklayerprotocolintheTCP/IPfamilyistheInternetProtocol;
itsolvestheproblemofmakingthesequenceofchannelsandroutersbetweenanytwo
hostslooklikeasinglehost-to-hostchannel.  1.1Networks,Packets,andProtocols3 Application
Socket IPChannel
(e.g., Ethernet) IP
Router
Host
Host UDP TCP Channel Application
Socket IP UDP TCP Figure1.1:
ATCP/IPnetwork.TheInternetProtocolprovidesa
datagram
service:Everypacketishandledanddeliv-
eredbythenetworkindependently,liketelegramsorparcelssentviathepostalsystem.
Tomakethiswork,eachIPpackethastocontainthe
address
ofitsdestination,justasevery
packageyoumailisaddressedtosomebody.(Wellsaymoreaboutaddressesshortly.)
Althoughmostparceldeliverycompaniesguaranteedeliveryofapackage,IPisonlya
best-effortprotocol:Itattemptstodelivereachpacket,butitcan(andoccasionallydoes)
lose,reorder,orduplicatepacketsintransitthroughthenetwork.
ThelayeraboveIPiscalledthe
transportlayer.
Itoffersachoicebetweentwo
protocols:TCPandUDP.EachbuildsontheserviceprovidedbyIP,buttheydosoindif-
ferentwaystoprovidedifferentkindsofchannels,whichareusedby
applicationprotocols
withdifferentneeds.TCPandUDPhaveonefunctionincommon:addressing.Recallthat
IPdeliverspacketstohosts;clearly,anergranularityofaddressingisneededtogeta
packettoaparticularapplication,perhapsoneofmanyusingthenetworkinthesame
host.BothTCPandUDPuseaddressescalled
portnumbers
sothatapplicationswithin
hostscanbeidentied.Theyarecalled
end-to-endtransport
protocolsbecausetheycarry
dataallthewayfromoneprogramtoanother(whereasIPcarriesdatafromonehostto
another).
TCPisdesignedtodetectandrecoverfromthelosses,duplications,andothererrors
thatmayoccurinthehost-to-hostchannelprovidedbyIP.TCPprovidesa
reliable
byte-stream
channel,sothatapplicationsdonthavetodealwiththeseproblems.It
isa
connection-oriented
protocol:Beforeusingittocommunicate,twoprogramsmust
rstestablishaTCPconnection,whichinvolvescompletinganexchangeof
handshake
messages
betweentheTCPimplementationsonthetwocommunicatingcomputers.Using
TCPissimilartoleinput/output(I/O).Infact,alethatiswrittenbyoneprogramand
readbyanotherisareasonablemodeofcommunicationoveraTCPconnection.UDP,
ontheotherhand,doesnotattempttorecoverfromerrorsexperiencedbyIP;itsimply
extendstheIPbest-effortdatagramservicesothatitworksbetweenapplicationsprograms  4Chapter1:Introductioninsteadofbetweenhosts.Thus,applicationsthatuseUDPmustbepreparedtodealwith
losses,reordering,andsoon.1.2AboutAddressesWhenyoumailaletter,youprovidetheaddressoftherecipientinaformthatthepostal
servicecanunderstand.Beforeyoucantalktosomebodyonthephone,youmustsupply
theirnumbertothetelephonesystem.Inasimilarway,beforeaprogramcancommunicate
withanotherprogram,itmusttellthenetworkwheretondtheotherprogram.InTCP/IP,
ittakestwopiecesofinformationtoidentifyaparticularprogram:an
Internetaddress
,
usedbyIP,anda
portnumber
,theadditionaladdressinterpretedbythetransportprotocol
(TCPorUDP).
Internetaddressesare32-bitbinarynumbers.1InwritingdownInternetaddresses
forhumanconsumption(asopposedtousingtheminsideapplications),wetypicallyshow
themasastringoffourdecimalnumbersseparatedbyperiods(e.g.,10.1.2.3);thisiscalled
the
dotted-quad
notation.Thefournumbersinadotted-quadstringrepresentthecontents
ofthefourbytesoftheInternetaddress,thuseachisanumberbetween0and255.
Technically,eachInternetaddressreferstotheconnectionbetweenahostandan
underlyingcommunicationchannel,suchasadial-upmodemorEthernetcard.Because
eachsuchnetworkconnectionbelongstoasinglehost,anInternetaddressidentiesa
hostaswellasitsconnectiontothenetwork.However,becauseahostcanhavemulti-
plephysicalconnections(interfaces)tothenetwork,onehostcanhavemultipleInternet
addresses.
TheportnumberinTCPorUDPisalwaysinterpretedrelativetoanInternetaddress.
Returningtoourearlieranalogies,aportnumbercorrespondstoaroomnumberatagiven
streetaddress,say,thatofalargebuilding.Thepostalserviceusesthestreetaddressto
getthelettertoamailbox;whoeveremptiesthemailboxisthenresponsibleforgetting
thelettertotheproperroomwithinthebuilding.Orconsideracompanywithaninternal
telephonesystem:Tospeaktoanindividualinthecompany,yourstdialthecompanys
mainnumbertoconnecttotheinternaltelephonesystem,andthendialtheextension
oftheparticulartelephoneoftheindividualyouwishtospeakwith.Intheseanalogies,
theInternetaddressisthestreetaddressorthecompanysmainnumber,whereasthe
portcorrespondstotheroomnumberortelephoneextension.Portnumbersare16-bit
unsignedbinarynumbers,soeachoneisintherangeof1to65,535(0isreserved). 1Throughoutthisbooktheterm
Internetaddress
referstotheaddressesusedwiththecurrentversion
ofIP,whichisversion4[11].Becauseitisexpectedthata32-bitaddressspacewillbeinadequatefor
futureneeds,anewversionofIPhasbeendened[5];itprovidesthesameservicebuthasmuchbigger
Internetaddresses(128bits).IPv6,asthenewversionisknown,hasnotbeenwidelydeployed;the
socketsAPIwillrequiresomechangestodealwithitsmuchlargeraddresses[6].The.NETframework
doessupportIPv6addresses,buttheyarenotcoveredinthisbook.  1.3AboutNames5
1.3AboutNamesMostlikelyyouareaccustomedtoreferringtohostsby
name
(e.g.,host.example.com).
However,theInternetprotocolsdealwithnumericaladdresses,notnames.Youshould
understandthattheuseofnamesinsteadofaddressesisaconveniencefeaturethatis
independentofthebasicserviceprovidedbyTCP/IPyoucanwriteanduseTCP/IPappli-
cationswithouteverusinganame.Whenyouuseanametoidentifyacommunication
endpoint,thesystemhastodosomeextraworkto
resolve
thenameintoanaddress.
Thisextrastepisoftenworthit,foracoupleofreasons.First,namesaregenerally
easierforhumanstorememberthandotted-quads.Second,namesprovidealevelofindi-
rection,whichinsulatesusersfromIPaddresschanges.Duringthewritingofthisbook,the
Webserverforthepublisherofthistext,MorganKaufmann,changedInternetaddresses
from213.38.165.180to129.35.78.178.However,becausewerefertothatWebserver
as
www.mkp.com
(clearlymucheasiertorememberthan213.38.165.180),andbecause
thechangeisreectedinthesystemthatmapsnamestoaddresses(
www.mkp.com
now
resolvestothenewInternetaddressinsteadof213.38.165.180),thechangeistransparent
toprogramsthatusethenametoaccesstheWebserver.
Thename-resolutionservicecanaccessinformationfromawidevarietyofsources.
Twooftheprimarysourcesarethe
DomainNameSystem
(DNS)andlocalcongura-
tiondatabases.TheDNS[8]isadistributeddatabasethatmaps
domainnames
suchas
www.mkp.com
toInternetaddressesandotherinformation;theDNSprotocol[9]allows
hostsconnectedtotheInternettoretrieveinformationfromthatdatabaseusingTCP
orUDP.LocalcongurationdatabasesaregenerallyOS-specicmechanismsforlocal
name-to-Internetaddressmappings.MicrosoftWindowsprovidesa
hosts
textlewhere
IP-to-domain-namemappingscanbehard-codedoroverridden.UNIX-basedsystems
typicallyhavealecalled/etc/hoststhatdoesthesamething.1.4ClientsandServersInourpostalandtelephoneanalogies,eachcommunicationisinitiatedbyoneparty,who
sendsaletterordialsatelephonecall,whiletheotherpartyrespondstotheinitiators
contactbysendingareturnletterorpickingupthephoneandtalking.Internetcommu-
nicationissimilar.Theterms
client
and
server
refertotheseroles:Theclientprogram
initiatescommunication,whiletheserverprogramwaitspassivelyforandthenresponds
toclientsthatcontactit.Together,theclientandservercomposethe
application
.The
terms
client
and
server
aredescriptiveofthetypicalsituationinwhichtheservermakesa
particularcapabilityforexample,adatabaseserviceavailabletoanyclientthatisable
tocommunicatewithit.
Whetheraprogramisactingasaclientorserverdeterminesthegeneralformofits
useofthesocketsAPItocommunicatewithits
peer
.(Theclientisthepeeroftheserver
andviceversa.)Beyondthat,theclient-serverdistinctionisimportantbecause
theclient
needstoknowtheserversaddressandportinitially
,butnotviceversa.Withthesockets  6Chapter1:IntroductionAPI,theservercan,ifnecessary,learntheclientsaddressinformationwhenitreceives
theinitialcommunicationfromtheclient.Thisisanalogoustoatelephonecallinorder
tobecalled,apersondoesnotneedtoknowthetelephonenumberofthecaller.Aswith
atelephonecall,oncetheconnectionisestablished,thedistinctionbetweenserverand
clientdisappears.
HowdoesaclientndoutaserversIPaddressandportnumber?Usually,theclient
knowsthenameoftheserveritwants,forexample,fromaUniversalResourceLocator
(URL)suchas
http://www.mkp.com
,andusesthenameresolutionservicetolearnthe
correspondingInternetaddress.
Findingaserversportnumberisadifferentstory.Inprinciple,serverscanuseany
port,buttheclientmustbeabletolearnwhatitis.IntheInternet,thereisaconventionof
assigning
well-knownportnumbers
tocertainapplications.TheInternetAssignedNumber
Authority(IANA)overseesthisassignment.Forexample,portnumber21hasbeenassigned
totheFileTransferProtocol.WhenyourunanFTPclientapplication,ittriestocontactthe
FTPserveronthatportbydefault.Alistofalltheassignedportnumbersismaintainedby
thenumberingauthorityoftheInternet(see
www.iana.org/assignments/portnumbers
).
Therearealsonumerousstandards,protocols,andproposalsfor
directoryservices
,
bywhichaclientcanquerytheservicesandlocationsavailablefromserversfromadirec-
tory.Ofcourse,theclientmustknowtheaddressandporttocontactthedirectoryservices
serveroninordertondthisinformation!Again,thisistypicallydenedandpublished
asbeingatawell-knownlocationfortheintendedclients.1.5WhatIsaSocket?A
socket
isanabstractionthroughwhichanapplicationmaysendandreceivedata,in
muchthesamewayasanopenleallowsanapplicationtoreadandwritedatatostable
storage.Asocketallowsanapplicationtoplugintothenetworkandcommunicatewith
otherapplicationsthatarealsopluggedintothesamenetwork.Informationwrittento
thesocketbyanapplicationononemachinecanbereadbyanapplicationonadifferent
machine,andviceversa.
Differenttypesofsocketscorrespondtodifferentunderlyingprotocolsuitesand
differentstacksofprotocolswithinasuite.ThisbookdealsonlywiththeTCP/IPproto-
colsuite.ThemaintypesofsocketsinTCP/IPtodayare
streamsockets
and
datagram
sockets
.StreamsocketsuseTCPastheend-to-endprotocol(withIPunderneath)andthus
provideareliablebyte-streamservice.DatagramsocketsuseUDP(again,end-to-endwith
IPunderneath)andthusprovideabest-effortdatagramservicethatapplicationscanuseto
sendindividualmessagesuptoabout65,500bytesinlength.Streamanddatagramsock-
etsarealsosupportedbyotherprotocolsuites,butthisbookdealsonlywithTCPstream
socketsandUDPdatagramsockets.ATCP/IPsocketisuniquelyidentiedbyanInternet
address,anend-to-endprotocol(TCPorUDP),andaportnumber.Asyouproceed,you
willencounterseveralwaysforasockettobecomeboundtoanaddress.  1.6Exercises7Applications
Socket references
Sockets bound to ports
TCP socketsUDP sockets
TCP portsUDP ports
TCP UDP IP 1 265535 
  1 265535   Figure1.2:
Sockets,protocols,andports.Figure1.2depictsthelogicalrelationshipsamongapplications,socketabstractions,
protocols,andportnumberswithinasinglehost.Notethatasinglesocketabstraction
canbereferencedbymultipleapplicationprograms.Eachprogramthathasareference
(calleda
descriptor
)toaparticularsocketcancommunicatethroughthatsocket.Earlier
wesaidthataportidentiesanapplicationonahost.Actually,aportidentiesasocket
onahost.Figure1.2showsthatmultipleprogramsonahostcanaccessthesamesocket.
Inpractice,separateprogramsthataccessthesamesocketwouldusuallybelongtothe
sameapplication(e.g.,multiplecopiesofaWebserverprogram),althoughinprinciple
theycouldbelongtodifferentapplications.1.6Exercises1.Canyouthinkofareal-lifeexampleofcommunicationthatdoesnotttheclient-
servermodel?
2.Tohowmanydifferentkindsofnetworksisyourhomeconnected?Howmany
supporttwo-waycommunication?
3.IPisabest-effortprotocol,requiringthatinformationbebrokendownintodata-
grams,whichmaybelost,duplicated,orreordered.TCPhidesallofthis,providing
areliableservicethattakesanddeliversanunbrokenstreamofbytes.Howmight
yougoaboutprovidingTCPserviceontopofIP?WhywouldanybodyuseUDPwhen
TCPisavailable?  This Page Intentionally Left Blank chapter2BasicSocketsYouarenowreadytolearntowriteyourownsocketapplicationsinC#.Oneofthe
advantagesoftheC#programminglanguageisitsuseofMicrosofts.NETframework,
whichprovidesapowerfullibraryofAPIsforprogramming.Amongtheclasslibrariespro-
videdarethe
System.Net
and
System.Net.Sockets
namespaces,andmostofthisbookis
dedicatedtohowtousethesocketAPIsprovidedthere.Inthischapterwebeginbydemon-
stratinghowC#applicationsidentifynetworkhosts.Then,wedescribethecreationofTCP
andUDPclientsandservers.The.NETframeworkprovidesacleardistinctionbetween
usingTCPandUDP,deningaseparatesetofclassesforbothprotocols,sowetreateach
separately.Finally,wediscuss
theSocket
classthatistheunderlyingimplementationof
allthehigherlevel.NETsocketclasses.2.1SocketAddressesIPv4uses32-bitbinaryaddressestoidentifycommunicatinghosts.Aclientmustspecify
theIPaddressofthehostrunningtheserverprogramwhenitinitiatescommunication;the
networkinfrastructureusesthe32-bit
destinationaddress
toroutetheclientsinformation
tothepropermachine.AddressescanbespeciedinC#bytheir32-bitlongintegervalueor
byusingastringthatcontainsthedotted-quadrepresentationofthenumericaddress(e.g.,
169.1.1.1)..NETencapsulatestheIPaddressesabstractioninthe
IPAddress
classwhichcan
takealongintegerIPargumentinitsconstructor,orprocessastringwiththedotted-quad
representationofanIPaddressusingits
Parse()
method.The
Dns
classalsoprovides
amechanismtolookup,or
resolve
,namestoIPaddresses(e.g.,
server.example.com
).
SinceinthemodernInternetitisnotuncommonforasingleservertoresolvetomultiple9    12Chapter2:BasicSockets
DisplaythelistofIPaddress(es):
lines1722
LoopthroughalltheIPaddress(es)containedinthe
AddressList
property,which
isanarrayof
IPAddress
classinstances.Displaythelistofaliashostnames:
lines2429
Loopthroughanyhostnamealiasescontainedinthe
Aliases
property,whichis
anarrayof
String
s.Ifahostnamebeinglookedupdoesnothaveanyaliases,this
arraywillbeempty.
2.
Printinformationaboutthelocalhost:
lines3746Getandprintthelocalhostnameusing
Dns.GetHostName():
lines3741
Notethatthe
GetHostName()
methodwillonlyreturnthehostname,notthefully-
qualiedInternetDNSname.Call
PrintHostInfo()
withthehostnametoretrieveandprintalllocalhost
info:
line43Catchanyexceptionsgettingthelocalhostname:
lines4446
3.
Loopthroughallcommand-lineargumentsandcall
PrintHostInfo()
foreach
ofthem:
lines4852
Tousethisapplicationtondinformationaboutthelocalhostandourpublishers
Webserver(
www.mkp.com
),dothefollowing:C:
\
>IPAddressExamplewww.mkp.com
LocalHost:
HostName:tractor
CanonicalName:tractor.farm.com
IPAddresses:169.1.1.2
Aliases:
www.mkp.com:
CanonicalName:www.mkp.com
IPAddresses:129.35.78.178
Aliases:IfweknowtheIPaddressofahost(e.g.,169.1.1.1),wendthenameofthehostbyC:
\
>IPAddressExample169.1.1.1
LocalHost:
HostName:tractor
CanonicalName:tractor.farm.com
IPAddresses:169.1.1.2
Aliases:
169.1.1.1:
CanonicalName:base.farm.com
IPAddresses:169.1.1.1
Aliases:gateway.farm.com  2.1SocketAddresses13Whenthenameserviceisnotavailableforsomereasonsay,theprogramisrunning
onamachinethatisnotconnectedtoanynetworkattemptingtoidentifyahostbyname
mayfail.Moreover,itmaytakeasignicantamountoftimetodoso,asthesystemtries
variouswaystoresolvethenametoanIPaddress.1Itisthereforegoodtoknowthatyou
canalwaysrefertoahostusingtheIPaddressindotted-quadnotation.Inanyofour
examples,ifaremotehostisspeciedbyname,thehostrunningtheexamplemustbe
conguredtoconvertnamestoaddresses,ortheexamplewontwork.Ifyoucanping
ahostusingoneofitsnames(e.g.,runthecommandping
server.example.com
),then
theexamplesshouldworkwithnames.Ifyourpingtestfailsortheexamplehangs,try
specifyingthehostbyIPaddress,whichavoidsthename-to-addressconversionaltogether. IPAddressSummary2 Description
The
IPAddress
classcontainstheaddressofaninterfaceonanIPnetwork.
SelectedConstructor
public
IPAddress
(
long
address
);
Returnsan
IPAddress
instancewiththevalueofthesupplied
long
argument.
SelectedMethods
publicoverridebool
Equals
(
object
comparand
);
Comparetwo
IPAddress
instancesandreturn
true
iftheycontainthesameIP
address.
publicstaticshort
HostToNetworkOrder
(
short
);
publicstaticint
HostToNetworkOrder
(
int
);
publicstaticlong
HostToNetworkOrder
(
long
);
publicstaticshort
NetworkToHostOrder
(
short
);
publicstaticint
NetworkToHostOrder
(
int
); 1InChapter4wediscusshowasynchronousoperationsmaybeperformed,whichisalsoapplicable
toDnslookups.2Foreach.NETnetworkingclassdescribedinthistext,wepresentonlyasummaryoftheprimary
methodsandpropertiesandomitthosewhoseuseisbeyondthescopeofthistext.Aswithevery-
thingin.NET,thespecicationisamovingtarget.Thisinformationisincludedtoprovideanoverall
pictureofthe.NETsocketinterface,notasanalauthority.Weencouragethereadertorefertothe
APIspecicationfrom
www.msdn.microsoft.com
asthecurrentanddenitivesource.  14Chapter2:BasicSocketspublicstaticlong
NetworkToHostOrder
(
long
);
Host-to-networkandnetwork-to-hostorderingconversionmethods(seeSection
3.1.2).
publicstaticIPAddress
Parse
(
string
address
);
Convertastringindottedquadnotationtoan
IPAddress
instance.Throws
ArgumentNullException
,
FormatException
.
publicoverridestring
ToString()
;
Returnsthestringdottedquadnotationforthe
IPAddress
instance.
SelectedFields
publicstaticreadonlyIPAddress
Any
;
Containsavalueof0.0.0.0,anynetworkinterface.
publicstaticreadonlyIPAddress
Broadcast
;
Containsavalueof255.255.255.255,allhostsonasubnet.
publicstaticreadonlyIPAddress
Loopback
;
Containsavalueof127.0.0.1,loopbackforthelocalhost. IPHostEntrySummary Description
IPHostEntry
isacontainerclassreturnedby
Dns
classmethods
GetHostByName()
,
GetHostByAddress()
and
Resolve()
.TheclasscontainsDomainNameSystem(DNS)
informationaboutahost,includinghostname,arrayofIPaddresses,andarrayof
aliashostnames.
SelectedProperties
publicIPAddress[]
AddressList
{
get;set;
}
Anarrayof
IPAddress
instances.
publicstring[]
Aliases
{
get;set;
}
AnarrayofstringscontainingDNSaliashostnames.
publicstring
HostName
{
get;set;
}
Astringcontainingtheprimarycanonicalhostname.  2.2SocketImplementationin.NET15 DnsSummary Description
The
Dns
classprovidesanumberofstaticmethodstoretrieveinformationabouta
hostnameorIPaddressfromtheDomainNameSystem(DNS).
SelectedMethods
publicstaticIPHostEntry
GetHostByAddress
(
IPAddress
address
);
Attemptstoreverselookupan
IPAddress
instanceandprovidean
IPHostEntry
containingthehostsDNSinformation.Throws
ArgumentNullException
,
Socket-
Exception
,
SecurityException
.
publicstaticIPHostEntry
GetHostByAddress
(
string
address
);
AttemptstoreverselookupastringIPaddressindotted-quadnotationand
providean
IPHostEntry
instancecontainingthehostsDNSinformation.Throws
ArgumentNullException
,
SocketException
,
FormatException
,
SecurityException
.
publicstaticIPHostEntry
GetHostByName
(
string
hostname
);
DoesaDNSlookuponthestringhostnameargumentandprovidesan
IPHostEntry
instancecontainingthehostsDNSinformation.Throws
ArgumentNullException
,
SocketException
,
SecurityException
.
publicstaticstring
GetHostName()
;
Returnsastringcontainingthehostnameofthelocalcomputer.
publicstaticIPHostEntry
Resolve
(
string
hostname
);
DoesaDNSlookuponthestringhostnameargumentandprovidesan
IPHostEntry
instancecontainingthehostsDNSinformation.Throws
ArgumentNullException
,
SocketException
,
SecurityException
. 2.2SocketImplementationin.NETBeforewebegindescribingthedetailsofthe.NETsocketclasses,itisusefultogivea
briefoverviewandhistoryofsocketsonMicrosoftWindows.Socketswasinitiallycreated
fortheBerkeleySoftwareDistribution(BSD)ofUNIX.AversionofsocketsforMicrosoft
WindowscalledWinSock1.1wasinitiallyreleasedin1992andiscurrentlyonversion2.0.
Withsomeminordifferences,WinSockprovidesthestandardsocketsfunctionsavailable
intheBerkeleysocketsCinterface(theCversionofthisbookdescribesthatinterfacein
detail[24]).  16Chapter2:BasicSockets TcpListener
Class Socket Class
WinSock 2.0 Implementation
TcpClient
Class UdpClient
Class .NET
Framework
Classes
Underlying
Implementation Figure2.1:
RelationshipofSocketclasses.In2002MicrosoftreleasedthestandardizedAPIframeworkknownas.NET,which
providesauniedclasslibraryacrossalloftheprogramminglanguagesMicrosoftoffers.
Amongthefeaturesofthelibraryarehigherlevelclassesthathidemuchoftheimplemen-
tationdetailandsimplifymanyprogrammingtasks.However,abstractioncansometimes
hidesomeoftheexibilityandpowerofalowerlevelinterface.Inordertoallowaccess
totheunderlyingsocketsinterface,Microsoftimplementeda.NET
Socket
class,whichis
awrapperaroundtheWinSocksocketfunctionsandhasmostoftheversatility(andcom-
plexity)ofsocketsinterfaceexposed.Thenthreehigher-levelsocketclasses,
TcpClient
,
TcpListener
,and
UdpClient
,wereimplementedbyusingthe.NET
Socket
wrapperclass.
Infact,theseclasseshaveaprotectedpropertythatisaninstanceofthe
Socket
classthey
areusing.PictoriallythiscanberepresentedasshowninFigure2.1.
Whyisthisimportanttoknow?First,toclarifywhatwemeanwhenwerefertoa
socket.Theword
socket
hascometomeanmanydifferentthingsinnetworkprogram-
ming,fromanAPItoaclassnameorinstance.Ingeneralwhenwerefertoanuppercase

Socket
wemeanthe.NETclass,whilealowercasesocketreferstoasocketinstance
usinganyofthe.NETsocketclasses.
Second,theunderlyingimplementationoccasionallybecomesapparenttothe.NET
programmer.Sometimesthe
Socket
classneedstobeutilizedtotakeadvantageof
advancedfunctionality.SomecomponentsoftheunderlyingWinSockimplementation
arealsostillvisible,suchastheuseofWinSockerrorcodes,whichareavailablevia
the
ErrorCode
propertyof
SocketException
andcanbeusedtodetermineexactlywhat
typeoferrorhasoccurred.TheWinSockerrorcodesarediscussedinmoredetailinthe
Appendix.2.3TCPSocketsThe.NETframeworkprovidestwoclassesspecicallyforTCP:
TcpClient
and
TcpListener
.
Theseclassesprovideahigherlevelabstractionofthe
Socket
class,butaswewillsee  2.3TCPSockets17thereareinstanceswhenadvancedfunctionalityisavailableonlythroughdirectuseofthe
Socket
class.
AninstanceofanyoftheseclassesrepresentsoneendofaTCPconnection.A
TCP
connection
isanabstracttwo-waychannelwhoseendsareeachidentiedbyanIPaddress
andportnumber.Aswewillsee,.NETusesthe
EndPoint
classanditssubclass
IPEnd-
Point
toabstractthisconcept.Beforebeingusedforcommunication,aTCPconnection
mustgothroughasetupphase,whichstartswiththeclientsTCPsendingaconnection
requesttotheserversTCP.Aninstanceof
TcpListener
listensforTCPconnectionrequests
andcreatesanewsocket(intheformofa
TcpClient
or
Socket
instance)tohandleeach
incomingconnection.2.3.1TCPClientATCPclientinitiatescommunicationwithaserverthatispassivelywaitingtobecontacted.
ThetypicalTCPclientgoesthroughthreesteps:
1.
Constructaninstanceof
TcpClient
:
aTCPconnectioncanbecreatedimplicitly
intheconstructorbyspecifyingtheremotehostandport,orexplicitlyusingthe
Connect()
method.
2.
Communicateusingthesocketsstream:
Aconnectedinstanceof
TcpClient
containsa
NetworkStream
thatcanbeusedlikeanyother.NETI/Ostream.
3.
Closetheconnection:
Callthe
Close()
methodof
TcpClient
.
OurrstTCPapplication,called
TcpEchoClient.cs
,isaclientthatcommunicateswithan
echoserver
usingTCP.Anechoserversimplyrepeatswhateveritreceivesbacktothe
client.Thestringtobeechoedisprovidedasacommand-lineargumenttoourclient.
Manysystemsincludeanechoserverfordebuggingandtestingpurposes.Totestifthe
standardechoserverisrunning,trytelnettingtoport7(thedefaultechoport)onthe
server(e.g.,atcommandline
telnetserver.example.com7
oruseyourtelnetapplica-
tionofchoice).Ifnot,youcanrunthisclientagainstthe
TcpEchoServer.cs
serverfrom
thenextsection.
TcpEchoClient.cs 0
usingSystem;//ForString,Int32,Console,ArgumentException
1
usingSystem.Text;//ForEncoding
2
usingSystem.IO;//ForIOException
3
usingSystem.Net.Sockets;//ForTcpClient,NetworkStream,SocketException
4
5
classTcpEchoClient{
6     2.3TCPSockets21TheaboveexampleassumesthateitheradefaultechoserverortheTcpEchoServer
programfromthenextsectionisrunningtorespondtotherequest.Therunningofthe
TcpEchoServerprogramfortheaboverequestswouldlooklike:C:
\
>TcpEchoServer
Handlingclient-echoed10bytes.
Handlingclient-echoed16bytes.C
C:
\
>See
TcpEchoClientGUI.cs
onthisbookswebsite(www.mkp.com/practical/
csharpsockets)foranimplementationoftheTCPechoclientwithagraphicalinterface. TcpClientSummary Description
TcpClient
providessimplemethodsforconnectingto,sending,andreceivingdata
overaTCPconnection.The
TcpClient
method
GetStream()
providesaccesstoa
NetworkStream
toabstractthesendingandreceivingofdata.
Constructors
public
TcpClient()
;
public
TcpClient
(
IPEndPoint
localEP
);
public
TcpClient
(
string
hostname
,
int
port
);
Createsanewinstanceofthe
TcpClient
class.The
TcpClient
constructorshave
optionalargumentsforalocalinterfacetobindto(
IPEndPoint
),ortheserverto
connectto(stringhostname/IPandintegerport).Iftheserverisnotspecied,you
mustcall
Connect()
beforesendingdata.Iftheserverisspecied,theconnect
isdoneimplicitly.Throws
ArgumentNullException
,
ArgumentOutOfRangeException
,
SocketException
.
SelectedMethods
publicvoid
Close()
;
ClosestheTCPconnection.Notethatwhenusinga
NetworkStream
itispreferableto
closethe
NetworkStream
thatwillimplicitlyclosetheunderlyingsocket.Closinga
TcpClient
doesnotfreetheresourcesofits
NetworkStream
.
publicvoid
Connect
(
IPEndPoint
);
publicvoid
Connect
(
IPAddress
address
,
int
port
);  22Chapter2:BasicSocketspublicvoid
Connect
(
string
hostname
,
int
port
);
Connectstoaremotehostusingthespecieddestinationparameters.Throws
ArgumentNullException
,
ArgumentOutOfRangeException
,
SocketException
,
Object
DisposedException
.
publicNetworkStream
GetStream()
;
Returnsa
NetworkStream
instanceusedtosendandreceivedata.Throws
Invalid-
OperationException
,
ObjectDisposedException
.
SelectedProperties
protectedSocket
Client
{
get;set;
}
Getsorsetstheunderlying
Socket
.Since
Client
isaprotectedproperty,itmayonly
beaccessedbyclassesthatextend
TcpClient
.Thisisusefulforaccessingsocket
optionsthatarenotdirectlyaccessiblefromthe
TcpClientAPI
directly. EndPoint Description
EndPoint
isanabstractbaseclassthatrepresentsanetworkconnectionpoint.The
IPEndPoint
classderivesfromthisclass.
Constructor
protected
EndPoint()
;
Thisconstructoriscalledbyderivedclassconstructors.
SelectedMethods
publicvirtualstring
ToString()
;
Returnsastringrepresentationofthecurrent
EndPoint
. IPEndPoint Description
IPEndPoint
representsaTCP/IPnetworkendpointasanIPaddressandaportnumber.  2.3TCPSockets23Constructor
public
IPEndPoint
(
long
address
,
int
port
);
public
IPEndPoint
(
IPAddress
address
,
int
port
);
Theconstructorinitializesanewinstanceofthe
IPEndPoint
classwiththespecied
IPaddress(ineither
long
or
IPAddress
form)andintegerportnumber.
SelectedMethods
publicvirtualstring
ToString()
;
Returnsastringrepresentationofthecurrent
IPEndPoint
.
SelectedProperties
publicIPAddress
Address
{
get;set;
}
An
IPAddress
instancecontainingtheIPaddressoftheendpoint.
publicint
Port
{
get;set;
}
AnintegervaluerepresentingtheTCPorUDPportnumberoftheendpoint.Theport
mustbeintherange
MinPort
to
MaxPort
. 2.3.2TCPServerWenowturnourattentiontoconstructingaserver.Theserversjobistosetupanend-
pointforclientstoconnecttoandpassivelywaitforconnections.ThetypicalTCPserver
goesthroughtwosteps:
1.Constructa
TcpListener
instance,specifyingthelocaladdressandport,andcall
the
Start()
method.Thissocketlistensforincomingconnectionsonthespecied
port.
2.Repeatedly:Callthe
AcceptTcpClient()
methodof
TcpListener
togetthenextincoming
clientconnection.Uponestablishmentofanewclientconnection,aninstanceof
TcpClient
forthenewconnectioniscreatedandreturnedbythe
AcceptTcp-
Client()
call.Communicatewiththeclientusingthe
Read()
and
Write()
methodsof
TcpClient
s
NetworkStream
.Closethenewclientsocketconnectionandstreamusingthe
Close()
methodsof
NetworkStream
and
TcpClient
.
NotethatinC#,the
TcpClient
classisusedtoaccessaTCPconnection,whetherin
theclientortheserver.ThesameclasscanbeusedbecausetheTCPprotocolreallymakes
nodistinctionbetweenclientandserver,especiallyoncetheconnectionisestablished.    26Chapter2:BasicSocketshandleaclient,itcalls
AcceptTcpClient()
,whichblocksuntilanincomingcon-
nectionismadetothe
TcpListener
sport.
AcceptTcpClient()
thenreturnsan
instanceof
TcpClient
thatisalready
connected
totheremotesocketandreadyfor
readingandwriting(wealsocouldhaveusedthe
AcceptSocket()
methodinstead).Get
NetworkStream
:
line36
The
TcpClient
method
GetStream()
returnsaninstanceofa
NetworkStream
,which
isusedforreadingandwritingtoitssocket.Receiveandrepeatdatauntiltheclientcloses:
lines3945
Thewhilelooprepeatedlyreadsbytesfromthe
NetworkStream
andimmediately
writesthembacktothestreamuntiltheclientclosestheconnection,whichis
indicatedbyareturnvalueof
0
from
Read()
.The
Read()
methodtakesabytearray,
anoffsetatwhichtobeginplacingbytes,andanintegerindicatingthemaximum
numberofbytestobeplacedinthearray.Itblocksuntildataisavailableand
returnsthenumberofbytesactuallyplacedinthearray(whichmaybelessthan
thespeciedmaximum).Iftheotherendclosestheconnectionbeforeanybytes
havebeenreceived,
Read()
returns
0
.
The
Write()
methodof
NetworkStream
similarlytakesthreeparametersand
transmitsthespeciednumberofbytesfromthegivenarray,beginningatthe
speciedoffset(inthiscase,
0
).Thereisanotherformof
Write()
thatonlytakes
abytearrayargumentandtransmits
all
thebytescontainedthereintotheother
endoftheTCPconnection;ifwehadusedthatform,wemighthavetransmited
bytesthatwerenotreceivedfromtheclient!
Anyparameterinconsistencies(e.g.,offsetorlengthgreaterthantheactual
lengthofthebytesarray)resultinanexceptionbeingthrown.Closetheclientstreamandsocket:
lines4849
Closethe
NetworkStream
andthe
TcpClient
socket.Exceptionhandling:
lines5154
Aservershouldberobustenoughtohandleamalfunctioningormaliciousclient
withoutcrashing.Anyexceptionthatoccursduringprocessingiscaughthereand
writtentotheconsole.The
NetworkStream
anditsunderlyingsocketareclosedto
cleanup.Notethatthiscatchblockiswithinthe
for
loop,soafterhandlingthe
exceptiontheloopcontinuesandanotherclientcanbeserviced. TcpListenerSummary Description
TcpListener
listensforconnectionsfromTCPnetworkclients.Theconstructor
takesthelocalinterfaceandoptionallythelocalporttolistenon.The
Start()
methodbeginslisteningforincomingconnectionrequests.The
AcceptTcpClient()
and
AcceptSocket()
methodsacceptincomingconnectionsandreturna
TcpClient  2.3TCPSockets27or
Socket
instance,respectively,thatisalreadyconnectedtotheremoteclientand
readyforsendingandreceiving.The
Stop()
methodstopslisteningforconnections
andclosesthe
TcpListener
.
Constructors
public
TcpListener
(
int
port
);
(obsoletedin1.1.NETSDK)
public
TcpListener
(
IPEndPoint
localEP
);
public
TcpListener
(
IPAddress
address
,
int
port
);
Theconstructorhasthreeforms:portonly,
IPEndPoint
instance,or
IPAddress
and
port.Whenanaddressisspecieditrepresentsthelocalinterfacetolistenon.Note
thatstartingin.NET1.1,thelocalinterfaceisrequiredandtheport-onlyconstructor
isdeprecated.Throws
ArgumentNullException
,
ArgumentOutOfRangeException
.
SelectedMethods
publicSocket
AcceptSocket()
;
Acceptsapendingconnectionrequestandreturnsa
Socket
usedtosendandreceive
data.Throws
InvalidOperationException
.
publicTcpClient
AcceptTcpClient()
;
Acceptsapendingconnectionrequestandreturnsa
TcpClient
usedtosendand
receivedata.Throws
InvalidOperationException
.
publicbool
Pending()
;
Returns
true
iftherearependingincomingconnectionsthatcanbeaccepted.Throws
InvalidOperationException
.
publicvoid
Start()
;
Startinitializestheunderlyingsocket,bindsit,andbeginslisteningfornetwork
requests.Throws
SocketException
.
publicvoid
Stop()
;
Stopslisteningforincomingconnectionsandclosesthe
TcpListener
.Anyaccepted
TcpClient
or
Socket
instancesshouldbeclosedseparately.Throws
SocketException
.
SelectedProperties
publicEndPoint
LocalEndpoint
{
get;
}
Getstheunderlyinglocalbound
EndPoint
.
protectedSocket
Server
{
get;}
Getstheunderlyingnetwork
Socket
.Sincethisisaprotectedproperty,itcanonly
beaccessedbyclassesthatextend
TcpListener
.Thisisusefulforaccessingsocket
optionsthatarenotdirectlyaccessiblefromthe
TcpListener
API.  28Chapter2:BasicSockets2.3.3StreamsAsillustratedbytheprecedingexamples,theprimaryparadigmforI/Ointhe.NETframe-
workisthe
stream
abstraction.Astreamissimplyanorderedsequenceofbytes..NET
streams
supportbothreadingandwritingbytestoastream.InourTCPclientandserver,
each
TcpClient
or
TcpListener
instanceholdsa
NetworkStream
instance.Whenwewrite
tothestreamofa
TcpClient
,thebytescan(eventually)bereadfromthestreamofthe
TcpListener
attheotherendoftheconnection.The
Socket
and
UdpClient
classesuse
bytearraysinsteadofstreamstosendandreceivedata.Ifthereisanerrorreadingor
writing,a
NetworkStream
willthrowan
IOException
.SeeSection3.2formoredetailson
streams. NetworkStream Description
NetworkStream
isasubclassof
Stream
,andprovidestheunderlyingstreamofdata
fornetworkI/O.
SelectedMethods
publicvirtualvoid
Close()
;
The
Close()
methodclosesthe
NetworkStream
andclosestheunderlyingsocketifit
ownsit.
publicabstractint
Read
(
byte[]
buffer
,
int
offset
,
int
length
);
The
Read()
methodreadsdatafromthenetworkstreamintothebytebufferargu-
ment.Theoffsetwithinthebufferandnumberofbytestoreadarealsospecied.
Read()
returnsthenumberofbytesread.Throws
ArgumentNullException
,
Argument-
Exception
,
IOException
.
publicabstractvoid
Write
(
byte[]
buffer
,
int
offset
,
int
length
);
The
Write()
methodsendsthecontentsofasuppliedbytebufferargumenttothenet-
work.Anoffsetwithinthebytebufferandnumberofbytestowritearealsosupplied
asarguments.Throws
ArgumentNullException
,
ArgumentException
,
IOException
.
SelectedProperties
publicvirtualbool
DataAvailable
{get;}
Returns
true
ifdataisavailabletoreadonthestream,
false
ifthereisnodata
availabletoread.  2.4UDPSockets29
2.4UDPSocketsUDPprovidesanend-to-endservicedifferentfromthatofTCP.Infact,UDPperformsonly
twofunctions:(1)itaddsanotherlayerofaddressing(ports)tothatofIP,and(2)itdetects
datacorruptionthatmayoccurintransitanddiscardsanycorruptedmessages.Because
ofthissimplicity,UDPsocketshavesomecharacteristicsthataredifferentfromtheTCP
socketswesawearlier.Forexample,UDPsocketsdonothavetobeconnectedbefore
beingused.WhereTCPisanalogoustotelephonecommunication,UDPisanalogousto
communicatingbymail:Youdonothavetoconnectbeforeyousendthepackageor
letter,butyoudohavetospecifythedestinationaddressforeachone.Similarly,each
messagecalleda
datagram
carriesitsownaddressinformationandisindependentof
allothers.Inreceiving,aUDPsocketislikeamailboxintowhichlettersorpackagesfrom
manydifferentsourcescanbeplaced.Assoonasitiscreated,aUDPsocketcanbeused
tosend/receivemessagesto/fromanyaddressandto/frommanydifferentaddressesin
succession.
AnotherdifferencebetweenUDPsocketsandTCPsocketsisthewayinwhichthey
dealwithmessageboundaries:
UDPsocketspreservethem.
Thismakesreceivinganappli-
cationmessagesimpler,insomeways,thanitiswithTCPsockets(thisisdiscussedfurther
inSection2.4.3).Analdifferenceisthattheend-to-endtransportserviceUDPprovidesits
besteffort:ThereisnoguaranteethatamessagesentviaaUDPsocketwillarriveatitsdes-
tination,andmessagescanbedeliveredinadifferentorderthantheyweresent(justlike
letterssentthroughthemail).AprogramusingUDPsocketsmustthereforebeprepared
todealwithlossandreordering.(WellprovideanexampleofthisinSection2.5.4.)
Giventhisadditionalburden,whywouldanapplicationuseUDPinsteadofTCP?
Onereasonisefciency.Iftheapplicationexchangesonlyasmallamountofdatasay,a
singlerequestmessagefromclienttoserverandasingleresponsemessageintheother
directionTCPsconnectionestablishmentphaseatleastdoublesthenumberofmessages
(andthenumberofround-tripdelays)requiredforthecommunication.Anotherreason
isexibility.Whensomethingotherthanareliablebyte-streamserviceisrequired,UDP
providesaminimaloverheadplatformonwhichtoimplementwhateverisneeded.
The.NETframeworkprovidesUDPsocketsfunctionalityusingtheclass
UdpClient
,
or
Socket
formoreadvancedoptions.The
UdpClient
classallowsforbothsendingand
receivingofUDPpackets,andcanbeusedtoconstructbothaUDPclientandserver.2.4.1UDPClientAUDPclientbeginsbysendingadatagramtoaserverthatispassivelywaitingtobe
contacted.ThetypicalUDPclientgoesthroughthreesteps:
1.Constructaninstanceof
UdpClient
,optionallyspecifyingthelocaladdressandport.
2.Communicatebysendingandreceivingdatagrams(bytearrays)usingthe
Send()
and
Receive()
methodsof
UdpClient
.
3.Whennished,deallocatethesocketusingthe
Close()
methodof
UdpClient
.  30Chapter2:BasicSocketsUnlikea
TcpClient
,a
UdpClient
doesnothavetobeconstructed(orconnected)with
aspecicdestinationaddress.ThisillustratesoneofthemajordifferencesbetweenTCP
andUDP.ATCPsocketisrequiredtoestablishaconnectionwithanotherTCPsocketon
aspeciedhostandportbeforeanydatacanbeexchanged,and,thereafter,it
only
com-
municateswiththatsocketuntilitisclosed.AUDPsocket,ontheotherhand,isnot
requiredtoestablishaconnectionbeforecommunication,andeachdatagramcanbesent
andreceivedfromadifferentdestination.The
Connect()
methodof
UdpClient
doesallow
thespecicationoftheremoteaddressandport,butitsuseisoptional.UnliketheTCP
versionof
Connect()
,theUDPversionmerelysetsthedefaultdestinationanddoesnot
actuallycauseanyconnection-setupmessagestobetransmittedthroughthenetwork.
OurUDPechoclient,
UdpEchoClient.cs
,sendsadatagramcontainingthestringto
beechoedandprintswhateveritreceivesbackfromtheserver.AUDPechoserversimply
repeatseachdatagramthatitreceivesbacktotheclient.Ofcourse,aUDPclientonly
communicateswithaUDPserver.ManysystemsincludeaUDPechoserverfordebugging
andtestingpurposes,oryoucanruntheUDPechoserverexamplefromthenextsection.
UdpEchoClient.cs 0
usingSystem;//ForString,Int32,Console
1
usingSystem.Text;//ForEncoding
2
usingSystem.Net;//ForIPEndPoint
3
usingSystem.Net.Sockets;//ForUdpClient,SocketException
4
5
classUdpEchoClient{
6
7
staticvoidMain(string[]args){
8
9
if((args.Length<2)||(args.Length>3)){//Testforcorrect#ofargs
10
thrownewSystem.ArgumentException("Parameters:<Server><Word>[<Port>]");
11
}
12
13
Stringserver=args[0];//ServernameorIPaddress
14
15
//Useportargumentifsupplied,otherwisedefaultto7
16
intservPort=(args.Length==3)?Int32.Parse(args[2]):7;
17
18
//ConvertinputStringtoanarrayofbytes
19
byte[]sendPacket=Encoding.ASCII.GetBytes(args[1]);
20
21
//CreateaUdpClientinstance
22
UdpClientclient=newUdpClient();
23      2.4UDPSockets35Sendechoreply:
line35
byteBuffer
alreadycontainstheechostringand
remoteIPEndPoint
alreadycontains
theechoreplydestinationaddressandport,sothe
Send()
methodof
UdpClient
cansimplytransmitthedatagrampreviouslyreceived. UdpClient Description
ProvidesUserDatagramProtocol(UDP)networkservices.
SelectedConstructors
public
UdpClient()
;
public
UdpClient
(
int
port
);
public
UdpClient
(
IPEndPoint
localEP
);
public
UdpClient
(
string
hostname
,
int
port
);
Createsanewinstanceofthe
UdpClient
class.The
UdpClient
constructorhas
optionalargumentsfortheport,alocalinterfacetobindto(
IPEndPoint
),ortheserver
toconnectto(stringhostname/IPandintegerport).Ifthedestinationisnotsetin
theconstructor,itmustbeseteitherina
Connect()
callorinthe
Send()
method.
Throws
ArgumentNullException
,
ArgumentException
,
SocketException
.
SelectedMethods
publicvoid
Close()
;
ClosestheUDPconnection.Throws
SocketException
.
publicvoid
Connect
(
IPEndPoint
endPoint
);
publicvoid
Connect
(
IPAddress
addr
,
int
port
);
publicvoid
Connect
(
string
hostname
,
int
port
);
Connect()
setsthedefaultdestinationforthis
UdpClient
.Thiscallisoptional.
Throws
ArgumentNullException
,
ArgumentOutOfRangeException
,
SocketException
,
ObjectDisposedException
.
publicbyte
[]
Receive
(
refIPEndPoint
remoteEP
);
ReturnsaUDPdatagramsentbyaremotehostasanbytearrayandpopulatesthe
IPEndPoint
referencewiththeendpointinformationforthesendingremotehost.Throws
SocketException
,
ObjectDisposedException
.
publicint
Send
(
byte
[]
dgram
,
int
length
);
publicint
Send
(
byte
[]
dgram
,
int
length
,
IPEndPoint
endPoint
);  36Chapter2:BasicSocketspublicint
Send
(
byte
[]
dgram
,
int
length
,
string
hostname
,
int
port
);
SendsaUDPdatagramtoaremotehost.Thedatagramtosendisspeciedbythe
bytearrayargumentandthenumberofbytestosendintegerargument.Optional
argumentscanbeincludedtospecifythedatagramdestination,eitherusingan
IPEndPoint
instance,orastringhostname/IPaddressandintegerportargument.If
nodefaultdestinationhasbeenspeciedbythe
UdpClient
constructoror
Connect()
method,thedestinationisnotoptional.Ifadefaultdestinationhasbeensetin
theconstructoror
Connect()
,youmaynotusedifferentdestinationarguments
inthe
Send()
call.Returnsthenumberofbytessent.Throws
ArgumentException
,
InvalidOperationException
,
SocketException
,
ObjectDisposedException
.
SelectedProperties
protectedSocket
Client
{
get;set;
}
Getsorsetstheunderlyingnetworksocket.Sincethisisaprotectedproperty,itcan
onlybeaccessedbyclassesthatextend
UdpClient
.Thisisusefulforaccessingsocket
optionsthatarenotdirectlyaccessiblefromthe
UdpClient
API. 2.4.3SendingandReceivingwithUDPSocketsAsubtlebutimportantdifferencebetweenTCPandUDPisthatUDPpreservesmessage
boundaries.Eachcallto
UdpClient.Receive()
returnsdatafromatmostonecallto
UdpClient.Send()
.Moreover,differentcallsto
UdpClient.Receive()
willneverreturn
datafromthesamecallto
UdpClient.Send()
.
Whenacallto
Write()
onaTCPsocketsstreamreturns,allthecallerknowsisthat
thedatahasbeencopiedintoabufferfortransmission;thedatamayormaynothave
actuallybeentransmittedyet(thisiscoveredinmoredetailinChapter5).UDP,however,
doesnotproviderecoveryfromnetworkerrorsand,therefore,doesnotbufferdatafor
possibleretransmission.Thismeansthatbythetimeacallto
Send()
returns,themessage
hasbeenpassedtotheunderlyingchannelfortransmissionandis(orsoonwillbe)onits
wayoutthedoor.
Betweenthetimeamessagearrivesfromthenetworkandthetimeitsdataisreturned
via
Read()
or
Receive()
,thedataisstoredina
rst-in,rst-out(FIFO)
queueofreceived
data.WithaconnectedTCPsocket,allreceived-but-not-yet-deliveredbytesaretreated
asonecontinuoussequenceofbytes(seeChapter5).ForaUDPsocket,however,the
receiveddatamayhavecomefromdifferentsenders.AUDPsocketsreceiveddataiskept
inaqueueofmessages,eachwithassociatedinformationidentifyingitssource.Acallto
Receive()
willneverreturnmorethanonemessage.Themaximumamountofdatathat
canbetransmittedbya
UdpClient
is65,507bytesthelargestpayloadthatcanbecarried
inaUDPdatagram.  2.5The.NETSocketClass37
2.5The.NETSocketClassThe.NETFrameworkprovidesa
Socket
classthatisawrapperaroundtheWinSockimple-
mentation.Since
TcpClient
,
TcpListener
,and
UdpClient
allutilizethe
Socket
classfor
theirownimplementations,
Socket
containsallthefunctionalityofthoseclasses,plus
muchmore.The
Socket
interfaceisagenericAPIthatactuallycoversmorethanjustIP,
andassuchexploringallofthefunctionalityitprovidesisbeyondthescopeofthisbook.
InthissectionweintroduceitsusageforTCPandUDPandwalkthroughsomecommon
caseswhereyoumightuseit.2.5.1TCPClientwith
SocketForaTCPclienttousethe
Socket
class,itwillperformthefollowingsteps:
1.
Callthe
Socket
constructor:
Theconstructorspeciestheaddresstype,socket
type,andprotocoltype.
2.
Callthe
SocketConnect()
method:
Connect()
takesan
IPEndPoint
argumentthat
representstheservertoconnectto.
3.
Sendandreceivedata:
Usingthe
SocketSend()
and
Receive()
calls.
4.
Closethesocket:
Usingthe
SocketClose()
method.
Herewepresentaversionofthe
TcpEchoClient.cs
programthatusesthe
Socket
classinsteadofthe
TcpClient
class.
TcpEchoClientSocket.cs 0
usingSystem;//ForString,Int32,Console,ArgumentException
1
usingSystem.Text;//ForEncoding
2
usingSystem.IO;//ForIOException
3
usingSystem.Net.Sockets;//ForSocket,SocketException
4
usingSystem.Net;//ForIPAddress,IPEndPoint
5
6
classTcpEchoClientSocket{
7
8
staticvoidMain(string[]args){
9
10
if((args.Length<2)||(args.Length>3)){//Testforcorrect#ofargs
11
thrownewArgumentException("Parameters:<Server><Word>[<Port>]");
12
}
13
14
Stringserver=args[0];//ServernameorIPaddress
15   2.5The.NETSocketClass3959
Console.WriteLine(e.Message);
60
}finally{
61
sock.Close();
62
}
63
}
64
} TcpEchoClientSocket.cs
1.
Setupandparameterparsing:
lines1022
2.
TCP
Socket
constructor:
lines2527
The
Socket
constructortakesthreearguments:Theaddressfamily:
Setto
AddressFamily.InterNetwork
forIP.Thesockettype:
Indicatesstreamordatagramsemanticsandissetto
Socket-
Type.Stream
forTCPor
SocketType.Dgram
forUDP.Theprotocoltype:
Setto
ProtocolType.Tcp
or
ProtocolType.Udp
.
3.
Connecttotheserver:
lines2935
The
Connect()
methodtakesan
IPEndPoint
instance,whichwehaveconstructed
fromtheargumentstotheprogramusing
IPAddress.Parse()
.Iftheconnectionfails
a
SocketException
willbethrown.
4.
Sendthestringtotheechoserver:
lines3738
The
Socket
classhasseveral
Send()
methodsthattakedifferentcombinationof
parameters,alwaysincludingabytearraycontainingthedatatobetransmitted.
Hereweuseaversionthattakes(1)thebytebuffercontainingthedatatobesent,
(2)thebyteoffsetintothebufferwherethedatatobesentstarts,(3)atotalnumber
ofbytestosend,and(4)anysocketagsettings.Socketagsarebeyondthescope
ofthisbook,andinthiscasearesetto
SocketFlags.None
.
5.
Receivethereplyfromtheechoserver:
lines4553
Sinceweknowthenumberofbytestoexpectfromtheechoserver,wecanrepeatedly
receivebytesuntilwehavereceivedthesamenumberofbytesthatwesent.The
Receive()
methodcanbecalledinseveralforms;hereweusetheonethattakes
fourparameters:(1)buffertoreceiveto,(2)byteoffsetintothebufferwherethe
rstbytereceivedshouldbeplaced,(3)themaximumnumberofbytestobeplaced
inthebuffer,and(4)thesocketagsparameter.Theloopanddatareceivelogicare
identicaltothoseintheearlier
TcpClient
example.
6.
Printechoedstring:
lines5556
7.
Errorhandlingandsocketclose:
lines5862  40Chapter2:BasicSockets2.5.2TCPServerwith
SocketForaTCPservertousethe
Socket
class,itwillperformthefollowingsteps:
1.
Callthe
Socket
constructor:
Theconstructorspeciestheaddresstype,socket
type,andprotocoltype.
2.
Callthe
SocketBind()
method:
Bind()
associatesthesocketwithalocaladdress
andportnumber.
3.
Callthe
SocketListen()
method:
Listen()
takesanintegerargumentrepresent-
ingthenumberofconnectionsallowedtoqueue,andstartslisteningforincoming
connections.
4.Repeatedly:Callthe
SocketAccept()
methodtoacceptanincomingconnection:
Accept()
takesnoargumentsandreturnsa
Socket
instancerepresentingtheremoteclient
socket.Receiveandsenddata:
Usingtheacceptedclient
Socket
instance,useits
Receive()
and
Send()
methodstotransferdata.Closetheclientsocket:
Usingthe
SocketClose()
method.
5.
Closetheserversocket:
Usingthe
SocketClose()
method.
Herewepresentaversionofthe
TcpEchoServer.cs
programthatusesthe
Socket
classinsteadofthe
TcpListener
and
TcpClient
classes.
TcpEchoServerSocket.cs 0
usingSystem;//ForConsole,Int32,ArgumentException,Environment
1
usingSystem.Net;//ForIPAddress
2
usingSystem.Net.Sockets;//ForTcpListener,TcpClient
3
4
classTcpEchoServerSocket{
5
6
privateconstintBUFSIZE=32;//Sizeofreceivebuffer
7
privateconstintBACKLOG=5;//Outstandingconnectionqueuemaxsize
8
9
staticvoidMain(string[]args){
10
11
if(args.Length>1)//Testforcorrect#ofargs
12
thrownewArgumentException("Parameters:[<Port>]");
13
14
intservPort=(args.Length==1)?Int32.Parse(args[0]):7;
15   42Chapter2:BasicSockets59
}
60
} TcpEchoServerSocket.cs
1.
Applicationsetupandparameterparsing:
lines1116
2.
Callthe
Socket
constructor:
lines1921
The
Socket
constructortakesthreearguments:Theaddressfamily:
Setto
AddressFamily.InterNetwork
forIP.Thesockettype:
Indicatesstreamordatagramsemanticsandissetto
Socket-
Type.Stream
forTCPor
SocketType.Dgram
forUDP.Theprotocoltype:
Setto
ProtocolType.Tcp
or
ProtocolType.Udp
.
3.
Bindthesocket:
line23
The
Bind()
methodiscalledwitha
IPEndPoint
instancecontaining
IPAddress.Any
(0.0.0.0)andthespeciedserverportnumber.Thebindassignsthesocketalocal
addressandportandthrowsa
SocketException
ifitfailstodoso(e.g.,ifthelocal
endpointisalreadyinuse).
4.
Listenforincomingconnections:
line25
The
Listen()
methodcausesthesockettobeginhandlingincomingTCPconnec-
tionrequestsandqueuingthemforacceptancebyourprogram.Ittakesaninteger
argumentthatspeciesthe
backlog
,whichisthemaximumnumberofoutstanding
connectionsallowedinthequeue.Thevalidvaluesforthebacklogaretypically15,
butmayvarybysystem;checkyourdocumentation.
5.
Loopforever,iterativelyhandlingincomingconnections:
lines3458Acceptanincomingconnection:
line39
Theserver
Socket
instancesuppliesnew,connectedclient
Socket
instancesfor
eachnewTCPconnection.Whentheserverisreadytohandleaclient,itcalls
Accept()
,whichblocksuntilanincomingconnectionismadetotheserver
Socket
s
port.
Accept()
thenreturnsaninstanceof
Socket
thatisalready
connected
tothe
remotesocketandreadyforreadingandwriting.Outputtheremoteendpointbeingserviced:
line41
Onefeatureof
Socket
thatisnotavailablewith
TcpClient
istheabilitytoaccess
the
RemoteEndPoint
propertyanddeterminetheIPaddressandportoftheclient
connection.Receiveandrepeatdatauntiltheclientcloses:
lines4350
Thewhilelooprepeatedlyreadsbytes(whenavailable)fromthe
Socket
and
immediatelywritesthesamebytesbacktothestreamuntiltheclientclosesthe
connection.Theloopanddatatransferlogicareidenticaltothe
TcpClient
version.  2.5The.NETSocketClass43Closetheclientsocket:
line52Exceptionhandling:
lines5457 Socket Description
The
Socket
classisawrapperaroundtheWinSocksocketsAPI.Usinga
Socket
involvesthefollowingsteps:
1.Createa
Socket
instancewiththesocketconstructor.
2.Ifthe
Socket
isaserver,call
Bind()
toassignalocalendpoint.
3.Ifthe
Socket
isaclient,call
Connect()
toconnecttoaremoteendpoint.
4.Ifthe
Socket
isaserver,call
Listen()
tobeginlisteningforconnections,andcall
Accept()
toretrieveanincomingconnection.
5.Usethe
Send()
and
Receive()
methodstotransferdataoverTCP,or
SendTo()
and
ReceiveFrom()
forUDP.
6.Call
Shutdown()
todisablethesocket.
7.Call
Close()
toclosethesocket.
Constructor
public
Socket
(
AddressFamily
,
SocketType
,
ProtocolType
);
Createsanewinstanceofthe
Socket
class.Eachargumentisspeciedbyitsown
enumerationclass,
AddressFamily
,
SocketType
,and
ProtocolType
.Forthepurposes
ofthisbook,the
AddressFamily
issetto
InterNetwork
,the
SocketType
issetto
Stream
forTCPsemanticsor
Dgram
forUDPsemantics,andthe
ProtocolType
issetto
Tcp
forTCPand
Udp
forUDP.
SelectedMethods
publicvoid
Bind
(
EndPoint
localEP
);
Associatesa
Socket
withalocalendpoint.Throws
ArgumentNullException
,
Socket-
Exception
,
ObjectDisposedException
.
publicvoid
Close()
;
Closesa
Socket
connection.publicvoid
Connect
(
EndPoint
remoteEP
);
Establishesaconnectiontoaremoteserver.Throws
ArgumentNullException
,
Socket-
Exception
,
ObjectDisposedException
.  44Chapter2:BasicSocketspublicobject
GetSocketOption
(
SocketOptionLevel
,
SocketOptionName
);
publicvoid
GetSocketOption
(
SocketOptionLevel
,
SocketOptionName
,
byte
[]);
publicbyte
[]
GetSocketOption
(
SocketOptionLevel
,
SocketOptionName
,
int
);
Returnsthevalueofthespecied
Socket
optioninanobjectorinanarrayofbytes.
Thecompletelistofpropertiesavailablefor
SocketOptionLevel
and
SocketOption-
Name
aredetailedintheirrespectiveclassdescriptionsfollowingthisclass.Throws
SocketException
,
ObjectDisposedException
.
publicvoid
Listen
(
int
backlog
);
Changesthe
Socket
statetohandleincomingTCPconnectionsandqueuethem
tobeacceptedbytheprogram.The
backlog
speciesthemaximumnumberof
incomingconnectionsthatcanbequeuedatanytime.Thenormal
backlog
values
are15butvarybysystem;checkyourdocumentation.Throws
SocketException
,
ObjectDisposedException
.
publicbool
Poll
(
int
microseconds
,
SelectMode
mode
);
Checksthestatusofa
Socket
.Therstargumentspeciesthenumberofmicro-
secondstowaitforaresponse.Anegativevalueindicatesblockingindenitely.
Thestatuscheckeddependsonthe
SelectMode
enumerationargument.
Select-
Mode.SelectRead
checksforreadability.
SelectMode.SelectWrite
checksforwrite-
ability.
SelectMode.SelectError
checksfortheexistenceofanerror.
publicint
Receive
(
byte
[]
buffer
);
publicint
Receive
(
byte
[]
buffer
,
SocketFlags
ags
);
publicint
Receive(
byte
[]
buffer
,
int
length
,
SocketFlags
ags
);
publicint
Receive
(
byte
[]
buffer
,
int
offset
,
int
length
,
SocketFlags
ags
);
Receivesdatafromthe
Socket
intothebytebufferargument.Optionalarguments
include
SocketFlags
,anintegernumberofbytestoreceive,andanintegeroffsetin
thebuffer.Returnsthenumberofbytesreceived.Throws
ArgumentNullException
,
ArgumentOutOfRangeException
,
SocketException
,
ObjectDisposedException
.
publicint
ReceiveFrom
(
byte
[]
buffer
,
refEndPoint
remoteEP
);
publicint
ReceiveFrom
(
byte
[]
buffer
,
SocketFlags
ags
,
refEndPoint
remoteEP
);
publicint
ReceiveFrom
(
byte
[]
buffer
,
int
length
,
SocketFlags
ags
,
refEndPoint
remoteEP
);
publicint
ReceiveFrom
(
byte
[]
buffer
,
int
offset
,
int
length
,
SocketFlags
ags
,
refEndPoint
localEP
);
ReceivesaUDPdatagramintothebytebufferargumentandpopulatestheEnd-
Point
referencewiththesendersendpointinformation.Optionalargumentsinclude
SocketFlags
,anintegernumberofbytestoreceive,andanintegeroffsetinthe
buffer.Returnsthenumberofbytesreceived.Notethatthereisanimportant
differencebetweenthebytebufferusedtoreceivedatagramswitha
Socket
and
a
UdpClient
.Whilethe
UdpClient
returnsareferencetopreallocatedbuffer,the  2.5The.NETSocketClass45Socket
classrequiresthebufferargumenttobepreallocatedtotheappropriate
size.Ifanattemptismadetoreceivemorebytesintothebufferargumentthan
hasbeenallocated,a
SocketException
willbethrownwiththe
ErrorCode
setto
10040(WinSockconstantWSAEMSGSIZE),andthe
Message
settoMessagetoolong.
Throws
ArgumentNullException
,
ArgumentOutOfRangeException
,
SocketException
,
ObjectDisposedException
.
publicstaticvoid
Select
(
IList
readableList
,
IList
writeableList
,
IList
errorList
,
int
microseconds
);
Usedtodeterminethestatusofoneormore
Socket
instances.Thismethodtakes
betweenoneandthree
IList
containertypesholding
Socket
instances(listsnot
passedshouldbesetto
null
).Whatischeckedfordependsonthe
IList
sposition
intheargumentlist.The
Socket
sintherst
IList
arecheckedforreadabil-
ity.The
Socket
sinthesecond
IList
arecheckedforwriteability.The
Socket
s
inthethird
IList
arecheckedforerrors.Aftercompleting,onlythe
Socket
instancesthatmeetthecriteriawillstillbeinthe
IList
.Thenalargumentis
thetimeinmicrosecondstowaitforaresponse.Throws
ArgumentNullException
,
SocketException
.
publicint
Send
(
byte
[]
buffer
);
publicint
Send
(
byte
[]
buffer
,
SocketFlags
ags
);
publicint
Send
(
byte
[]
buffer
,
int
length
,
SocketFlags
ags
);publicint
Send
(
byte
[]
buffer
,
int
offset
,
int
length
,
SocketFlags
ags
);
Sendsdatatothe
Socket
fromthebytebufferargument.Optionalarguments
include
SocketFlags
,anintegernumberofbytestosend,andanintegeroffset
inthebuffer.Returnsthenumberofbytessent.Throws
ArgumentNullException
,
ArgumentOutOfRangeException
,
SocketException
,
ObjectDisposedException
.
publicint
SendTo
(
byte
[]
buffer
,
EndPoint
remoteEP
);
publicint
SendTo
(
byte
[]
buffer
,
SocketFlags
ags
,
EndPoint
remoteEP
);
publicint
SendTo
(
byte
[]
buffer
,
int
length
,
SocketFlags
ags
,
EndPoint
remoteEP
);
publicint
SendTo
(
byte
[]
buffer
,
int
offset
,
int
length
,
SocketFlags
ags
,
EndPoint
remoteEP
);
SendsaUDPdatagrampacketspeciedinthebytebufferargumenttoaspecic
endpoint.Optionalargumentsinclude
SocketFlags
,anintegernumberofbytes
tosend,andanintegeroffsetinthebuffer.Returnsthenumberofbytessent.
Throws
ArgumentNullException
,
ArgumentOutOfRangeException
,
SocketException
,
ObjectDisposedException
.publicvoid
SetSocketOption
(
SocketOptionLevel
optionLevel
,
SocketOptionName
optionName
,
byte
[]
optionValue
);
publicvoid
SetSocketOption
(
SocketOptionLevel
optionLevel
,
SocketOptionName
optionName
,
int
optionValue
);  46Chapter2:BasicSocketspublicvoid
SetSocketOption
(
SocketOptionLevel
optionLevel
,
SocketOptionName
optionName
,
object
optionValue
);
Setsthespeciedsocketoptiontothespeciedvalue.Thecompletelistofprop-
ertiesavailablefor
SocketOptionLevel
and
SocketOptionName
aredetailedintheir
respectiveclassdescriptionsfollowingthisclass.Throws
ArgumentNullException
,
SocketException
,
ObjectDisposedException
.
publicvoid
Shutdown
(
SocketShutdown
how
);
Disablessendsand/orreceivesona
Socket
.Theargumentisa
SocketShutdown
enumerationindicatingwhatshouldbeshutdown(
Send
,
Receive
,or
Both
).Throws
SocketException
,
ObjectDisposedException
.
SelectedProperties
publicbool
Connected
{
get;
}
Getsavalueindicatingwhethera
Socket
isconnectedtoaremoteresource
asofthe
mostrecentI/Ooperation
.
publicEndPoint
LocalEndPoint
{
get;
}
Getsthelocalendpointthatthe
Socket
isboundtoforcommunications.
publicEndPoint
RemoteEndPoint
{
get;
}
Getstheremoteendpointthatthe
Socket
isusingforcommunication. SocketOptionLevel Description
The
SocketOptionLevel
enumerationdenesthelevelthatasocketoptionshould
beappliedto.A
SocketOptionLevel
isinputtothe
Socket.SetSocketOption()
and
Socket.GetSocketOption()
methods.
Members
IP
SocketoptionsapplytoIPsockets.
Socket
Socketoptionsapplytothesocketitself.
Tcp
SocketoptionsapplytoTCPsockets.
Udp
SocketoptionsapplytoUDPsockets.  2.5The.NETSocketClass47 SocketOptionName Description
The
SocketOptionName
enumerationdenessocketoptionnamesforthe
Socket
class
andispassedasinputtothe
Socket.SetSocketOption()
and
Socket.GetSocket-
Option()
methods.SocketoptionsaredescribedinmoredetailinSection2.5.4,
butcoverageofallofthesocketoptionsisbeyondthescopeofthisbook.Check
www.msdn.microsoft.com
formoredetailsontheseoptions.
Members
SeeTable2.1foralistofavailable.NETsocketoptions.Notethatatthetimethis
bookwenttopresstherewasnotsufcientdocumentationtodetermineifallofthese
socketoptionswerefullysupportedand/orimplemented.ChecktheMSDNlibraryat
www.msdn.microsoft.com/library
forthelatestinformation. SocketFlags Description
The
SocketFlags
enumerationprovidesthevalidvaluesforadvancedsocketags
andisanoptionalinputtothe
Socket
datatransfermethods.Ifyouneedtousea
Socket
methodthatrequiresasocketagargumentbutdontneedanyagsset,use
SocketFlags.None
.SeeSection2.5.5formoreonsocketags.
Members
DontRoute
Sendwithoutusingroutingtables.
MaxIOVectorLength
Providesastandardvalueforthenumberof
WSABUF
structuresusedtosendandreceivedata.
None
Usenoagsforthiscall.
OutOfBand
Processout-of-banddata.
Partial
Partialsendorreceiveformessage.
Peek
Peekatincomingmessage.  48Chapter2:BasicSockets SocketOptionName
TypeValuesDescription SocketOptionLevel.Socket
AcceptConnection
Boolean
0,1Sockethascalled
Listen()
.Getonly.
Broadcast
Boolean
0,1Broadcastmessagesallowed.
Debug
Boolean
0,1Recorddebugginginformation(ifavailable).
DontLinger
Boolean
0,1Closesocketwithoutwaitingforconr-
mation.
DontRoute
Boolean
0,1Formultihomedhosts,sendusingthespeci-
edoutgoinginterfaceinsteadofrouting.
Error
Int32
WinSockerrorcodeGetandclearthesocketerrorcode(see
Appendix).Getonly.
ExclusiveAddressUse
Boolean
0,1Enablesasockettobeboundforexclusive
access.
KeepAlive
Boolean
0,1Keep-alivemessagesenabled(ifimple-
mentedbytheprotocol).
Linger
LingerOption
0,1;secondsTimetodelay
Close()
returnwaitingfor
conrmation.
MaxConnections
Int32
maxsizeMaximumqueuelengththatcanbespecied
by
Socket.Listen()
.Getonly.
OutOfBandInline
Boolean
0,1Receivesout-of-banddatainthenormaldata
stream.
ReceiveBuffer
Int32
bytesBytesinthesocketreceivebuffer.
ReceiveLowWater
Int32
bytesMinimumnumberofbytesthatwillcause
Receive()
toreturn.
ReceiveTimeout
Int32
millisecondsReceivetimeout.
ReuseAddress
Boolean
0,1Bindingallowed(undercertainconditions)to
anaddressorportalreadyinuse.
SendBuffer
Int32
bytesBytesinthesocketsendbuffer.
SendLowWater
Int32
bytesMinimumbytestosend.
SendTimeout
Int32
millisecondsSendtimeout.
Type
Int32SocketType
Getsockettype.Getonly. SocketOptionLevel.Tcp
BsdUrgent
Boolean
0,1UrgentdataasdenedinRFC-1122.
Expedited
Boolean
0,1ExpediteddataasdenedinRFC-1122.
NoDelay
Boolean
0,1Disallowdelayfordatamerging(Nagles
algorithm).  2.5The.NETSocketClass49SocketOptionLevel.Udp
ChecksumCoverage
Boolean
0,1Get/setUDPchecksumcoverage.
NoChecksum
Boolean
0,1UDPdatagramssentwithchecksumsetto
zero. SocketOptionLevel.IP
AddMembership
MulticastOption
groupaddress,interfaceAddamulticastgroupmembership.
Setonly.
AddSourceMembership
IPAddress
groupaddressJoinamulticastsourcegroup.Setonly.
BlockSource
Boolean
0,1Blockdatafromamulticastsource.Setonly.
DontFragment
Boolean
0,1DonotfragmentIPdatagrams.
DropMembership
MulticastOption
groupaddress,interfaceDropamulticastgroupmembership.
Setonly.
DropSourceMembership
IPAddress
groupaddressDropamulticastsourcegroup.Setonly.
HeaderIncluded
Boolean
0,1ApplicationisprovidingtheIPheaderfor
outgoingdatagrams.
IPOptions
Byte[]
IPoptionsSpeciesIPoptionstobeinsertedintoout-
goingdatagrams.
IpTimeToLive
Int32
0255SettheIPheadertime-to-liveeld.
MulticastInterface
Byte[]
interfaceSettheinterfaceforoutgoingmulticast
packets.
MulticastLoopback
Boolean
0,1IPmulticastloopback.
MulticastTimeToLive
Int32
0255IPmulticasttimetolive.
PacketInformation
Byte[]
packetinfoReturninformationaboutreceivedpackets.
Getonly.
TypeOfService
Int32SocketType
ChangetheIPheadertypeofserviceeld.
UnblockSource
Boolean
0,1Unblockapreviouslyblockedmulticast
source.
UseLoopback
Boolean
0,1Bypasshardwarewhenpossible. Table2.1:
SocketOptions  50Chapter2:BasicSockets SocketException Description
SocketException
isasubclassof
Exception
thatisthrownwhenasocketerroroccurs.
SelectedProperties
publicoverrideint
ErrorCode
{
get;
}
The
ErrorCode
propertycontainstheerrornumberoftheerrorthathasoccurred.
Thisisextremelyusefulsincea
SocketException
canbethrownformanydifferent
reasons,andyouoftenneedtodistinguishwhichsituationhasoccurredinorder
tohandleitproperly.TheerrornumbercorrespondstotheunderlyingWinSock2
(Windowsimplementationofsockets)errorcodes.SeeAppendixformoredetails.
publicvirtualstring
Message
{
get;
}
Containsthehuman-readabletextdescriptionoftheerrorthathasoccurred. 2.5.3
TcpListenerAcceptSocket()Noticethatin
TcpEchoServer.cs
wedontreporttheIPaddressoftheclientconnec-
tion.IfyoulookthroughtheAPIfor
TcpClient
,youllnoticethatthereisnowayto
directlyaccessthisinformation.Itcertainlywouldbenicetohavetheserverreportthe
IPaddresses/portsofitsclients.In
TcpEchoServerSocket.cs
youcanseethatthe
Socket
classgivesyouaccesstothisinformationinthe
RemoteEndPoint
property.
The
TcpListener
classprovidesanalternativeacceptcalltogiveyouaccesstothis
clientinformation.The
AcceptSocket()
methodof
TcpListener
worksidenticallytothe
AcceptTcpClient()
methodexceptthatitreturnsaclient
Socket
instanceinsteadofa
client
TcpClient
instance.Onceweobtaintheclient
Socket
instance,theremoteconnec-
tionsIPaddressandportareavailableviathe
RemoteEndPoint
property.Theclient
Socket
isthenusedjustaswehaveseeninour
Socket
examples.Itdoesnotuseastreamclass
butusesthe
SocketSend()
and
Receive()
methodstotransferbytearrays.Thecodein
the
for
loopof
TcpEchoServer.cs
canberewrittentouse
Socket
asfollows:for(;;){//Runforever,acceptingandservicingconnections
Socketsock=null;
try{
//GetclientconnectionasaSocket
sock=listener.AcceptSocket();   52Chapter2:BasicSockets TcpClient
PropertyDescription LingerState
Getsorsetsinformationaboutthesocketslingertime.
NoDelay
Getsorsetsavaluethatdisablesadelaywhensendorreceivebuffers
arenotfull.
ReceiveBufferSize
Getsorsetsthesizeofthereceivebuffer.
ReceiveTimeout
Getsorsetstheamountoftimea
TcpClient
willwaittoreceivedata
onceareadoperationisinitiated.
SendBufferSize
Getsorsetsthesizeofthesendbuffer.
SendTimeout
Getsorsetstheamountoftimea
TcpClient
willwaitforasend
operationtocompletesuccessfully. Table2.2:
SocketOptionsAvailableviathePublicPropertiesofthe
TcpClient
ClassForaccesstoalloftheavailablesocketoptionsyouneedtousethe
Socket
class.
The
Socket
classmethods
GetSocketOption()
and
SetSocketOption()
providetheget
andsetcapabilitiesfortheoption.Thesemethodsareoverloadedtoaccommodatethe
datatypesofthedifferentoptions,butinallcasestheytakeasocketoptionnameand
asocketoptionlevel.Thesocketoptionnameisthenameoftheoptiontoget/set,
anditsvalidvaluesareprovidedintheenumerationclass
SocketOptionName
.Thefull
listofall
SocketOptionName
valuesisdisplayedinthe
SocketOptionName
classsummary
onTable2.1.Discussingalloftheseoptionsisbeyondthescopeofthisbook.Check
Microsoftsdocumentationat
www.msdn.microsoft.com
formoredetails.Thesocket
optionlevelisthescopeoftheoptiontoget/set,suchassocket-level,TCP-level,or
IP-level.Thevalidsocketoptionlevelvaluesareprovidedintheenumerationclass
SocketOptionLevel
.
Theonlymechanismtogetorsetsocketoptionsforhigherlevelclasses(beyond
thoseexposedinthe
TcpClient
properties)istoaccesstheunderlying
Socket
usinga
protectedproperty.Sincethepropertyisprotected,itisonlyaccessiblebyextendingthe
class.Inthefutureweexpectthatthemorecommonsocketoptionswillbeaddedusing
publicpropertiesandaccessormethodstothehigherlevelsocketclasses.
In
UdpEchoClient.cs
inSection2.4.1wediscussedtheneedtoprovideatimeout
onthe
Receive()
calltopreventhangingindenitelywhenaUDPserverdidnotrespond
orpacketswerelost.The
SocketOptionName.ReceiveTimeout
optionprovidesjustthis
functionality.HerewepresentamodiedversionoftheUDPechoclientthatillustrates
settingasocketoption.ThemodiedUDPclientusesthe
ReceiveTimeout
socketoption
tospecifyamaximumamountoftimetoblockon
Receive()
,afterwhichittriesagain
byresendingtheechorequestdatagram.Ournewechoclientperformsthefollowing
steps:
1.Sendtheechostringtotheserver.
2.Blockon
Receive()
foruptothreeseconds,startingover(uptovetimes)ifthe
replyisnotreceivedbeforethetimeout.
3.Terminatetheclient.  2.5The.NETSocketClass53Sincethetimeoutlimitisonlyavailablewiththe
Socket
classwehavetwooptions:
codetheentireclientusingthe
Socket
class,oruse
UdpClient
andretrievetheunderlying
Socket
instancewhenweneedtosetthetimeout.Sincethe
UdpClient.Client
property
thatallowsyoutoaccesstheunderlying
Socket
instanceisaprotectedproperty,itis
notdirectlyaccessibleunlessyoucreatedaderivedclassof
UdpClient
.Forthepurposes
ofillustratingtheuseofthe
Socket
classforUDP,wehavechosentheformerapproach
here.
UdpEchoClientTimeoutSocket.cs 0
usingSystem;//ForString,Int32,Boolean,Console
1
usingSystem.Text;//ForEncoding
2
usingSystem.Net;//ForEndPoint,IPEndPoint
3
usingSystem.Net.Sockets;//ForSocket,SocketOptionName,SocketOptionLevel
4
5
classUdpEchoClientTimeout{
6
7
privateconstintTIMEOUT=3000;//Resendtimeout(milliseconds)
8
privateconstintMAXTRIES=5;//Maximumretransmissions
9
10
staticvoidMain(string[]args){
11
12
if((args.Length<2)||(args.Length>3)){//Testforcorrect#ofargs
13
thrownewArgumentException("Parameters:<Server><Word>[<Port>]");
14
}
15
16
Stringserver=args[0];//ServernameorIPaddress
17
18
//Useportargumentifsupplied,otherwisedefaultto7
19
intservPort=(args.Length==3)?Int32.Parse(args[2]):7;
20
21
//Createsocketthatisconnectedtoserveronspecifiedport
22
Socketsock=newSocket(AddressFamily.InterNetwork,
23
SocketType.Dgram,ProtocolType.Udp);
24
25
//Setthereceivetimeoutforthissocket
26
sock.SetSocketOption(SocketOptionLevel.Socket,
27
SocketOptionName.ReceiveTimeout,TIMEOUT);
28
29
IPEndPointremoteIPEndPoint=new
30
IPEndPoint(Dns.Resolve(server).AddressList[0],servPort);
31
EndPointremoteEndPoint=(EndPoint)remoteIPEndPoint;   2.5The.NETSocketClass551.
Applicationsetupandparameterparsing:
lines1219
2.
UDPsocketcreation:
lines2123
The
Socket
constructortakesthreearguments:Theaddressfamily:
Setto
AddressFamily.InterNetwork
forIP.Thesockettype:
Indicatesstreamordatagramsemanticsandissetto
Socket-
Type.Dgram
forUDP.Theprotocoltype:
Setto
ProtocolType.Udp
.
3.
Setthesockettimeout:
lines2527
Thetimeoutforadatagramsocketcontrolsthemaximumamountoftime(in
milliseconds)thatacallto
Receive()
willblock.Thesocketoptionlevelis
Socket-
OptionLevel.Socket
.The
SetSocketOption()
methodwiththeargument
Socket-
OptionName.ReceiveTimeout
isusedtosetthereceivingtimeout.Thethirdargument
isthetimeoutduration,whichwesettothreeseconds(3000milliseconds).Notethat
timeoutsarenotprecise:thecallmayblockformorethanthespeciedtime(butnot
less).
4.
Createthedestinationaddressstructure:
lines2931
Thedestinationargumentdatastructureisaninstanceoftheclass
EndPoint
.Inthis
case,wecreateaninstanceofthesubclass
IPEndPoint
,whichcontainsmethods
thatwillresolveourIPaddressesforus,andthencastittothe
EndPoint
class.In
ordertoresolveanyhostnamethatwasinput,werstcall
Dns.Resolve()
.Wethen
usetherst
IPAddress
instancereturnedbythatcallastheinputtothe
IPEndPoint
constructor,alongwiththeportnumberfromthecommandline.
5.
Createdatagramtosend:
lines3334
Converttheargumenttoabytearray.
6.
Createdatagramtoreceive:
line35
Tocreateadatagramforreceiving,weonlyneedtospecifyabytearraytoholdthe
datagramdata.Inthiscaseweknowtheexactsizeofthepacketthatweareexpecting,
whichisthesamesizeasthepacketwesent.
7.
Sendthedatagram:
lines3756
The
Socket
classusesUDPspecicmethodsforsendingandreceivingcalled
SendTo()
and
ReceiveFrom()
.Sincedatagramsmaybelost,wemustbeprepared
toretransmitthedatagram.Weloopsendingandattemptingareceiveoftheecho
replyuptovetimes.Sendthedatagram:
line41
The
Socket
classusesthe
SendTo()
methodfortransmittingthedatagramtothe
addressandportspeciedinthespecied
EndPoint
.Handledatagramreception:
lines4556
ReceiveFrom()
blocksuntiliteitherreceivesadatagramorthetimerexpires.
Timerexpirationisindicatedbya
SocketException
withthe
ErrorCode
property
setto10060witha
Message
ofconnectiontimedout(seetheAppendixformore  56Chapter2:BasicSocketson
ErrorCode
).Ifthetimerexpires,weincrementthesendattemptcount(
tries
)and
startover.Afterthemaximumnumberoftries,thewhileloopexitswithoutreceiv-
ingthedatagram.If
Receive()
succeeds,wesettheloopag
receivedResponse
to
true
,causingthelooptoexit.
8.
Printreceptionresults:
lines5863
Ifwereceivedadatagram,
receivedResponse
is
true
,andwecanprintthedatagram
data.
9.
Closethesocket:
line652.5.5SocketFlagsThe
SocketFlags
enumerationprovidessomeadditionalwaystoalterthedefaultbehav-
iorofindividual
Send()
/
SendTo()
and
Receive()
/
ReceiveFrom()
calls.Tousesocket
agstheappropriateagenumerationissimplypassedasanargumenttothesend
orreceivemethod.Althoughitisbeyondthescopeofthisbooktodescribeallthe
socketagsavailable(seepage47foralist),wepresentasimplecodeexampleherefor
SocketFlags.Peek
.
Peek
allowsyoutoviewthecontentsofthenext
Receive()
/
ReceiveFrom()
without
actuallydequeuingtheresultsfromthenetwork-systembuffer.Whatthismeansisthat
youcancreateacopyofthecontentsofthenextread,butthesubsequentreadwillreturn
thesamebytesagain.3Intheorythiscanbeusedtocheckthecontentsofthenextread
andhavetheapplicationmakeadecisiononwhattodobasedonthatadvanceknowledge.
Inpractice,thisisextremelyinefcient(and,indeed,notalwaysreliable[22]),anditis
almostalwaysbettertoreadthecontentsrstanddecidewhattodowiththemafterwards.
However,wehaveincludedacodesnippetheretoillustratetheuseof
SocketFlags
:Socke
ts=newSocket(AddressFamily.InterNetwork,SocketType.Stream,
ProtocolType.Tcp);
//Bindand/orConnect,createbuffer
:
:
:
//Peekatthedatawithoutdequeuingitfromthenetworkbuffer
intlen=s.Receive(buf,0,buf.Length,SocketFlags.Peek);
//ThisReceivewillreturn(atleast)thesamedataastheprior
//Receive,butthistimeitwillbedequeuedfromthenetworkbuffer
len=s.Receive(buf,0,buf.Length,SocketFlags.None); 3Infact,ifmorebyteshavebeenreceivedoverthenetworksincethepeek,thesubsequentreadmight
returnmoredatathanthepeek.Thepointisthatunlikeanonpeekread,thebytesreturnedwerenot
removedfromthebufferandarestillavailabletobereadagain.  2.6Exercises57See
TcpEchoPeekClient.cs
onthebookswebsite(
www.mtp.com/practical/
csharpsockets
)foranimplementationoftheechoclientthatpeeksattheechoreplyprior
todequeuingit.2.6Exercises1.For
TcpEchoServer.cs
,weexplicitlyspecifytheporttothesocketintheconstructor.
Wesaidthatasocketmusthaveaportforcommunication,yetwedonotspecifya
portin
TcpEchoClient.cs
.Howistheechoclientssocketassignedaport?
2.Whenyoumakeaphonecall,itisusuallythecalleethatanswerswithHello.
Whatchangestoourclientandserverexamplewouldbeneededtoimplementthis?
3.WhathappensifaTCPservernevercallsanacceptmethod(
Accept()
,
Accept-
Socket()
,or
AcceptTcpClient()
)?WhathappensifaTCPclientsendsdataona
socketthathasnotyetbeenacceptedattheserver?
4.Serversaresupposedtorunforalongtimewithoutstoppingtherefore,theymust
bedesignedtoprovidegoodservicenomatterwhattheirclientsdo.Examinethe
serverintheexamples(
TcpEchoServer.cs
and
UdpEchoServer.cs
)andlistanything
youcanthinkofthataclientmightdotocauseittogivepoorservicetootherclients.
Suggestimprovementstoxtheproblemsthatyound.
5.Modify
TcpEchoServer.cs
toreadandwriteonlyasinglebyteatatime,sleepingone
secondbetweeneachbyte.Verifythat
TcpEchoClient.cs
requiresmultiplesreadsto
successfullyreceivetheentireechostring,eventhoughitsenttheechostringwith
one
Write()
.
6.Modify
TcpEchoServer.cs
toreadandwriteasinglebyteandthenclosethesocket.
Whathappenswhenthe
TcpEchoClient
sendsamultibytestringtothisserver?
Whatishappening?
7.Modify
UdpEchoServer.cs
sothatitonlyechoeseveryotherdatagramitreceives.
Verifythat
UdpEchoClientTimeoutSocket.cs
retransmitsdatagramsuntiliteither
receivesareplyorexceedsthenumberofretries.
8.Verifyexperimentallythesizeofthelargestmessageyoucansendandreceiveusing
UDP.
9.While
UdpEchoServer.cs
explicitlyspeciesitslocalportintheconstructor,wedo
notspecifythelocalportin
UdpEchoClientTimeoutSocket.cs
.HowistheUDPecho
clientssocketgivenaportnumber?(Hint:Theanswerisdifferentthantheanswer
forTCP.)  This Page Intentionally Left Blank chapter3SendingandReceivingMessagesWhenwritingprogramstocommunicateviasockets,youwillgenerallybeimple-
mentingan
applicationprotocol
ofsomesort.Typicallyyouusesocketsbecauseyour
programneedstoprovideinformationto,oruseinformationprovidedby,another
program.Thereisnomagic:Senderandreceivermustagreeonhowthisinformation
willbeencoded,whosendswhatinformationwhen,andhowthecommunicationwillbe
terminated.Inourechoexample,theapplicationprotocolistrivial:neithertheclientsnor
theserversbehaviorisaffectedbythe
contents
ofthebytestheyexchange.Becausemost
applicationsrequirethatthebehaviorsofclientandserverdependuponthe
information
theyexchange,applicationprotocolsareusuallymorecomplicated.
TheTCP/IPprotocolstransportbytesofuserdatawithoutexaminingormodifying
them.Thisallowsapplicationsgreatexibilityinhowtheyencodetheirinformationfor
transmission.Forvariousreasons,mostapplicationprotocolsaredenedintermsof
discrete
messages
madeupofsequencesof
elds
.Eacheldcontainsaspecicpiece
ofinformationencodedasasequenceofbits.Theapplicationprotocolspeciesexactly
howthesesequencesofbitsaretobeformattedbythesenderandinterpreted,or
parsed
,
bythereceiversothatthelattercanextractthemeaningofeacheld.Abouttheonly
constraintimposedbyTCP/IPisthatinformationmustbesentandreceivedinchunks
whoselengthinbitsisamultipleofeight.Fromnowon,then,weconsidermessagesto
besequencesof
bytes
.Giventhis,itmaybehelpfultothinkofatransmittedmessageas
asequenceofnumbers,eachbetween0and255inclusive(thatbeingtherangeofbinary
valuesthatcanbeencodedin8bits1byte).
Asaconcreteexampleforthischapter,letsconsidertheproblemoftransferring
pricequoteinformationbetweenvendorsandbuyers.Asimplequoteforsomequantity59      64Chapter3:SendingandReceivingMessagesbits,twoscomplementcanrepresentvaluesintherange

2k

1through
2k

1
1
,and
themostsignicantbit(msb)tellswhetherthevalueispositive(msb=0)ornegative
(msb=1).Ontheotherhand,a
k
-bit
unsigned
integercanencodevaluesintherange
0through
2k
1
directly.
Consideragainthe
itemNumber
.Itisa
long
,soitsbinaryrepresentationis64bits
(8bytes).Ifitsvalueis12345654321andtheencodingisbig-endian,the8bytessent
wouldbe(withthebyteonthelefttransmittedrst): 0
223
219188
49
002 If,ontheotherhand,thevaluewassentinlittle-endianorder,thetransmittedbytevalues
wouldbe: 0
2
223
219
188
490
0 Ifthesenderusesbig-endianwhenthereceiverisexpectinglittle-endian,thereceiverwill
endupwithan
itemNumber
of3583981154337816576!Mostnetworkprotocolsspecify
big-endianbyteorder;infactitissometimescalled
networkbyteorder
.However,Intel-,
AMD-,andAlpha-basedarchitectures(whicharetheprimaryarchitecturesusedbythe
MicrosoftWindowsoperatingsystem)arebydefaultlittle-endianorder.Ifyourprogram
willonlybecommunicatingwithotherC#programsonWindowsoperatingsystems,this
maynotaproblem.However,ifyouarecommunicatingwithaprogramusinganother
hardwarearchitecture,orwritteninanotherlanguage(e.g.,Java,whichusesbig-endian
byteorderbydefault),byteordercanbecomeanissue.Forthisreason,itisalwaysgood
formtoconvertoutgoingmultibytebinarynumberstobig-endian,andincomingmultibyte
binarynumbersfrombig-endiantolocalformat.Thisconversioncapabilityisprovided
inthe.NETframeworkbyboththe
IPAddress
classstaticmethods
NetworkToHostOrder()
and
HostToNetworkOrder()
,andconstructoroptionsinthe
UnicodeEncoding
class.
Notethatthemostsignicantbitofthe64-bitbinaryvalueof12345654321is0,
soitssigned(twos-complement)andunsignedrepresentationsarethesame.Moregen-
erally,thedistinctionbetween
k
-bitsignedandunsignedvaluesisirrelevantforvalues
thatlieintherange0through
2k

1
1
.However,protocolsoftenuseunsignedintegers;
C#doesprovidesupportforunsignedintegers,however,thatsupportisnotconsidered
CLR(CommonLanguageRuntime)compliant.The.NETCLRwasdesignedtoprovide
languageportability,andthereforeisrestrictedtousingtheleastcommondenominator
ofitssupportedlanguages,whichdoesnotincludeunsignedtypes.Thereisnoimmediate
drawbacktousingthenon-CLRcompliantunsignedtypes,otherthanpossiblecross-
languageintegrationissues(particularlywithJava/J++,whichdonotdeneunsigned
numbersasbasetypes).
Aswithstrings,.NETprovidesmechanismstoturnprimitiveintegertypesinto
sequencesofbytesandviceversa.Inparticular,the
BinaryWriter
classhasa
Write()  3.2ComposingI/OStreams65methodthatisoverloadedtoacceptdifferenttypearguments,including
short
,
int
,and
long
.Thesemethodsallowthosetypestobewrittenoutdirectlyintwos-complement
representation(explicitencodingneedstobespeciedinthe
BinaryWriter
constructor
ormanualconversionmethodsneedtobeinvokedtoconvertthevaluestobig-endian).
Similarly,the
BinaryReader
classhasmethods
ReadInt32()
(for
int
),
ReadInt16()
(for
short
)and
ReadInt64()
(for
long
).Thenextsectiondescribessomewaystocompose
instancesoftheseclasses.3.2ComposingI/OStreamsThe.NETframeworksstreamclassescanbecomposedtoprovidepowerfulencodingand
decodingfacilities.Forexample,wecanwrapthe
NetworkStream
ofa
TcpClient
instancein
a
BufferedStream
instancetoimproveperformancebybufferingbytestemporarilyand
ushingthemtotheunderlyingchannelallatonce.Wecanthenwrapthatinstanceina
BinaryWriter
tosendprimitivedatatypes.Wewouldcodethiscompositionasfollows:TcpClientclient=newTcpClient(server,port);
BinaryWriterout=newBinaryWriter(newBufferedStream(client.GetStream()));Figure3.1demonstratesthiscomposition.Here,wewriteourprimitivedatavalues,one
byone,to
BinaryWriter
,whichwritesthebinarydatato
BufferedStream
,whichbuffers
thedatafromthethreewrites,andthenwritesoncetothesocket
NetworkStream
,which
controlswritingtothenetwork.Wecreateaidenticalcompositionwitha
BinaryReader
on
theotherendpointtoefcientlyreceiveprimitivedatatypes.
Acompletedescriptionofthe.NETI/OAPIisbeyondthescopeofthistext;however,
Table3.1providesalistofsomeoftherelevant.NETI/Oclassesasastartingpointfor
exploitingitscapabilities. NetworkStream NetworkStream BufferedStream BufferedStream BinaryReader BinaryWriter
ReadDouble()
ReadInt32()
ReadInt16()
Write((double)3.14)
Write((int)343)
Write((short)800) Network 14  bytes 14  bytes 3.14
343
800 3.14
343
800 3.14 (8 bytes)
343 (4 bytes)
800 (2 bytes) 3.14 (8 bytes)
343 (4 bytes)
800 (2 bytes) 14 bytes
14 b y tes Figure3.1:
Streamcomposition.  66Chapter3:SendingandReceivingMessages I/OClassFunction BufferedStream
PerformsbufferingforI/Ooptimization.
BinaryReader/BinaryWriter
Handlesread/writeforprimitivedatatypes.
MemoryStream
Createsstreamsthathavememoryasabackingstore,and
canbeusedinplaceoftemporarybuffersandles.
Stream
Abstractbaseclassofallstreams.
StreamReader/StreamWriter
Readandwritecharacterinput/outputto/fromastreamin
aspeciedencoding.
StringReader/StringWriter
Readandwritecharacterinput/outputto/fromastringina
speciedencoding.
TextReader/TextWriter
Abstractbaseclassforreadingandwritingcharacter
input/output.BaseclassofStreamReader/Writerand
StringReader/Writer. Table3.1:
.NETI/OClasses3.3FramingandParsingConvertingdatatowireformatis,ofcourse,onlyhalfthestory;theoriginalinformation
mustberecoveredatthereceiverfromthetransmittedsequenceofbytes.Application
protocolstypicallydealwithdiscretemessages,whichareviewedascollectionsofelds.
Framing
referstotheproblemofenablingthereceivertolocatethebeginningandend
ofthemessageinthestreamandoftheeldswithinthemessage.Whetherinformation
isencodedastext,asmultibytebinarynumbers,orassomecombinationofthetwo,
theapplicationprotocolmustenablethereceiverofamessagetodeterminewhenithas
receivedallofthemessageandtoparseitintoelds.
Iftheeldsinamessageallhavexedsizesandthemessageismadeupofaxed
numberofelds,thenthesizeofthemessageisknowninadvanceandthereceivercan
simplyreadtheexpectednumberofbytesintoa
byte
[]buffer.Thistechniquewasused
in
TCPEchoClient.cs
,whereweknewthenumberofbytestoexpectfromtheserver.
However,whensomeeld(and/orthewholemessage)canvaryinlength,aswiththe
itemDescription
inourexample,wedonotknowbeforehandhowmanybytestoread.
Markingtheendofthemessageiseasyinthespecialcaseofthelastmessagetobe
sentonaTCPconnection:thesendersimplyclosesthesendingsideoftheconnection
(using
Shutdown(SocketShutdown.Send)1or
Close()
)aftersendingthemessage.Afterthe
receiverreadsthelastbyteofthemessage,itreceivesanend-of-streamindication(i.e.,
Read()
returns
0
),andthuscantellthatithasasmuchofthemessageastherewilleverbe.
ThesameprincipleappliestothelasteldinamessagesentasaUDPdatagrampacket. 1The
Shutdown()
methodisonlyavailablein.NETinthe
Socket
class.SeeSection4.6foramechanism
toutilizethisfunctionalityfor.NETshigherlevelsocketclassesaswell.  3.3FramingandParsing67Inallothercases,themessageitselfmustcontainadditionalframinginformation
enablingthereceivertoparsetheeld/message.Thisinformationtypicallytakesoneof
thefollowingforms:Delimiter
:Theendofthevariable-lengtheldormessageisindicatedbya
unique
marker
,anexplicitbytesequencethatimmediatelyfollows,butdoesnotoccurin,
thedata.Explicitlength
:Thevariable-lengtheldormessageisprecededbya(xed-size)
lengtheldthattellshowmanybytesitcontains.
Thedelimiter-basedapproachisoftenusedwithvariable-lengthtext:Aparticular
characterorsequenceofcharactersisdenedtomarktheendoftheeld.Iftheentire
messageconsistsoftext,itisstraightforwardtoreadincharactersusinganinstanceof
a
TextReader
(whichhandlesthebyte-to-charactertranslation),lookingforthedelimiter
sequence,andreturningthecharacterstringprecedingit.
Unfortunately,the
TextReader
classesdonotsupportreadingbinarydata.Moreover,
therelationshipbetweenthenumberof
bytes
readfromtheunderlying
NetworkStream
andthenumberof
characters
readfromthe
TextReader
isunspecied,especiallywith
multibyteencodings.Whenamessageusesacombinationofthetwoframingmethods
mentionedabove,withsomeexplicit-length-delimitedeldsandothersusingcharacter
markers,thiscancreateproblems.
Theclass
Framer
,denedbelow,allows
NetworkStream
tobeparsedasasequence
ofeldsdelimitedbyspecicbytepatterns.Thestaticmethod
Framer.nextToken()
reads
bytesfromthegiven
Stream
untilitencountersthegivensequenceofbytesorthestream
ends.Allbytesreaduptothatpointarethenreturnedinanewbytearray.Iftheendof
thestreamisencounteredbeforeanydataisread,
null
isreturned.Thedelimitercanbe
differentforeachcallto
nextToken()
,andthemethodiscompletelyindependentofany
encoding.
Acoupleofwordsofcautionareinorderhere.First,
nextToken()
isterriblyinef-
cient;forrealapplications,amoreefcientpattern-matchingalgorithmshouldbeused.
Second,whenusing
Framer.nextToken()
withtext-basedmessageformats,thecallermust
convertthedelimiterfromacharacterstringtoabytearrayandthereturnedbytearray
toacharacterstring.Inthiscasethecharacterencodingneedstodistributeoverconcate-
nation,sothatitdoesntmatterwhetherastringisconvertedtobytesallatonceoralittle
bitatatime.
Tomakethisprecise,let
E
()representanencodingthatis,afunctionthatmaps
charactersequencestobytesequences.Let
a
and
b
besequencesofcharacters,so
E
(
a
)
denotesthesequenceofbytesthatistheresultofencoding
a
.Let
+
denotecon-
catenationofsequences,so
a
+
b
isthesequenceconsistingof
a
followedby
b
.This
explicit-conversionapproach(asopposedtoparsingthemessageasacharacterstream)
shouldonlybeusedwithencodingsthathavethepropertythat
E
(
a
+
b
)
=
E
(
a
)
+
E
(
b
);other-
wise,theresultsmaybeunexpected.Althoughmostencodingssupportedin.NEThave
thisproperty,somedonot.Inparticular,thebig-andlittle-endianversionsofUnicode   3.3FramingandParsing6917
inttokenLength=currentToken.Length-delimiter.Length;
18
byte[]token=newbyte[tokenLength];
19
Array.Copy(currentToken,0,token,0,tokenLength);
20
returntoken;
21
}
22
}while((nextByte=input.ReadByte())!=-1);//StoponEOS
23
returntokenBuffer.ToArray();//Receivedatleastonebyte
24
}
25
26
//Returnstrueifvalueendswiththebytesinthesuffix
27
privatestaticBooleanendsWith(byte[]value,byte[]suffix){
28
if(value.Length<suffix.Length)
29
returnfalse;
30
31
for(intoffset=1;offset<=suffix.Length;offset++)
32
if(value[value.Length-offset]!=suffix[suffix.Length-offset])
33
returnfalse;
34
35
returntrue;
36
}
37
} Framer.cs
1.
nextToken()
:
lines524
Readfrominputstreamuntildelimiterorend-of-stream.Testforend-of-stream:
lines810
Iftheinputstreamisalreadyatend-of-stream,return
null
.Createabuffertoholdthebytesofthetoken:
line12
Weusea
MemoryStream
tocollectthedatabytebybyte.The
MemoryStream
class
allowsabytearraytobehandledlikeastreamofbytes.Putthelastbytereadintothebuffer:
line14Getabytearraycontainingtheinputsofar:
line15
Itisveryinefcienttocreateanewbytearrayoneachiteration,butitissimple.Checkwhetherthedelimiterisasufxofthecurrenttoken:
lines1621
Ifso,createanewbytearraycontainingthebytesreadsofar,minusthedelimiter
sufx,andreturnit.Getnextbyte:
line22Returnthecurrenttokenonend-of-stream:
line23  70Chapter3:SendingandReceivingMessages2.
endsWith()
:
lines2636Comparelengths:
lines2829
Thecandidatesequencemustbeatleastaslongasthedelimitertobeamatch.Comparebytes,return
false
onanydifference:
lines3133
Comparethelast
sufx.Length
bytesofthetokentothedelimiter.Ifnodifference,return
true
:
line353.4ImplementingWireFormatsinC#Toemphasizethefactthatthesameinformationcanberepresentedonthewireindiffer-
entways,wedeneaninterface
ItemQuoteEncoder
,whichhasasinglemethodthattakes
an
ItemQuote
instanceandconvertsittoa
byte
[]thatcanbewrittentoa
NetworkStream
orsentasisfordatagramsordirect
Socket
s.
ItemQuoteEncoder.cs 0
publicinterfaceItemQuoteEncoder{
1
byte[]encode(ItemQuoteitem);
2
} ItemQuoteEncoder.cs
Thespecicationofthecorrespondingdecodingfunctionalityisgivenbythe
ItemQuoteDecoder
interface,whichhasmethodsforparsingmessagesreceivedviastreams
orinbytearraysusedforUDPpackets.Eachmethodperformsthesamefunction:extract-
ingtheinformationforonemessageandreturningan
ItemQuote
instancecontainingthe
information.
ItemQuoteDecoder.cs 0
usingSystem.IO;//ForStream
1
2
publicinterfaceItemQuoteDecoder{
3
ItemQuotedecode(Streamsource);
4
ItemQuotedecode(byte[]packet);
5
} ItemQuoteDecoder.cs
Sections3.4.1and3.4.2presenttwodifferentimplementationsfortheseinterfaces:one
usingatextrepresentation,theother,ahybridencoding.    3.4ImplementingWireFormatsinC#7335
returnbuf;
36
37
}
38
} ItemQuoteEncoderText.cs
1.
Constructors:
lines813
Ifnoencodingisexplicitlyspecied,weusethedefaultencodingspeciedinthecon-
stantinterface.The
Encoding
classmethod
GetEncoding()
takesastringargument
thatspeciestheencodingtouse,inthiscasethedefaultistheconstantasciifrom
ItemQuoteTextConst.cs
.
2.
encode()
method:
lines1537Writetherstinteger,followedbyaspacedelimiter:
line17Checkfordelimiter:
lines1819
Makesurethattheelddelimiterisnotcontainedintheelditself.Ifitis,throw
anexception.Output
itemDescription
andotherintegers:
lines2022WritetheagcharactersiftheBooleansaretrue:
lines2427Writethedelimiterfortheageld:
line28Validatethattheencodedlengthiswithinthemaximumsizelimit:
lines3031Converttheencodedstringfromthegivenencodingtoabytearray:
line33Returnthebytearray:
line35
Thedecodingclass
ItemQuoteDecoderText
simplyinvertstheencodingprocess.
ItemQuoteDecoderText.cs 0
usingSystem;//ForString,Activator
1
usingSystem.Text;//ForEncoding
2
usingSystem.IO;//ForStream
3
4
publicclassItemQuoteDecoderText:ItemQuoteDecoder{
5
6
publicEncodingencoding;//Characterencoding
7
8
publicItemQuoteDecoderText():this(ItemQuoteTextConst.DEFAULT_CHAR_ENC){
9
}    76Chapter3:SendingandReceivingMessages4
5
publicclassItemQuoteEncoderBin:ItemQuoteEncoder{
6
7
publicEncodingencoding;//Characterencoding
8
9
publicItemQuoteEncoderBin():this(ItemQuoteBinConst.DEFAULT_CHAR_ENC){
10
}
11
12
publicItemQuoteEncoderBin(StringencodingDesc){
13
encoding=Encoding.GetEncoding(encodingDesc);
14
}
15
16
publicbyte[]encode(ItemQuoteitem){
17
18
MemoryStreammem=newMemoryStream();
19
BinaryWriteroutput=newBinaryWriter(newBufferedStream(mem));
20
21
output.Write(IPAddress.HostToNetworkOrder(item.itemNumber));
22
output.Write(IPAddress.HostToNetworkOrder(item.quantity));
23
output.Write(IPAddress.HostToNetworkOrder(item.unitPrice));
24
25
byteflags=0;
26
if(item.discounted)
27
flags|=ItemQuoteBinConst.DISCOUNT_FLAG;
28
if(item.inStock)
29
flags|=ItemQuoteBinConst.IN_STOCK_FLAG;
30
output.Write(flags);
31
32
byte[]encodedDesc=encoding.GetBytes(item.itemDescription);
33
if(encodedDesc.Length>ItemQuoteBinConst.MAX_DESC_LEN)
34
thrownewIOException("ItemDescriptionexceedsencodedlengthlimit");
35
output.Write((byte)encodedDesc.Length);
36
output.Write(encodedDesc);
37
38
output.Flush();
39
40
returnmem.ToArray();
41
}
42
} ItemQuoteEncoderBin.cs  3.4ImplementingWireFormatsinC#771.
Constants,variables,andconstructors:
lines714
2.
encode()
:
lines1641SetupOutput:
lines1819
A
MemoryStream
collectsthebytesoftheencodedmessage.Encapsulatingthe
MemoryStream
ina
BinaryWriter
allowstheuseofitsmethodsforwritingbinary
integers.Writeintegers:
lines2123
The
Write()
methodisoverloadedtowriteallofthebasicC#datatypes.Thestatic
IPAddress.HostToNetworkOrder()
methodconvertseachintegertobig-endian
order,andisalsooverloadedtoaccept
long
s,
int
s,and
short
s,andreturnsthe
samesizeintegerasitwaspassed.WriteBooleansasags:
lines2530
EncodeeachBooleanusingasinglebitinaagbyte.Initializetheagbyteto0,
thensettheappropriatebitsto1,ifeither
discounted
or
inStock
istrue.(Thebits
aredenedinthe
ItemQuoteBinConst
interfacetobethemostandleastsignicant
bitsofthebyte,respectively.)Writethebytetothestream.Convertdescriptionstringtobytes:
line32
Convertthetexttobytesinthespeciedencoding.Checkdescriptionlength:
lines3334
Wearegoingtouseanexplicitlengthencodingforthestring,withasinglebyte
givingthelength.Thebiggestvaluethatbytecancontainis255bytes,sothe
lengthoftheencodedstringmustnotexceed255bytes.Ifitdoes,wethrowan
exception.Writeencodedstring:
lines3536
Writethelengthoftheencodedstring,followedbythebytesinthebuffer.Flushoutputstream,returnbytes:
line38
Ensurethatallbytesareushedfromthe
MemoryStream
totheunderlyingbyte
buffer.Returnthebytearraytobesent:
line40
ItemQuoteDecoderBin
implementsthecorrespondingdecoderfunction.
ItemQuoteDecoderBin.cs 0
usingSystem;//ForString,Activator
1
usingSystem.IO;//ForStream
2
usingSystem.Text;//ForEncoding
3
usingSystem.Net;//ForIPAddress
4
5
publicclassItemQuoteDecoderBin:ItemQuoteDecoder{
6  78Chapter3:SendingandReceivingMessages7
publicEncodingencoding;//Characterencoding
8
9
publicItemQuoteDecoderBin():this(ItemQuoteTextConst.DEFAULT_CHAR_ENC){
10
}
11
12
publicItemQuoteDecoderBin(StringencodingDesc){
13
encoding=Encoding.GetEncoding(encodingDesc);
14
}
15
16
publicItemQuotedecode(Streamwire){
17
BinaryReadersrc=newBinaryReader(newBufferedStream(wire));
18
19
longitemNumber=IPAddress.NetworkToHostOrder(src.ReadInt64());
20
intquantity=IPAddress.NetworkToHostOrder(src.ReadInt32());
21
intunitPrice=IPAddress.NetworkToHostOrder(src.ReadInt32());
22
byteflags=src.ReadByte();
23
24
intstringLength=src.Read();//Returnsanunsignedbyteasanint
25
if(stringLength==-1)
26
thrownewEndOfStreamException();
27
byte[]stringBuf=newbyte[stringLength];
28
src.Read(stringBuf,0,stringLength);
29
StringitemDesc=encoding.GetString(stringBuf);
30
31
returnnewItemQuote(itemNumber,itemDesc,quantity,unitPrice,
32((flags&ItemQuoteBinConst.DISCOUNT_FLAG)==ItemQuoteBinConst.DISCOUNT_FLAG),33((flags&ItemQuoteBinConst.IN_STOCK_FLAG)==ItemQuoteBinConst.IN_STOCK_FLAG));34
}
35
36
publicItemQuotedecode(byte[]packet){
37
Streampayload=newMemoryStream(packet,0,packet.Length,false);
38
returndecode(payload);
39
}
40
} ItemQuoteDecoderBin.cs
1.
Constants,variables,andconstructors:
lines714
2.
Streamdecode:
lines1634  3.4ImplementingWireFormatsinC#79Wraptheinput
Stream
:
line17
Usingthegiven
Stream
,constructa
BinaryReader
sowecanmakeuseofthemethods
readInt64()
,
readInt32()
,and
readByte()
forreadingbinarydatatypesfromthe
input.Readintegers:
lines1921
Readtheintegersbackinthesameorderinwhichtheywerewrittenout.The
readInt64()
methodreads8bytes(64bits)andconstructsa(signed)
long
.The
readInt32()
methodreads4bytesandconstructsa(signed)
int
.Thestaticmethod
IPAddress.NetworkToHostOrder()
convertsfrombig-endian(network)byteorder-
ingtothehostsnativebyteordering;ifthenativeorderingisbig-endian,thedata
isreturnedunmodied.Eitherwillthrowan
EndOfStreamException
ifthestream
endsbeforetherequisitenumberofbytesisread.Readagbyte:
line22
Theagbyteisnext;thevaluesoftheindividualbitswillbecheckedlater.Readstringlength:
lines2426
Thenextbytecontainsthelengthoftheencodedstring.Notethatweusethe
Read()
method,whichreturnsthecontentsofthenextbytereadasanintegerbetween0
and255,andthatwereaditintoan
int
.Allocatebufferandreadencodedstring:
lines2729
Onceweknowhowlongtheencodedstringis,weallocateabufferandcall
Read()
specifyingtheexpectednumberofbytes.
Read()
willthrowan
EndOfStream-
Exception
ifthestreamendsbeforethebufferislled.Notetheadvantageof
thelength-prexed
String
representation:bytesdonothavetobeinterpretedas
charactersuntilyouhavethemall.Checkags:
lines3233
Theexpressionsusedasparametersinthecalltotheconstructorillustratethestan-
dardmethodofcheckingwhetheraparticularbitisset(equalto1)inanintegertype.
3.
Bytearraydecode:
lines3639
Simplywrapthepacketsbytearrayina
MemoryStream
andpasstothestream-decoding
method.3.4.3SendingandReceivingTheencodingspresentedabovecanbeusedwithboththe
NetworkStream
sof.NETs
TcpClient
and
TcpListener
,andwiththebytearraysofthe
UdpClient
class.Weshow
theTCPusagerst.
SendTcp.cs 0
usingSystem;//ForString,Console,ArgumentException
1
usingSystem.Net.Sockets;//ForTcpClient,NetworkStream
2   3.4ImplementingWireFormatsinC#81RecvTcp.cs 0
usingSystem;//ForConsole,Int32,ArgumentException
1
usingSystem.Net;//ForIPAddress
2
usingSystem.Net.Sockets;//ForTcpListener,TcpClient
3
4
classRecvTcp{
5
6
staticvoidMain(string[]args){
7
8
if(args.Length!=1)//Testforcorrect#ofargs
9
thrownewArgumentException("Parameters:<Port>");
10
11
intport=Int32.Parse(args[0]);
12
13
//CreateaTCPListenertoacceptclientconnections
14
TcpListenerlistener=newTcpListener(IPAddress.Any,port);
15
listener.Start();
16
17
TcpClientclient=listener.AcceptTcpClient();//Getclientconnection
18
19
//Receivetext-encodedquote
20
ItemQuoteDecoderdecoder=newItemQuoteDecoderText();
21
ItemQuotequote=decoder.decode(client.GetStream());
22
Console.WriteLine("ReceivedText-EncodedQuote:");
23
Console.WriteLine(quote);
24
25
//Repeatquotewithbinary-encoding,adding10centstotheprice
26
ItemQuoteEncoderencoder=newItemQuoteEncoderBin();
27
quote.unitPrice+=10;//Add10centstounitprice
28
Console.WriteLine("Sending(binary)...");
29
byte[]bytesToSend=encoder.encode(quote);
30
client.GetStream().Write(bytesToSend,0,bytesToSend.Length);
31
32
client.Close();
33
listener.Stop();
34
}
35
} RecvTcp.cs
1.
TcpListener
setup:
lines1315
2.
Acceptclientconnection:
line17   3.5WrappingUp83RecvUdp.cs 0
usingSystem;//ForInt32,ArgumentException
1
usingSystem.Net;//ForIPEndPoint
2
usingSystem.Net.Sockets;//ForUdpClient
3
4
classRecvUdp{
5
6
staticvoidMain(string[]args){
7
8
if(args.Length!=1&&args.Length!=2)//Testforcorrect#ofargs
9
thrownewArgumentException("Parameter(s):<Port>[<encoding>]");
10
11
intport=Int32.Parse(args[0]);//ReceivingPort
12
13
UdpClientclient=newUdpClient(port);//UDPsocketforreceiving
14
15
byte[]packet=newbyte[ItemQuoteTextConst.MAX_WIRE_LENGTH];
16
IPEndPointremoteIPEndPoint=newIPEndPoint(IPAddress.Any,port);
17
18
packet=client.Receive(refremoteIPEndPoint);
19
20
ItemQuoteDecoderTextdecoder=(args.Length==2?//Whichencoding
21
newItemQuoteDecoderText(args[1]):
22
newItemQuoteDecoderText());
23
24
ItemQuotequote=decoder.decode(packet);
25
Console.WriteLine(quote);
26
27
client.Close();
28
}
29
} RecvUdp.cs3.5WrappingUpWehaveseenhowC#datatypescanbeencodedindifferentwaysandhowmessages
canbeconstructedfromvarioustypesofinformation.Youmaybeawarethatthe
.NETframeworkincludes
serialization
capabilities:The
System.Xml.Serializable
and  84Chapter3:SendingandReceivingMessagesSystem.Runtime.Serialization.Formatters
namespacescontainclassesthatsupport
writingaC#classinstancetoanXML(eXtensibleMarkupLanguage)le,binaryformat,
orSOAP(SimpleObjectAccessProtocol)messagesuitableforsendingoveranetwork
connection.Onceattheremotehost,thelecanbedeserializedintoainstanceofthat
object.Similarly,the
System.Runtime.Remoting
namespaceallowstheabilitytocreatea
remoteproxyobjectthataclientcanusetoinvokemethodsonaserversobject.Itmight
seemthathavingtheseinterfacesavailablewouldeliminatetheneedforwhatwehave
describedinthischapter,andthatistruetosomeextent.However,itisnotalwaysthe
caseforseveralreasons.
First,theencodedformsproducedby
Serializable
maynotbeveryefcient.They
mayincludeinformationthatismeaninglessoutsidethecontextoftheCommonLanguage
Runtime(CLR),andmayalsoincuroverheadtoprovideexibilitythatmaynotbeneeded.
Second,
Serializable
and
Remoting
cannotbeusedwhenadifferentwireformathas
alreadybeenspeciedforexample,byastandardizedprotocol.Andnally,custom-
designedclasseshavetoprovidetheirownimplementationsoftheserializationinterfaces
anyway.
Abasictenetofgoodprotocoldesignisthattheprotocolshouldconstraintheimple-
mentoraslittleaspossibleandshouldminimizeassumptionsabouttheplatformon
whichtheprotocolwillbeimplemented.Wethereforeavoidtheuseof
Serializable
and
Remoting
inthisbook,andinsteadusemoredirectencodinganddecodingmethods.3.6Exercises1.Whathappensifthe
Encoder
usesadifferentencodingthanthe
Decoder
?
2.RewritethebinaryencodersothattheItemDescriptionisterminatedby
\
r
\
n

insteadofbeinglengthencoded.Use
Send/RecvTcp
totestthisnewencoding.
3.The
nextToken()
methodof
Framer
assumesthateitherthedelimiteroranend-of-
stream(EoS)terminatesatoken;however,ndingtheEoSmaybeanerrorinsome
protocols.Rewrite
nextToken()
toincludeasecondBooleanparameter.Iftheparam-
etervalueis
true
,thentheEoSterminatesatokenwithouterror;otherwise,theEoS
generatesanerror.
4.UsingthecodeprovidedonthewebsiteoftheJavaversionofthisbook([25],
www.mkp.com/practical/javasockets
),runaC#receiverandaJavasender,and
viceversa.Verifythatthecontentsaresentandreceivedproperly.Tryremoving
the
NetworkToHostOrdering()
and
HostToNetworkOrdering()
methodcallsand
rerunningtheexperiment.  chapter4BeyondtheBasicsTheclientandserverexamplesinChapter2demonstratethebasicmodelfor
programmingwithsocketsinC#.Thenextstepistoapplytheseconceptsinvari-
ousprogrammingmodels,suchasnonblockingI/O,threading,asynchronousI/O,and
multicasting.4.1NonblockingI/OSocketI/Ocallsmayblockforseveralreasons.Datainputmethods
Read()
,
Receive()
,
and
ReceiveFrom()
blockifdataisnotavailable.Dataoutputmethods
Write()
,
Send()
,
or
SendTo()
mayblockifthereisnotsufcientspacetobufferthetransmitteddata.
The
Accept()
,
AcceptSocket()
,and
AcceptTcpClient()
methodsofthe
Socket
and
TcpListener
classesallblockuntilaconnectionhasbeenestablished(seeSection5.4).
Meanwhile,longround-triptimes,higherrorrateconnections,andslow(ordeceased)
serversmaycauseconnectionestablishmenttotakealongtime.Inallofthesecases,the
methodreturnsonlyaftertherequesthasbeensatised.Ofcourse,ablockingmethodcall
haltstheexecutionoftheapplication.Andwehavenotevenconsideredthepossibility
ofabuggyormaliciousapplicationontheotherendoftheconnection!
Whataboutaprogramthathasothertaskstoperformwhilewaitingforcallcomple-
tion(e.g.,updatingthebusycursororrespondingtouserrequests)?Theseprograms
mayhavenotimetowaitonablockedmethodcall.OrwhataboutlostUDPdatagrams?
Fortunately,severalmechanismsareavailableforavoidingunwantedblockingbehaviors.
Wedealwiththreehere:(1)I/Ostatusprechecking,(2)blockingtimeoutcalls,and(3)non-
blockingsockets.Table4.1summarizesthetechniquesaccordingtothetypeofsocketyou
areusing.Later,welllookatafourthmethod,calledasynchronousI/O,whereinstead85  86Chapter4:BeyondtheBasics I/OOperationSocketTypeBlockingAvoidanceOptions Acceptinga
Socket
1.Setthesockettononblockingbeforecalling
newconnection
Accept()
.
2.Call
Poll()
or
Select()
onthesocketbeforecalling
Accept()
.
TcpListener
1.Onlycall
AcceptSocket()
or
AcceptTcpClient()
if
Pending()
returns
true
. Makinga
Socket
1.Setthesockettononblockingbeforecalling
newconnection
Connect()
.
2.Call
Poll()
or
Select()
onthesocketbeforecalling
Connect()
. Send
Socket
1.Setthesockettononblockingbeforecalling
Send()
or
SendTo()
.
2.Call
Poll()
or
Select()
onthesocketbeforecalling
Send()
or
SendTo()
.
3.Setthe
SendTimeout
socketoptionbeforecalling
Send()
or
SendTo()
.
TcpClient
1.Setthe
SendTimeout
propertybeforecalling
Write()
on
thenetworkstream. Receive
Socket
1.Setthesockettononblockingbeforecalling
Receive()
or
ReceiveFrom()
.
2.Call
Poll()
or
Select()
onthesocketbeforecalling
Receive()
or
ReceiveFrom()
.
3.Setthe
ReceiveTimeout
socketoptionbeforecalling
Receive()
or
ReceiveFrom()
.
4.Onlycall
Receive()
or
ReceiveFrom()
ifproperty
Available
>
0
.
TcpClient
1.Setthe
ReceiveTimeout
propertybeforecalling
Read()
onthenetworkstream.
2.Onlycall
Read()
onthe
TcpClient
snetworkstreamif
the
DataAvailable
propertyis
true
.(The
Length
propertyisnotsupportedfor
NetworkStream
.) Table4.1:
BlockingAvoidanceMechanismsofblocking,anI/Ocallimmediatelyreturnsandagreestonotifyyoulaterwhenithas
completed.4.1.1I/OStatusPrecheckingOnewaytoavoidblockingbehaviorisnottomakecallsthatwillblock.Howisthis
achieved?ForsomeoftheI/Ocallsthat
can
block,wecanprechecktheI/Ostatusto  4.1NonblockingI/O87seeifI/O
would
block.Iftheprecheckindicatesthatthecallwouldnotblock,wecanpro-
ceedwiththecallknowingthattheoperationwillcompleteimmediately.Iftheprecheck
indicatesthatthecallwouldblock,thenotherprocessingcanbedoneandanothercheck
canbedonelater.
Whenreadingdatawitha
TcpClient
thiscanbeachievedbycheckingthe
DataAvail-
able
propertyoftheassociated
NetworkStream
,whichreturns
true
ifthereisdatatobe
readand
false
ifthereisnot.TcpClientclient=newTcpClient(server,port);
NetworkStreamnetstream=client.GetStream();
:
:
:
if(netstream.DataAvailable){
intlen=netstream.Read(buf,0,buf.Length);
}else{
//Nodataavailable,dootherprocessing
}A
TcpListener
canprecheckifthereareanyconnectionspendingbeforecalling
AcceptTcpClient()
or
AcceptSocket()
usingthe
Pending()
method.
Pending()
returns
true
ifthereareconnectionspending,
false
iftherearenot.TcpListenerlistener=newTcpListener(ipaddr,port);
listener.Start();
:
:
:
if(listener.Pending()){
//Connectionsarepending,processthem
TcpClientclient=listener.AcceptTcpClient();
:
:
:
}else{
Console.WriteLine("Noconnectionspendingatthistime.");
}Withthe
Socket
classtheavailabilityofdatatoreadcanbeprecheckedusingthe
Available
property,whichisoftype
int
.
Available
alwayscontainsthenumberofbytes
receivedfromthenetworkbutnotyetread;thus,if
Available
isgreaterthanzero,aread
operationwillnotblock.Socketsock=newSocket(AddressFamily.InterNetwork,SocketType.Stream,
ProtocolType.Tcp);
sock.Connect(serverEndPoint);
:
:
:
if(sock.Available>0){
//Wehavedatatoread
sock.Receive(buf,buf.Length,0);
:
:
:  88Chapter4:BeyondtheBasics}else{
Console.WriteLine("Nodataavailabletoreadatthistime.");
}The
Poll()
methodofthe
Socket
classalsoallowsprechecking,amongother
features,andisdiscussedinthenextsection.4.1.2BlockingCallswithTimeoutIntheprevioussectionwedemonstratedhowtocheckifacallwouldblockpriortoexe-
cutingit.Sometimes,however,wemayactuallyneedtoknowthatsomeI/Oeventhas
not
happenedforacertaintimeperiod.Forexample,inChapter2wesaw
UdpEchoClientTime-
outSocket.cs
,wheretheclientsendsadatagramtotheserverandthenwaitstoreceivea
response.Ifadatagramisnotreceivedbeforethetimerexpires,
ReceiveFrom()
unblocks
toallowtheclienttohandlethedatagramloss.Utilizingsocketoptions,the
Socket
class
supportssettingaboundonthemaximumtime(inmilliseconds)toblockonsendingor
receivingdata,usingthe
SocketOption.SendTimeout
and
SocketOption.ReceiveTimeout
properties.Socketsock=newSocket(AddressFamily.InterNetwork,SocketType.Stream,
ProtocolType.Tcp);
:
:
:
sock.SetSocketOption(SocketOptionLevel.Socket,
SocketOptionName.SendTimeout,
3000);//Se
ta3secondtimeoutonSend()/SendTo()Ifyouareusingthe
TcpClient
class,itcontainsthe
SendTimeout
and
ReceiveTimeout
propertieswhichcanbesetorretrieved.TcpClientclient=newTcpClient(server,port);
:
:
:
client.ReceiveTimeout=5000;//Se
ta5secondtimeoutonRead()Inbothcasesifthespeciedtimeelapsesbeforethemethodreturns,a
Socket-
Exception
isthrownwiththe
Socket
s
ErrorCode
propertysetto10060(connectiontimed
out).
The
Poll()
methodof
Socket
offersmorefunctionality.
Poll()
takestwooptions:
anintegernumberof
microseconds
(notmilliseconds)towaitforaresponse,anda
mode
thatindicateswhattypeofoperationwearewaitingfor.Thewaittimecanbenegative,
indicatinganindenitewaittime(basically,ablock).Thewaittimecanalsobezero,
whichallows
Poll()
tobeusedforprechecking.Themodeissettooneofthe
SelectMode
enumerationvalues
SelectRead
,
SelectWrite
,or
SelectError
,dependingonwhatweare
checkingfor.
Poll()
returns
true
ifthesockethasanoperationpendingfortherequested
mode,or
false
ifitdoesnot.  4.1NonblockingI/O89//Blockfor1secondwaitingfordatatoreadorincomingconnections
if(sock.Poll(1000000,SelectMode.SelectRead)){
//Sockethasdatatoreadoranincomingconnection
}else{
//Nodatatoreadorincomingconnections
}Ingeneral,pollingisconsideredveryinefcientbecauseitrequiresrepeatedcalls
tocheckstatus.Thisissometimescalledbusywaiting,becauseitinvolvescontinu-
ouslyloopingbacktocheckforeventsthatprobablyhappeninfrequently(atleastin
relationtothenumberofchecksmade).Somewaystoavoidpollingarediscussedlater
inthischapter,includingusingthe
Socket
method
Select()
,whichallowsblocking
onmultiplesocketsatonce(Section4.2),threads(Section4.3),andasynchronousI/O
(Section4.4).
A
Write()
or
Send()
callblocksuntilthelastbytewritteniscopiedintotheTCP
implementationslocalbuffer;iftheavailablebufferspaceissmallerthanthesizeof
thewrite,somedatamustbesuccessfullytransferredtotheotherendoftheconnection
beforethecallwillreturn(seeSection5.1fordetails).Thus,theamountoftimethat
alargedatasendmayblockiscontrolledbythereceivingapplication.Therefore,any
protocolthatsendsalargeenoughamountofdataoverasocketinstancecanblockfor
anunlimitedamountoftime.(SeeSection5.2forfurtherdiscussionontheconsequences
ofthis.)
Establishinga
Socket
connectiontoaspeciedhostandportwillblockuntileither
theconnectionisestablished,theconnectionisrefused,orasystem-imposedtimeout
occurs.Thesystem-imposedtimeoutislong(ontheorderofminutes),andC#doesnot
provideanymeansofshorteningit.
Supposewewanttoimplementtheechoserverwithalimitontheamountoftime
takentoserviceeachclient.Thatis,wedeneatarget,TIMELIMIT,andimplementtheserver
insuchawaythatafterTIMELIMITmilliseconds,theserverinstanceisterminated.
Oneapproachsimplyhastheserverinstancekeeptrackoftheamountoftheremain-
ingtime,andusethesendandreceivetimeoutsettingsdescribedabovetoensure
thatreadsandwritesdonotblockforlongerthanthattime.
TcpEchoServerTimeout.cs
implementsthisapproach.
TcpEchoServerTimeout.cs 0
usingSystem;//ForConsole,Int32,ArgumentException,Environment
1
usingSystem.Net;//ForIPAddress
2
usingSystem.Net.Sockets;//ForTcpListener,TcpClient
3
4
classTcpEchoServerTimeout{
5
6
privateconstintBUFSIZE=32;//Sizeofreceivebuffer    92Chapter4:BeyondtheBasics1.
Argumentparsingandsetup:
lines1217
2.
Createsocket,call
Bind()
and
Listen
:
lines1930
3.
Mainserverloop:
lines3687Acceptclientconnection:
line42Recordstarttime:
line44Setinitialtimeout:
lines4647
Settheinitial
Receive()
timeouttotheTIMELIMITsinceminimaltimeshouldnot
haveelapsedyet.Receiveloop:
lines5573
Receivedataandsendechoreply.Aftereachreceiveandsend,updateandcheck
theelapsedtimeandabortifnecessary.Toabortwethrowthesameexception
atimeoutduringthe
Receive()
wouldthrow,whichisa
SocketException
with
ErrorCode
10060.Ifwehavenotexceededourtimeoutafterthedatatransfer,reset
the
Receive()
timeoutbasedonournewelapsedtimebeforewelooparoundto
receivemoredata.Successfulcompletion:
lines7476
Ifwesuccessfullyechoallthebyteswithinthetimelimit,outputtheechoedbyte
lengthandclosetheclientsocket.Exceptionhandling:
lines7886
Ifwehitatimeoutlimit,outputtheappropriatemessage.Closetheclientsocket
andallowthereceivelooptocontinueandhandlemoreclients.4.1.3NonblockingSocketsOnesolutiontotheproblemofundesirableblockingistochangethebehaviorofthesocket
sothatallcallsare
nonblocking
.Forsuchasocket,ifarequestedoperationcanbecom-
pletedimmediatelythecallsreturnwillsucceed.Iftherequestedoperationcannotbe
completedimmediately,itthrowsa
SocketException
withthe
ErrorCode
propertysetto
10035witha
Message
ofOperationwouldblock.Thestandardapproachistocatchthis
exception,continuewithprocessing,andtryagainlater.
The
Socket
classcontainsa
Blocking
propertythat,whensetto
false
,causesall
methodsonthatsocketthatwouldnormallyblockuntiltheiroperationcompletedto
nolongerblock.Likepolling,nonblockingsocketstypicallyinvolvesomebusy-waiting
andarenotveryefcient.Bettermethodstoimplementthisarediscussedwith
Select()
(Section4.2),threads(Section4.3),andasynchronousI/O(Section4.4)
Herewepresentaversionofthe
TcpEchoClient.cs
programfromChapter2that
hasbeenmodiedtouseanonblockingsocket.Analternativeversionthatutilizesthe
Poll()
methodinsteadisalsoavailableonthebookswebsite(www.mkp.com/practical/
csharpsockets).  4.1NonblockingI/O93TcpNBEchoClient.cs 0
usingSystem;//ForString,Environment
1
usingSystem.Text;//ForEncoding
2
usingSystem.IO;//ForIOException
3
usingSystem.Net;//ForIPEndPoint,Dns
4
usingSystem.Net.Sockets;//ForTcpClient,NetworkStream,SocketException
5
usingSystem.Threading;//ForThread.Sleep
6
7
publicclassTcpNBEchoClient{
8
9
staticvoidMain(string[]args){
10
11
if((args.Length<2)||(args.Length>3))//Testforcorrect#ofargs
12
thrownewArgumentException("Parameters:<Server><Word>[<Port>]");
13
14
Stringserver=args[0];//ServernameorIPaddress
15
16
//ConvertinputStringtobytes
17
byte[]byteBuffer=Encoding.ASCII.GetBytes(args[1]);
18
19
//Useportargumentifsupplied,otherwisedefaultto7
20
intservPort=(args.Length==3)?Int32.Parse(args[2]):7;
21
22
//CreateSocketandconnect
23
Socketsock=null;
24
try{
25
sock=newSocket(AddressFamily.InterNetwork,SocketType.Stream,
26
ProtocolType.Tcp);
27
28sock.Connect(newIPEndPoint(Dns.Resolve(server).AddressList[0],servPort));29
}catch(Exceptione){
30
Console.WriteLine(e.Message);
31
Environment.Exit(-1);
32
}
33
34
//Receivethesamestringbackfromtheserver
35
inttotalBytesSent=0;//Totalbytessentsofar
36
inttotalBytesRcvd=0;//Totalbytesreceivedsofar
37
38
//MakesockanonblockingSocket
39
sock.Blocking=false;
40   4.2Multiplexing9584
85
sock.Close();
86
}
87
88
staticvoiddoThing(){
89
Console.Write(".");
90
Thread.Sleep(2000);
91
}
92
} TcpNBEchoClient.cs
1.
Setupandargumentparsing:
lines1120
2.
Socket
and
IPEndPoint
setup:
lines2232
Createa
Socket
instance,createan
IPEndPoint
instancefortheserverfromthe
command-lineparameters,andconnecttotheserver.
3.
Set
Blocking
to
false
:
lines3839
4.
Mainloop:
lines4181Loopuntilallbytessenthavebeenechoed:
line42Sendbytestoserver:
lines4450
Incaseallbytescannotbesentinonesend,continuetryingtosenduntilthe
numberofbytessentmatchesthesendbytebuffersize.Handleexceptions:
lines5260
Ifwegeta
SocketException
withan
ErrorCode
of10035,thesendwouldhave
blocked.Thisisnotnecessarilyafatalerror,soweoutputaninformational
messageandallowthelooptocontinue.Receiveechoreply:
lines6379
Attempttodoa
Receive()
innonblockingmode.Ifthereisnodatatoreceive,a
SocketException
isthrownwith
ErrorCode
setto10035.Aspernormal
Receive()
semantics,a
Receive()
returnof
0
indicatesthattheremoteserverhasclosedthe
connection.Otherprocessingissimulatedherebymethod
doThing()
.
5.
Outputechoreplyandclosesocket:
lines82864.2Multiplexing4.2.1TheSocket
Select()
MethodOurprogramssofarhavedealtwithI/Ooverasinglechannel;eachversionofourecho
serverdealswithonlyoneclientconnectionatatime.However,itisoftenthecasethat  96Chapter4:BeyondtheBasicsanapplicationneedstheabilitytodoI/Oonmultiplechannelssimultaneously.Forexam-
ple,wemightwanttoprovideechoserviceonseveralportsatonce.Theproblemwith
thisbecomesclearassoonasyouconsiderwhathappensaftertheservercreatesand
bindsasockettoeachport.Itisreadyto
Accept()
connections,butwhichsocketto
choose?Acallto
Accept()
or
Receive()
ononesocketmayblock,causingestablished
connectionstoanothersockettowaitunnecessarily.Thisproblemcanbesolvedusing
nonblockingsockets,butinthatcasetheserverendsupcontinuallypollingthesockets,
whichiswasteful.Wewouldliketolettheserverblockuntil
some
socketisreadyforI/O.
FortunatelythesocketAPIprovidesawaytodothis.Withthestatic
SocketSelect()
method,aprogramcanspecifyalistofsocketstocheckforpendingI/O;
Select()
sus-
pendstheprogramuntiloneormoreofthesocketsinthelistbecomesreadytoperform
I/O.Thelistismodiedtoonlyincludethose
Socket
instancesthatareready.
Select()
takesfourarguments,therstthreeofwhicharelistsof
Socket
s,andthe
fourthofwhichisatimein
microseconds
(notmilliseconds)indicatinghowlongtowait.
Anegativevalueonthewaittimeindicatesanindenitewaitperiod.Thesocketlistscanbe
anyclassthatimplementsthe
IList
interface(thisincludes
ArrayList
,usedinourexam-
ple).Thelistsrepresentwhateventyouarewaitingfor;inorder,theyrepresentchecking
readreadiness,writereadiness,anderrorexistence.Thelistsshouldbepopulatedwith
referencestothe
Socket
instancespriortocall.Whenthecallcompletes,thelistswill
containonlythe
Socket
referencesthatmeetthatlistscriteria(readability,writability,or
errorexistence).Ifyoudontwanttocheckforalltheseconditionsinasingle
Select()
call,youcanpass
null
foruptotwoofthelists.
Letsreconsidertheproblemofrunningtheechoserviceonmultipleports.Ifwe
createasocketforeachport,wecouldlistthose
Socket
sinan
ArrayList
.Acallto
Select()
,givensuchalist,wouldsuspendtheprogramuntilanechorequestarrivesfor
atleastoneofoursockets.Wecouldthenhandletheconnectionsetupandechoforthat
particularsocket.Ournextexample,
TcpEchoServerSelect.cs
,implementsthismodel.
Theserverrunsonthreeports:8080,8081,and8082.
TcpEchoServerSelectSocket.cs 0
usingSystem;//ForConsole,Int32,ArgumentException,Environment
1
usingSystem.Net;//ForIPAddress
2
usingSystem.Collections;//ForArrayList
3
usingSystem.Net.Sockets;//ForSocket,SocketException
4
5
classTcpEchoServerSelectSocket{
6
7
privateconstintBUFSIZE=32;//Sizeofreceivebuffer
8
privateconstintBACKLOG=5;//Outstandingconnqueuemaxsize
9
privateconstintSERVER1_PORT=8080;//Portforsecondechoserver
10
privateconstintSERVER2_PORT=8081;//Portforsecondechoserver    4.3Threads993.
Mainserverloop:
lines4485Putthesocketinstancesintoan
ArrayList
:
lines4852Select()
:
lines5658
Usethe
ArrayList
ofsocketsasinputtothe
Select()
call.Astherstinputthe
socketsinthearraywillbecheckedforincomingconnections,andanysockets
withoutconnectionswillberemovedfromthelist.Loopthroughandprocessincomingconnections:
lines6079
Fromthispointontheprocessingisthesameasinourpreviousexamples.Each
socketinthearrayhasits
Accept()
methodcalledtoretrievetheclient
Socket
.
Theclientsockets
Receive()
and
Send()
methodsarecalledtoreadandechothe
data,andthesocketisclosedwhencomplete.4.3ThreadsIntheprecedingsectionwedemonstratedhowtousethenonblockingI/Ofeaturesof
.NETtorunothercodewhilewaitingonsocketoperations.Therearetwomaindrawbacks
tothisnonblockingapproach.First,pollingforcompletionofsocketmethodsisfairly
inefcient.Ifyoudontpollsoonenough,timeislostafterthesocketoperationcompletes.
Ifyoupolltoosoon,theoperationwillnotbereadyandyoulleitherhavetoblockorcheck
backagainlater.
Second,thenumberofconnectionsthatcanbehandledconcurrentlyislimited.Ifa
clientconnectswhileanotherisalreadybeingserviced,theserverwillnotechothenew
clientsdatauntilithasnishedwiththecurrentclient,althoughthenewclientwillbe
abletosenddataassoonasitconnects.Thistypeofserverisknownasan
iterativeserver
.
Iterativeservershandleclientssequentially,nishingwithoneclientbeforeservicingthe
next.Theyworkbestforapplicationswhereeachclientrequiresasmall,boundedamount
ofserverconnectiontime;however,ifthetimetohandleaclientcanbelong,thewait
experiencedbysubsequentclientsmaybeunacceptable.
Todemonstratetheproblem,adda10-secondsleepusing
Thread.Sleep(10000)1afterthe
TcpClient
connectcallin
TcpEchoClient.cs
andexperimentwithseveralclients
simultaneouslyaccessingtheTCPechoserver.Herethesleepoperationsimulatesan
operationthattakessignicanttime,suchasslowleornetworkI/O.Notethatanew
clientmustwaitforallalready-connectedclientstocompletebeforeitgetsservice.
Whatweneedissomewayforeachconnectiontoproceedindependently,without
interferingwithotherconnections.Thatiswhereimplementing
threads
comesin.Thread
programmingisaverycomplextopicinitselfandbeyondthescopeofthisbook,butfor
ourpurposesyoucanconceptuallythinkofthreadsasportionsofcodethatcanexecute
concurrently.Thisallowsonethreadofexecutiontoblockonanoperationwhileanother
threadcontinuestorun. 1Youwillneedtoadd
usingSystem.Threading;
atthebeginningoftheprogram.  100Chapter4:BeyondtheBasicsThe.NETAPIprovides
System.Threading
classlibraryforimplementingthreads.The
.NETthreadingcapabilitiesareveryexibleandallowaprogramtohandlemanynetwork
connectionssimultaneously.Usingthreads,asingleapplicationcanworkonseveraltasks
concurrently.Inourechoserver,wecangiveresponsibilityforeachclienttoanindepen-
dentlyexecutingthread.Alloftheexampleswehaveseensofarconsistofasinglethread,
whichsimplyexecutesthe
Main()
method.Inthissectionwedescribetwoapproachesto
coding
concurrentservers
,namely,
thread-per-client
,whereanewthreadisspawnedto
handleeachclientconnection,and
threadpool
,whereaxed,prespawnedsetofthreads
worktogethertohandleclientconnections.
TocreateanewthreadinC#youcreateanewinstanceofthe
Thread
class,which
asitsargumenttakesa
delegate
methodthatwilloperateinitsownthread.Thisthread
delegateisrepresentedbythe
ThreadStart
class,whichtakesthemethodtoberunasits
argument.Oncethe
Thread
hasbeeninstantiated,the
Start()
methodiscalledtobegin
executiononthatthread.Forexample,ifyouhavecreatedamethodcalled
runMyThread()
,
thecodetocreateandstartthecoderunningasitsownthreadwouldbe:usingSystem.Threading;
:
:
:
//CreateaThreadStartinstanceusingyourmethodasadelegate:
ThreadStartmethodDelegate=newThreadStart(runMyThread);
//CreateaThreadinstanceusingyourdelegatemethod:
Threa
dt=newThread(methodDelegate);
//Startthethread
t.Start();Thenewthreaddoesnotbeginexecutionuntilits
Start()
methodisinvoked.When
the
Start()
methodofaninstanceof
Thread
isinvoked,theCLRcausesthespecied
methodtobeexecutedinanewthread,concurrentlywithallothers.Meanwhile,the
original
threadreturnsfromitscallto
Start()
andcontinuesitsexecutionindependently.
(Notethatdirectlycallingthemethodwithoutpassingittoa
Thread
viaadelegatehasthe
normalprocedure-callsemantics:themethodisexecutedinthecallersthread.)Theexact
interleavingofthreadexecutionisdeterminedbyseveralfactors,includingtheimplemen-
tationoftheCLR,theload,theunderlyingOS,andthehostconguration.Forexample,
onauniprocessorsystem,threadssharetheprocessorsequentially;onamultiprocessor
system,multiplethreadsfromthesameapplicationcanrunsimultaneouslyondifferent
processors.
Notethatthemethoddelegatecannottakeanyargumentsorreturnavalue.Luckily,
therearemechanismstocircumventbothoftheselimitations.Topassargumentsinto
a
Thread
instancewhilemaintainingdataencapsulation,youcouldbreakyourseparate
threadcodeintoitsownclass.Forexample,supposeyouwanttopassaninstanceof
TcpClient
intoyour
runMyThread()
method.Youcouldcreateanewclass(e.g.,
MyThread-
Class
)thatcontainedthe
runMyThread()
method,andpassthe
TcpClient
instanceinto   102Chapter4:BeyondtheBasics28
}
29
}
30
31
classThreadExample{
32
33
staticvoidMain(string[]args){
34
35
MyThreadClassmtc1=newMyThreadClass("Hello");
36
newThread(newThreadStart(mtc1.runMyThread)).Start();
37
38
MyThreadClassmtc2=newMyThreadClass("Aloha");
39
newThread(newThreadStart(mtc2.runMyThread)).Start();
40
41
MyThreadClassmtc3=newMyThreadClass("Ciao");
42
newThread(newThreadStart(mtc3.runMyThread)).Start();
43
}
44
} ThreadExample.cs
1.
MyThreadClass
:
lines329
Inordertopassstatetothemethodwewillberunningasitsownthread,weputthe
methodinitsownclass,andpassthestatevariablesintheclassconstructor.Inthis
casethestateisthestringgreetingtobeprinted.Constructor:
lines1315
Eachinstanceof
ThreadExample
containsitsowngreetingstring.Initializeaninstanceof
Random()
:
line18
Usedtogeneratearandomnumberofsleeptimes.for
loop:
line20
Loop10times.Printthethreadidandinstancegreeting:
lines2122
Thestaticmethod
Thread.CurrentThread.GetHashCode()
returnsauniqueid
referencetothethreadfromwhichitiscalled.Suspendthread:
lines2426
Afterprintingitsinstancesgreetingmessage,eachthreadsleepsforarandom
amountoftime(between0and500milliseconds)bycallingthestaticmethod
Thread.Sleep()
,whichtakesthenumberofmillisecondstosleepasaparameter.
The
rand.Next(500)
callreturnsarandom
int
between0and500.
Thread.Sleep()
canbeinterruptedbyanotherthread,inwhichcase
ThreadInterruptedException
isthrown.Ourexampledoesnotincludeaninterruptcall,sotheexceptionwill
nothappeninthisapplication.  4.3Threads1032.
Main()
:
lines3343
Eachofthethreegroupingsofstatementsin
Main()
doesthefollowing:(1)creates
anewinstanceof
MyThreadClass
withadifferentgreetingstring;(2)passesthe
runMyThread()
methodofthenewinstancetotheconstructorof
ThreadStart
;
(3)passesthe
ThreadStart
instancetotheconstructorof
Thread
;and(4)callsthe
new
Thread
instances
Start()
method.Eachthreadindependentlyexecutesthe
runMyThread()
methodof
ThreadExample
,whilethe
Main()
threadterminates.
Uponexecution,aninterleavingofthethreegreetingmessagesisprintedtothe
console.Theexactinterleavingofthenumbersdependsuponthefactorsmentioned
earlier.4.3.1ServerProtocolSincethetwoserverapproacheswearegoingtodescribe(thread-per-clientandthread
pool)areindependentoftheparticularclient-serverprotocol,wewanttobeabletouse
thesameprotocolcodeforboth.Inordertomaketheprotocolusedeasilyextensible,the
protocolclasseswillimplementthe
IProtocol
interface,denedin
IProtocol.cs
.This
simpleinterfacehasonlyonemethod,
handleclient()
,whichhasnoargumentsanda
voidreturntype.
IProtocol.cs 0
publicinterfaceIProtocol{
1
voidhandleclient();
2
} IProtocol.cs
Thecodefortheechoprotocolisgivenintheclass
EchoProtocol
,whichencapsu-
latestheimplementationoftheserversideoftheechoprotocol.Theideaisthatthe
servercreatesaseparateinstanceof
EchoProtocol
foreachconnection,andprotocol
executionbeginswhen
handleclient()
iscalledonaninstance.Thecodein
handle-
client()
isalmostidenticaltotheconnectionhandlingcodein
TcpEchoServer.cs
,except
thataloggingcapability(describedshortly)hasbeenadded.Wecancreateathreadthat
independentlyexecutes
handleclient()
,orwecaninvoke
handleclient()
directly.
EchoProtocol.cs 0
usingSystem.Collections;//ForArrayList
1
usingSystem.Threading;//ForThread
2
usingSystem.Net.Sockets;//ForSocket   4.3Threads10545
}
46
} EchoProtocol.cs
1.
Membervariablesandconstructor:
lines513
Eachinstanceof
EchoProtocol
containsaclientsocketfortheconnectionanda
referencetothelogger.
2.
handleclient()
:
lines1545
Handleasingleclient:Writetheclientandthreadinformationtothelog:
lines1618
ArrayList
isadynamicallysizedcontainerof
Object
s.The
Add()
methodof
ArrayList
insertsthespeciedobjectattheendofthelist.Inthiscase,the
insertedobjectisa
String
.Eachelementofthe
ArrayList
representsalineof
outputtothelogger.Executetheechoprotocol:
lines2042Writetheelements(oneperline)ofthe
ArrayList
instancetothelogger:
line44
Theloggerallowsforsynchronizedreportingofthreadcreationandclientcomple-
tion,sothatentriesfromdifferentthreadsarenotinterleaved.Thisfacilityisdenedby
the
ILogger
interface,whichhasmethodsforwritingstringsorobjectcollections.
ILogger.cs 0
usingSystem;//ForString
1
usingSystem.Collections;//ForArrayList
2
3
publicinterfaceILogger{
4
voidwriteEntry(ArrayListentry);//Writelistoflines
5
voidwriteEntry(Stringentry);//Writesingleline
6
} ILogger.cs
writeEntry()
logsthegivenstringorobjectcollection.Howitisloggeddependson
theimplementation.Onepossibilityistosendthelogmessagestotheconsole.
ConsoleLogger.cs 0
usingSystem;//ForString
1
usingSystem.Collections;//ForArrayList  106Chapter4:BeyondtheBasics2
usingSystem.Threading;//ForMutex
3
4
classConsoleLogger:ILogger{
5
privatestaticMutexmutex=newMutex();
6
7
publicvoidwriteEntry(ArrayListentry){
8
mutex.WaitOne();
9
10
IEnumeratorline=entry.GetEnumerator();
11
while(line.MoveNext())
12
Console.WriteLine(line.Current);
13
14
Console.WriteLine();
15
16
mutex.ReleaseMutex();
17
}
18
19
publicvoidwriteEntry(Stringentry){
20
mutex.WaitOne();
21
22
Console.WriteLine(entry);
23
Console.WriteLine();
24
25
mutex.ReleaseMutex();
26
}
27
} ConsoleLogger.cs
Anotherpossibilityistowritethelogmessagestoalespeciedintheconstructor,
asinthefollowingexample.
FileLogger.cs 0
usingSystem;//ForString
1
usingSystem.IO;//ForStreamWriter
2
usingSystem.Threading;//ForMutex
3
usingSystem.Collections;//ForArrayList
4
5
classFileLogger:ILogger{
6
privatestaticMutexmutex=newMutex();
7  4.3Threads1078
privateStreamWriteroutput;//Logfile
9
10
publicFileLogger(Stringfilename){
11
//Createlogfile
12
output=newStreamWriter(filename,true);
13
}
14
15
publicvoidwriteEntry(ArrayListentry){
16
mutex.WaitOne();
17
18
IEnumeratorline=entry.GetEnumerator();
19
while(line.MoveNext())
20
output.WriteLine(line.Current);
21
output.WriteLine();
22
output.Flush();
23
24
mutex.ReleaseMutex();
25
}
26
27
publicvoidwriteEntry(Stringentry){
28
mutex.WaitOne();
29
30
output.WriteLine(entry);
31
output.WriteLine();
32
output.Flush();
33
34
mutex.ReleaseMutex();
35
}
36
} FileLogger.cs
Ineachexamplethe
System.Threading.Mutex
classisusedtoguaranteethatonlyone
threadiswritingatonetime.
Wearenowreadytointroducesomedifferentapproachestoconcurrentservers.4.3.2Thread-per-ClientIna
thread-per-client
server,anewthreadiscreatedtohandleeachconnection.The
serverexecutesaloopthatrunsforever,listeningforconnectionsonaspeciedport   4.3Threads10933
/*NOTREACHED*/
34
}
35
} TcpEchoServerThread.cs
1.
Parameterparsingandserversocket/loggercreation:
lines919
2.
Loopforever,handlingincomingconnections:
lines2133Acceptanincomingconnection:
line24Createaprotocolinstancetohandlenewconnection:
line25
Eachconnectiongetsitsowninstanceof
EchoProtocol
.Eachinstancemaintains
thestateofitsparticularconnection.Theechoprotocolhaslittleinternalstate,
butmoresophisticatedprotocolsmayrequiresubstantialamountsofstate.Create,start,andloganewthreadfortheconnection:
lines2628
Since
EchoProtocol
implementsamethodsuitableforexecutionasathread
(
handleclient()
inthiscase,amethodthattakesnoparametersandreturns
void),wecangiveournewinstancesthreadmethodtothe
ThreadStart
con-
structor,whichinturnispassedtothe
Thread
constructor.Thenewthreadwill
executethe
handleclient()
methodof
EchoProtocol
when
Start()
isinvoked.
The
GetHashCode()
methodofthestatic
Thread.CurrentThread
propertyreturns
auniqueidnumberforthenewthread.Handleexceptionfrom
AcceptSocket()
:
lines2931
IfsomeI/Oerroroccurs,
AcceptSocket()
throwsa
SocketException
.Inourearlier
iterativeechoserver(
TcpEchoServer.cs
),theexceptionisnothandled,andsuch
anerrorterminatestheserver.Herewehandletheexceptionbyloggingtheerror
andcontinuingexecution.4.3.3FactoringtheServerOurthreadedserverdoeswhatwewantitto,butthecodeisnotveryreusableorextensi-
ble.First,theechoprotocolishard-codedintheserver.WhatifwewantanHTTPserver
instead?Wecouldwritean
HTTPProtocol
andreplacetheinstantiationof
EchoProtocol
in
Main()
;however,wewouldhavetorevise
Main()
andhaveaseparatemainclassforeach
differentprotocolthatweimplement.
Wewanttobeabletoinstantiateaprotocolinstanceoftheappropriatetypefor
eachconnectionwithoutknowinganyspecicsabouttheprotocol,includingthename
ofaconstructor.Thisprobleminstantiatinganobjectwithoutknowingdetailsaboutits
typearisesfrequentlyinobject-orientedprogramming,andthereisastandardsolution:
usea
factory
.Afactoryobjectsuppliesinstancesofaparticularclass,hidingthedetails
ofhowtheinstanceiscreated,suchaswhatconstructorisused.  110Chapter4:BeyondtheBasicsForourprotocolfactory,wedenethe
IProtocolFactory
interfacetohaveasingle
method,
createProtocol()
,whichtakes
Socket
and
ILogger
instancesasargumentsand
returnsaninstanceimplementingthedesiredprotocol.Ourprotocolswillallimplement
the
handleclient()
method,sowecanrunthemastheirown
Thread
toexecutethepro-
tocolforthatconnection.Thus,ourprotocolfactoryreturnsinstancesthatimplementthe
handleclient()
method:
IProtocolFactory.cs 0
usingSystem.Net.Sockets;//ForSocket
1
2
publicinterfaceIProtocolFactory{
3
IProtocolcreateProtocol(SocketclntSock,ILoggerlogger);
4
} IProtocolFactory.cs
Wenowneedtoimplementaprotocolfactoryfortheechoprotocol.Thefactoryclass
issimple.Allitdoesisreturnanewinstanceof
EchoProtocol
whenever
createProtocol()
iscalled.
EchoProtocolFactory.cs 0
usingSystem.Net.Sockets;//ForSocket
1
2
publicclassEchoProtocolFactory:IProtocolFactory{
3
publicEchoProtocolFactory(){}
4
5
publicIProtocolcreateProtocol(SocketclntSock,ILoggerlogger){
6
returnnewEchoProtocol(clntSock,logger);
7
}
8
} EchoProtocolFactory.cs
Wehavefactoredoutsomeofthedetailsofprotocolinstancecreationfromour
server,sothatthevariousiterativeandconcurrentserverscanreusetheprotocolcode.
However,theserverapproach(iterative,thread-per-client,etc.)isstillhard-codedin
Main()
.Theseserverapproachesdealwithhowto
dispatch
eachconnectiontotheappro-
priatehandlingmechanism.Toprovidegreaterextensibility,wewanttofactoroutthe
dispatchingmodelfromthe
Main()
of
TcpEchoServerThread.cs
sothatwecanuseany       116Chapter4:BeyondtheBasics17
listener.Start();
18
19
ILoggerlogger=newConsoleLogger();//Logmessagestoconsole
20
21
System.Runtime.Remoting.ObjectHandleobjHandle=
22
Activator.CreateInstance(null,protocolName+"ProtocolFactory");
23
IProtocolFactoryprotoFactory=(IProtocolFactory)objHandle.Unwrap();
24
25
objHandle=Activator.CreateInstance(null,dispatcherName+"Dispatcher");
26
IDispatcherdispatcher=(IDispatcher)objHandle.Unwrap();
27
28
dispatcher.startDispatching(listener,logger,protoFactory);
29
/*NOTREACHED*/
30
}
31
} ThreadMain.cs
1.
Applicationsetupandparameterparsing:
lines814
2.
Create
TcpListener
andlogger:
lines1619
3.
Instantiateaprotocolfactory:
lines2123
Theprotocolnameispassedasthesecondparameter.Weadoptthenamingcon-
ventionof
<ProtocolName>ProtocolFactory
fortheclassnameofthefactoryfor
theprotocolname
<ProtocolName>
.Forexample,ifthesecondparameterisEcho,
thecorrespondingprotocolfactoryis
EchoProtocolFactory
.Thestaticmethod
Activator.CreateInstance()
takesthenameofaclassandreturnsan
Object-
Handle
object.The
Unwrap()
methodof
ObjectHandle
createsanewinstanceofthe
class(castingtothepropertypeisrequired;inthiscaseweusethe
IProtocol-
Factory
interface).
protoFactory
referstothisnewinstanceofthespeciedprotocol
factory.
4.
Instantiateadispatcher:
lines2526
Thedispatchernameispassedasthethirdparameter.Weadoptthenamingcon-
ventionof
<DispatcherType>Dispatcher
fortheclassnameofthedispatcheroftype
<DispatcherType>
.Forexample,ifthethirdparameterisThreadPer,thecorre-
spondingdispatcheris
ThreadPerDispatcher
.
dispatcher
referstothenewinstance
ofthespecieddispatcher.
5.
Startdispatchingclients:
line28
ThreadMain.cs
makesiteasytouseotherprotocolsanddispatchers.Thebooks
website(www.mkp.com/practical/csharpsockets)containssomeadditionalexamples.  4.4AsynchronousI/O117
4.4AsynchronousI/OThe.NETframeworkprovidesanumberofpredenednetworkclassmethodsthatexe-
cuteasynchronously.Thisallowscodeexecutioninthecallingcodetoproceedwhile
theI/Omethodwaitstounblock.Whatsactuallyhappeningisthattheasynchronous
methodisbeingexecutedinitsownthread,exceptthedetailsofsettingup,data
passing,andstartingthethreadaredoneforyou.Thecallingcodehasthreeoptions
todeterminewhentheI/Ocalliscompleted:(1)itcanspecifya
callback
methodto
beinvokedoncompletion;(2)itcan
poll
periodicallytoseeifthemethodhascom-
pleted;or(3)afterithascompleteditsasynchronoustasks,itcanblockwaitingfor
completion.
The.NETframeworkisextremelyexibleinhowitprovidesasynchronousAPI
capabilities.First,itslibraryclassesprovidepredenednonblockingversionsofmeth-
odsformanydifferenttypesofI/O,notjustnetworkcalls.Therearenonblocking
versionsofcallsfornetworkI/O,streamI/O,leI/O,evenDNSlookups.Second,
the.NETframeworkprovidesamechanismforbuildinganasynchronousversionof
anymethod,evenuser-denedmethods.Thelatterisbeyondthescopeofthis
book,butinthissectionwewillexaminesomeoftheexistingasynchronousnetwork
methods.
AnasynchronousI/Ocallisbrokenupintoa
begincall
thatisusedtoinitiate
theoperation,andan
endcall
thatisusedtoretrievetheresultsofthecallafterithas
completed.Thebegincallusesthesamemethodnameastheblockingversionwiththe
word
Begin
prependedtoit.Likewise,theendcallusesthesamemethodnameasthe
blockingversionwiththeword
End
prependedtoit.Beginandendoperationsareintended
tobesymmetrical,andeachcalltoabeginmethodshouldbematched(atsomepoint)
withanendmethodcall.Failuretodosoinalong-runningprogramcreatesanaccumu-
lationofstatemaintenancefortheuncompletedasynchronouscall
s...in
otherwords,a
memoryleak!
Letslookatsomeconcreteexamples.The
NetworkStream
classcontainsasyn-
chronousversionsofits
Write()
and
Read()
methods,implementedas
BeginWrite()
,
EndWrite()
,
BeginRead()
,and
EndRead()
.Letstakealookatthesemethodsandexamine
howtheyrelatetotheirblockingcounterparts.
The
BeginRead()
and
BeginWrite()
methodstaketwoadditionalargumentsandhave
adifferentreturntype:
publicoverrideIAsyncResult
BeginRead
(
byte
[]
buffer
,
int
offset
,
int
size
,
AsyncCallback
callback
,
object
state
);
publicoverrideIAsyncResult
BeginWrite
(
byte
[]
buffer
,
int
offset
,
int
count
,
AsyncCallback
callback
,
object
state
);
Thetwoadditionalargumentsareaninstanceof
AsyncCallback
andaninstanceof
object
,whichcanbeanyC#classinstance(predenedoruser-dened).The
AsyncCall-
back
classisa
delegate
thatspeciesthecallbackmethodtoinvokewhentheasynchronousoptioniscomplete.Thisclasscanbeinstantiatedsimplybypassingitthenameofthe   4.4AsynchronousI/O119Onceyouunderstandthedifferencesbetweenthesynchronousandasynchronous
versionsofonemethod,thebasicconceptscanbeextrapolatedtocovertheentire.NET
asynchronousAPI.Insummary,itinvolves:
1.
BeginMethod:
Thebegincalltakes(inadditiontotheargumentsinthesyn-
chronousversionofthemethod)an
AsyncCallback
instancespecifyingthecallback
methodandan
object
containinganyuser-denedstate.Thebegincallreturnsan
IAsyncResult
thatcanbeusedtopollorblockonthecallsreturn.
2.
CallbackState:
Thecallbackmethodispassedthestate(thebegincalls
object
argument)storedinthe
AsyncState
propertyofthe
IAsyncResult
instance.
3.
EndMethod:
Theendmethodcalltakesasanargumentthe
IAsyncResult
instance
returnedbythecallbackinvocation,andreturnsthevaluethatthesynchronous
versionofthecallwouldhavereturned.
Figure4.1showsapictorialdepictionofhowa
BeginSend()
callexecutes.
Table4.2listssomeofthe.NETclassesusedinthisbookthathaveasynchronous
methods(thisisnotacompletelistofallasynchronousmethods.NETprovides).Main Thread
New Thread Create Socket Connect Call BeginSend Send occurs
concurrently Other Processing
Continues Send Completes SendCallBack Call EndSend Send
Callback
is invoked
EndSend returns the number of bytes
sent if Send was successful, or throws  a SocketExce p tion if it was unsuccessful Figure4.1:
Asynchronous
Send()
example.  120Chapter4:BeyondtheBasics ClassAsynchronousMethodAPI Dns
BeginGetHostByName()/EndGetHostByName()
BeginResolve()/EndResolve()
FileStream
BeginRead()/EndRead()
BeginWrite()/EndWrite()
NetworkStream
BeginRead()/EndRead()
BeginWrite()/EndWrite()
Socket
BeginAccept()/EndAccept()
BeginConnect()/EndConnect()
BeginReceive()/EndReceive()
BeginReceiveFrom()/EndReceiveFrom()
BeginSend()/EndSend()
BeginSendTo()/EndSendTo()
Stream
BeginRead()/EndRead()
BeginWrite()/EndWrite() Table4.2:
Selected.NETAsynchronousMethodsItstimetolookatsomeexamples.Belowweimplementversionsof
TcpEchoClient
and
TcpEchoServer
fromChapter2usingtheasynchronousAPI.Theassumptioninboth
casesisthattheprogramhasotheroperationsitneedstobeperformingwhileblocking
onthevariousnetworkcalls.Tosimulatethatweaddedasimple
doOtherStuff()
method,
whichjustloopsvetimes,printingoutputandsleeping.
Youwillalsonotethatthenumberofasynchronousmethodsdenedforthe
Socket
classissignicantlymorethanwhatisdenedfor
NetworkStream
.Inordertodemon-
stratethecontrastbetweenthetwo,theechoclientusesthe
TcpClient
classwitha
NetworkStream
,andtheechoserverusesthe
Socket
class.
TcpEchoClientAsync.cs 0
usingSystem;//ForString,IAsyncResult,ArgumentException
1
usingSystem.Text;//ForEncoding
2
usingSystem.Net.Sockets;//ForTcpClient,NetworkStream
3
usingSystem.Threading;//ForManualResetEvent
4
5
classClientState{
6
//Objecttocontainclientstate,includingthenetworkstream
7
//andthesend/recvbuffer  4.4AsynchronousI/O1218
9
privatebyte[]byteBuffer;
10
privateNetworkStreamnetStream;
11
privateStringBuilderechoResponse;
12
privateinttotalBytesRcvd=0;//Totalbytesreceivedsofar
13
14
publicClientState(NetworkStreamnetStream,byte[]byteBuffer){
15
this.netStream=netStream;
16
this.byteBuffer=byteBuffer;
17
echoResponse=newStringBuilder();
18
}
19
20
publicNetworkStreamNetStream{
21
get{
22
returnnetStream;
23
}
24
}
25
26
publicbyte[]ByteBuffer{
27
set{
28
byteBuffer=value;
29
}
30
get{
31
returnbyteBuffer;
32
}
33
}
34
35
publicvoidAppendResponse(Stringresponse){
36
echoResponse.Append(response);
37
}
38
publicStringEchoResponse{
39
get{
40
returnechoResponse.ToString();
41
}
42
}
43
44
publicvoidAddToTotalBytes(intcount){
45
totalBytesRcvd+=count;
46
}
47
publicintTotalBytes{
48
get{
49
returntotalBytesRcvd;
50
}     4.4AsynchronousI/O1257.
Call
BeginRead
:
lines9497
Call
BeginRead()
withthestandard
Read()
argumentsplusauser-denedcallback
methodof
ReadCallback()
(wrappedinan
AsyncCallback
delegateinstance)anda
stateobjectreferencetotheuser-dened
ClientState
.
8.
Performasynchronousprocessing,thenblock:
lines99101
Call
doOtherStuff()
tosimulateasynchronousprocessing,thenusethe
Manual-
ResetEvent
classinstance
ReadDone
tocall
WaitOne()
,whichblocksuntil
Read-
Done()
hasbeenset.Notethatwecannotusethe
IAsyncResult
fromthe
BeginRead()
inthiscase,becausethatwouldunblockusaftertherstread,andwemayhave
multiplereads.
9.
Closethestreamandsocket:
lines103104
10.
doOtherStuff()
:
lines107114
Simulateotherprocessingbywritingsomeoutputinaloopwith
Thread.Sleep()
prolongingtheintervalsslightly.
11.
WriteCallback()
:
lines116124Retrievethestateobject:
lines118
Thewritecallbackstateobjectwasa
ClientState
instance,sostoreitas
alocalvariablebycastingthe
IAsyncResult
instanceproperty
AsyncState
asa
ClientState
.EndWrite():
line120
Callthe
EndWrite()
methodtocompletetheoperation.Outputthenumberofbytessent:
lines121123
12.
ReadCallback()
:
lines126150Retrievethestateobject:
lines128130
Thereadcallbackstateobjectwasa
ClientState
instance,sostoreitasa
localvariablebycastingthe
IAsyncResult
instanceproperty
AsyncState
as
a
ClientState
.Createlocalvariableswhereconvenient.Issueanother
BeginRead()
:
lines135142
Ifthelengthoftheresponseislessthantheexpectedresponse,issueanother
BeginRead()
togettheremainingbytes.Outputtheechoresponse:
lines143148
Ifallbyteshavebeenreceived,outputtheechoresponse.Trigger
ManualResetEvent
:
line149
Manuallytriggerthe
ReadDone
ManualResetEvent
sowecanunblockifweare
blockingonreadcompletion.
TcpEchoServerAsync.cs 0
usingSystem;//ForConsole,IAsyncResult,ArgumentException
1
usingSystem.Net;//ForIPEndPoint  126Chapter4:BeyondtheBasics2
usingSystem.Net.Sockets;//ForSocket
3
usingSystem.Threading;//ForManualResetEvent
4
5
classClientState{
6
//Objecttocontainclientstate,includingtheclientsocket
7
//andthereceivebuffer
8
9
privateconstintBUFSIZE=32;//Sizeofreceivebuffer
10
privatebyte[]rcvBuffer;
11
privateSocketclntSock;
12
13
publicClientState(SocketclntSock){
14
this.clntSock=clntSock;
15
rcvBuffer=newbyte[BUFSIZE];//Receivebuffer
16
}
17
18
publicbyte[]RcvBuffer{
19
get{
20
returnrcvBuffer;
21
}
22
}
23
24
publicSocketClntSock{
25
get{
26
returnclntSock;
27
}
28
}
29
}
30
31
classTcpEchoServerAsync{
32
33
privateconstintBACKLOG=5;//Outstandingconnectionqueuemaxsize
34
35
staticvoidMain(string[]args){
36
37
if(args.Length!=1)//Testforcorrect#ofargs
38
thrownewArgumentException("Parameters:<Port>");
39
40
intservPort=Int32.Parse(args[0]);
41
42
//CreateaSockettoacceptclientconnections
43
SocketservSock=newSocket(AddressFamily.InterNetwork,SocketType.Stream,
44
ProtocolType.Tcp);     130Chapter4:BeyondtheBasics5.
doOtherStuff()
:
lines6370
Simulateotherprocessingbywritingsomeoutputinaloopwith
Thread.Sleep()
prolongingtheintervalsslightly.
6.
AcceptCallback()
:
lines7294Retrievethestateobject:
line74
Theacceptcallbackstateobjectwastheserversocket,sostoretheserversocket
asalocalvariablebycastingthe
IAsyncResult
instanceproperty
AsyncState
asa
Socket
.Call
EndAccept()
:
line79
The
EndAccept()
callreturnstheclient
Socket
instance.Outputthethreadstateandclientconnection:
lines8184
Outputthethreadnumberandstateandtheclientthatwehaveconnected.Createa
ClientState
instance:
line86
Inpreparationforcallingournextasynchronousmethod,instantiateouruser-
denedstateobject.Call
BeginReceive()
:
lines8889
Call
BeginReceive()
withthestandard
Receive()
arguments,plusauser-dened
callbackmethodof
ReceiveCallback()
(wrappedinan
AsyncCallback
delegate
instance)andastateobjectreferencetotheuser-dened
ClientState
.Catchexceptions:
lines9092
Sinceaservershouldberobust,catchanyexceptionsthatoccuronthisclient
connection,andclosetheclientsocketandcontinueiftheyoccur.
7.
ReceiveCallback()
:
lines96119Retrievethestateobject:
lines98
Thereceivecallbackstateobjectwasthe
ClientState
instance,sostoreitas
alocalvariablebycastingthe
IAsyncResult
instanceproperty
AsyncState
asa
ClientState
.Call
EndReceive()
:
line102
The
EndReceive()
callreturnsthebytesreceived.Outputthebytesreceived:
lines105108
Ifthebytesreceivedweregreaterthanzero,outputthebytesreturnedtothe
console.Ifthebytesreceivedisequaltozero,wearedone,soclosetheclient
socketanddropoutofthemethod.Call
BeginSend()
:
lines110111
Call
BeginSend()
withthestandard
Send()
argumentsplusauser-denedcallback
methodof
SendCallback()
(wrappedinan
AsyncCallback
delegateinstance)and
astateobjectreferencetotheuser-dened
ClientState
.Catchexceptions:
lines115118
Sinceaservershouldberobust,catchanyexceptionsthatoccuronthisclient
connection,andclosetheclientsocketandcontinueiftheyoccur.  4.5MultipleRecipients1318.
SendCallback()
:
lines121139Retrievethestateobject:
lines122
Thesendcallbackstateobjectwasthe
ClientState
instance,sostoreitasa
localvariablebycastingthe
IAsyncResult
instanceproperty
AsyncState
asa
ClientState
.Call
EndSend()
:
line126
The
EndSend()
callreturnsthebytessent.Outputthebytessent:
lines128131
Outputthenumberofbytessenttotheconsole.Call
BeginReceive()
:
lines133134
Sincetheremaybemorebytestoreceive(untilwegetabytesreceivedvalue
ofzero),recursivelycall
BeginReceive()
again.Theargumentsarethesame
the
Receive()
argumentsplusauser-denedcallbackmethodof
SendCallback()
(wrappedinan
AsyncCallback
delegateinstance)andastateobjectreferenceto
theuser-dened
ClientState
.Catchexceptions:
lines135138
Sinceaservershouldberobust,catchanyexceptionsthatoccuronthisclient
connection,andclosetheclientsocketandcontinueiftheyoccur.
Analoptionforhandlingasynchronouscallcompletionis
polling
.Aswehave
seen,pollinginvolveshavingthemainthreadperiodicallycheckinwiththeasynchronous
operationtoseeifitiscompleted.Thiscanbeachievedwiththe
IsCompleted
propertyof
the
IAsyncResult
class::
:
:
IAsyncResultresult=netStream.BeginRead(buffer,0,buffer.Length,
newAsyncCallback(myMethod),
myStateObject);
for(;;){
if(result.isCompleted){
//handlereadhere
}
//dootherworkhere
:
:
:
}Asmentionedearlier,pollingistypicallynotveryefcient.Callbacksareusuallythe
preferredmethodofhandlingasynchronousmethodcompletion.4.5MultipleRecipientsSofarallofoursocketshavedealtwithcommunicationbetweenexactlytwoentities,
usuallyaserverandaclient.Suchone-to-onecommunicationissometimescalled
unicast
.  132Chapter4:BeyondtheBasicsSomeinformationisofinteresttomultiplerecipients.Insuchcases,wecouldunicasta
copyofthedatatoeachrecipient,butthismaybeveryinefcient.Unicastingmultiple
copiesoverasinglenetworkconnectionwastesbandwidthbysendingthesameinfor-
mationmultipletimes.Infact,ifwewanttosenddataataxedrate,thebandwidthof
ournetworkconnectiondenesahardlimitonthenumberofreceiverswecansupport.
Forexample,ifourvideoserversends1Mbpsstreamsanditsnetworkconnectionisonly
3Mbps(ahealthyconnectionrate),wecanonlysupportthreesimultaneoususers.
Fortunately,networksprovideawaytousebandwidthmoreefciently.Insteadof
makingthesenderresponsibleforduplicatingpackets,wecangivethisjobtothenetwork.
Inourvideoserverexample,wesendasinglecopyofthestreamacrosstheserverscon-
nectiontothenetwork,whichthenduplicatesthedataonlywhenappropriate.Withthis
modelofduplication,theserverusesonly1Mbpsacrossitsconnectiontothenetwork,
irrespectiveofthenumberofclients.
Therearetwotypesofone-to-manyservice:
broadcast
and
multicast
.Withbroadcast,
allhostsonthe(local)networkreceiveacopyofthemessage.Withmulticast,themessage
issenttoa
multicastaddress
,andthenetworkdeliversitonlytothosehoststhathave
indicatedthattheywanttoreceivemessagessenttothataddress.Ingeneral,onlyUDP
socketsareallowedtobroadcastormulticast.4.5.1BroadcastBroadcastingUDPdatagramsissimilartounicastingdatagrams,exceptthata
broadcast
address
isusedinsteadofaregular(unicast)IPaddress.The
localbroadcast
address
(255.255.255.255)sendsthemessagetoeveryhostonthesamebroadcastnetwork.Local
broadcastmessagesareneverforwardedbyrouters.AhostonanEthernetnetworkcan
sendamessagetoallotherhostsonthatsameEthernet,butthemessagewillnotbefor-
wardedbyarouter.IPalsospecies
directedbroadcast
addresses,whichallowbroadcasts
toallhostsonaspeciednetwork;however,sincemostInternetroutersdonotforward
directedbroadcasts,wedonotdealwiththemhere.
Thereisnonetworkwidebroadcastaddressthatcanbeusedtosendamessageto
allhosts.Toseewhy,considertheimpactofabroadcasttoeveryhostontheInternet.
Sendingasingledatagramwouldresultinavery,verylargenumberofpacketduplica-
tionsbytherouters,andbandwidthwouldbeconsumedoneachandeverynetwork.The
consequencesofmisuse(maliciousoraccidental)aretoogreat,sothedesignersofIPleft
suchanInternet-widebroadcastfacilityoutonpurpose.
Evenso,localbroadcastcanbeveryuseful.Often,itisusedinstateexchangefor
networkgameswheretheplayersareallonthesamelocal(broadcast)network.InC#,the
codeforunicastingandbroadcastingisthesame.Toplaywithbroadcastingapplications,
simplyrun
SendUdp.cs
usingabroadcastdestinationaddress.2Run
RecvUdp.cs
asyoudid
before(exceptthatyoucanrunseveralreceiversatonetime). 2Notethatsomeoperatingsystemsrequiresetting
SocketOptionName.Broadcast
to
true
before
broadcastingisallowed,oranexceptionwillbethrown.Thisismostlikelyifyouarerunning.NET
onaUNIX-basedmachineusingMono.  4.5MultipleRecipients1334.5.2MulticastAswithbroadcast,themaindifferencebetweenmulticastandunicastistheformofthe
address.Amulticastaddressidentiesasetofreceivers.ThedesignersofIPallocateda
rangeoftheaddressspace(from224.0.0.0to239.255.255.255)dedicatedtomulticast.
Withtheexceptionofafewreservedmulticastaddresses,asendercansenddatagrams
addressedtoanyaddressinthisrange.InC#,multicastapplicationsgenerallycommu-
nicateusinganinstanceof
Socket
or
UdpClient
.Itisimportanttounderstandthata
multicastsocketisactuallyaUDPsocketwithsomeextramulticast-specicattributes
thatcanbecontrolled.Ournextexampleimplementsthemulticastversionof
SendUdp.cs
(seepage82).Firstweshowthecodeforthehelperclass
MCIPAddress.cs
,whichallows
ustovalidatemulticastIPaddresses.
MCIPAddress.cs 0
usingSystem;//ForString
1
2
publicclassMCIPAddress{
3
publicstaticBooleanisValid(Stringip){
4
try{
5
intoctet1=Int32.Parse(ip.Split(newChar[]{.},4)[0]);
6
if((octet1>=224)&&(octet1<=239))returntrue;
7
}catch(Exception){}
8
returnfalse;
9
}
10
} MCIPAddress.cs
The
MCIPAddress
classhasastatic
isValid()
methodthatsimplyvalidatesthatthe
stringdotted-quadnotationIPpassedtoitisinthevalidrange.Wesimplyisolatetherst
octetoftheIPaddress,convertittoaninteger,andvalidateitsvalue.
SendUDPMulticast.cs 0
usingSystem;//ForInt32,ArgumentException
1
usingSystem.Net;//ForIPAddress,IPEndpoint
2
usingSystem.Net.Sockets;//ForSocketandassociatedclasses
3
4
publicclassSendUdpMulticast{
5
6
publicstaticvoidMain(string[]args){
7   4.5MultipleRecipients135Theonlysignicantdifferencesbetweenourunicastandmulticastsendersarethat
(1)weverifythatthegivenaddressismulticast,and(2)wesettheinitialTimeToLive
(TTL)valueforthemulticastdatagram.EveryIPdatagramcontainsaTTL,initializedto
somedefaultvalueanddecremented(usuallybyone)byeachrouterthatforwardsthe
packet.WhentheTTLreacheszero,thepacketisdiscarded.Bysettingtheinitialvalue
oftheTTL,welimitthedistancethatapacketcantravelfromthesender.3Forthe
Socket
classtheTTLissetusingthe
SetSocketOption()
methodwiththe
SocketOption-
Name.MulticastTimeToLive
option.The
UdpClient
classcansettheTTLbycallingthe
JoinMulticastGroup()
methodwiththeoptionalTTLargument(thisisaslightlyoddAPI,
sincejoiningmulticastgroupsisreallyonlyrequiredforreceiving,notsending).
Unlikebroadcast,wherereceiversdonthavetodoanythingspecialtoreceivebroad-
castpackets,withmulticastthenetworkdeliversthemessageonlytoaspecicsetof
hosts,namelythosethathaveindicatedadesiretoreceivethem.Thissetofreceivers,
calleda
multicastgroup
,isidentiedbyasharedmulticast(orgroup)address.Receivers
needsomemechanismtonotifythenetworkoftheirinterestinreceivingdatasenttoa
particularmulticastaddress,sothatthenetworkcanforwardpacketstothem.Thisnoti-
cationiscalled
joiningagroup
or
addingamembership
.Tostoppacketsfromagroup
beingdelivered,acorrespondingnoticationtoleavethegroupor
dropthemembership
is
sent.Closingasocketimplicitlycausesjoinedgroupstobeleft(providednoothersocket
isstillamemberofthegroup).Thegroupnoticationsareaccomplishedwiththe
Socket
classbyusingthe
SetSocketOption()
methodwiththe
SocketOptionName.AddMembership
and
SocketOptionName.DropMembership
options.Theargumenttothe
SetSocketOption()
methodisaninstanceof
MulticastOption
,whichcontainstheIPaddressofthemulticast
grouptoaddordrop.The
UdpClient
classcanjoinmulticastgroupsusingthe
Join-
MulticastGroup()
methodanddropthemwiththe
DropMulticastGroup()
method.Our
multicastreceiverjoinsaspeciedgroup,receivesandprintsasinglemulticastmessage
fromthatgroup,leavesthegroup,andexits.
RecvUdpMulticast.cs 0
usingSystem;//ForConsole,Int32,ArgumentException
1
usingSystem.Net;//ForIPAddress,EndPoinit,IPEndPoint
2
usingSystem.Net.Sockets;//ForSocketandassociatedclasses
3
4
publicclassRecvUdpMulticast{
5
6
publicstaticvoidMain(string[]args){ 3TherulesformulticastTTLareactuallynotquitesosimple.Itisnotnecessarilythecasethata
packetwithTT
L=4cantravelfourhopsfromthesender;however,itwillnottravel
more
thanfour
hops.  136Chapter4:BeyondtheBasics7
8
if(args.Length!=2)//Testforcorrect#ofargs
9
thrownewArgumentException("Parameter(s):<MulticastAddr><Port>");
10
11
IPAddressaddress=IPAddress.Parse(args[0]);//Multicastaddress
12
13
if(!MCIPAddress.isValid(args[0]))
14
thrownewArgumentException("ValidMCaddr:224.0.0.0-239.255.255.255");
15
16
intport=Int32.Parse(args[1]);//Multicastport
17
18
Socketsock=newSocket(AddressFamily.InterNetwork,SocketType.Dgram,
19
ProtocolType.Udp);//Multicastreceivingsocket
20
21
//Setthereuseaddressoption
22
sock.SetSocketOption(SocketOptionLevel.Socket,
23
SocketOptionName.ReuseAddress,1);
24
25
//CreateanIPEndPointandbindtoit
26
IPEndPointipep=newIPEndPoint(IPAddress.Any,port);
27
sock.Bind(ipep);
28
29
//Addmembershipinthemulticastgroup
30
sock.SetSocketOption(SocketOptionLevel.IP,
31
SocketOptionName.AddMembership,
32
newMulticastOption(address,IPAddress.Any));
33
34
IPEndPointreceivePoint=newIPEndPoint(IPAddress.Any,0);
35
EndPointtempReceivePoint=(EndPoint)receivePoint;
36
37
//Createandreceiveadatagram
38
byte[]packet=newbyte[ItemQuoteTextConst.MAX_WIRE_LENGTH];
39
intlength=sock.ReceiveFrom(packet,0,ItemQuoteTextConst.MAX_WIRE_LENGTH,
40
SocketFlags.None,reftempReceivePoint);
41
42
ItemQuoteDecoderTextdecoder=newItemQuoteDecoderText();//Textdecoding
43
ItemQuotequote=decoder.decode(packet);
44
Console.WriteLine(quote);
45
46
//Dropmembershipinthemulticastgroup
47
sock.SetSocketOption(SocketOptionLevel.IP,
48
SocketOptionName.DropMembership,
49
newMulticastOption(address,IPAddress.Any));  4.5MultipleRecipients13750
sock.Close();
51
}
52
} RecvUdpMulticast.cs
Thetwosignicantdifferencesbetweenourmulticastandunicastreceiversisthat
themulticastreceivermustjointhemulticastgroupbysupplyingthedesiredmulticast
addressandsettheaddressreuseoption.Thesettingoftheaddressreuseoptionis
optional,butwithoutityouwillbeunabletohavetwosimultaneousmulticastreceivers
onthesamehost.
Multicastdatagramscan,infact,besentfroma
Socket
or
UdpClient
bysimplyusing
amulticastaddress.InthiscasetheTTLdefaultsto1.Youcantestthisbyusing
SendUdp.cs
(seepage82)tosendtothemulticastreceiver.Amulticastreceiver,ontheotherhand,
must
usemulticast-speciccodeinordertojointhemulticastgroup.
Thedecisiontousebroadcastormulticastdependsonseveralfactors,including
thenetworklocationofreceiversandtheknowledgeofthecommunicatingparties.The
scopeofabroadcastontheInternetisrestrictedtoalocalbroadcastnetwork,placing
severerestrictionsonthelocationofthebroadcastreceivers.Multicastcommunication
mayincludereceiversanywhereinthenetwork,4somulticasthastheadvantagethatitcan
coveradistributedsetofreceivers.ThedisadvantageofIPmulticastisthatreceiversmust
knowtheaddressofamulticastgrouptojoin.Knowledgeofanaddressisnotrequired
toreceivebroadcast.Insomecontexts,thismakesbroadcastabettermechanismthan
multicastfordiscovery.Allhostscanreceivebroadcastbydefault,soitissimpletoask
allhostsonasinglenetworkaquestionlikeWherestheprinter?
UDPunicast,multicast,andbroadcastareallimplementedusinganunderlyingUDP
socket.ThesemanticsofmostimplementationsaresuchthataUDPdatagramwillbe
deliveredtoallsocketsboundtothedestinationportofthepacket.Thatis,aUDP
Socket
or
UdpClient
instanceboundtoalocalportX(withlocaladdressnotspecied,i.e.,an
IPAddress.Any
wildcard),onahostwithaddressYwillreceiveanyUDPdatagramdestined
forportXthatis(1)unicastwithdestinationaddressY,(2)multicasttoagroupthat
any
applicationonYhasjoined,or(3)broadcastwhereitcanreachhostY.Areceivercan
use
Connect()
tolimitthedatagramsourceaddressandport.Also,aunicastUDPsocket
instancecanspecifythelocalunicastaddress,whichpreventsdeliveryofmulticastand
broadcastpackets.SeeSection5.5fordetailsondatagramdemultiplexing.Formoredetails
onimplementingmulticastapplications,seethe
MulticastSockets
bookinthePractical
Guideseries[26]. 4Atthetimeofwritingofthisbook,thereareseverelimitationsonwhocanreceivemulticasttrafc
ontheInternet;however,multicastavailabilityshouldimproveovertime.Multicastshouldworkif
thesenderandreceiversareonthesameLANsegment.   4.6ClosingConnections139closefromtheclient,itimmediatelycloses.Ineffect,theclientcloseindicatesthatthe
communicationiscompleted.BasicHTTPworksthesameway,exceptthattheserveris
theterminator.6Letsconsideradifferentprotocol.Supposeyouwantatranscodingserverthattakes
astreamofbytesinUnicode,convertsthemtoUTF-8,andsendstheUTF-8streamback
totheclient.Whichendpointshouldclosetheconnection?Sincethestreamofbytesfrom
theclientisarbitrarilylong,theclientneedstoclosetheconnectionsothattheserver
knowswhenthestreamofbytestobeencodedends.Whenshouldtheclientcall
Close()
?
Iftheclientcalls
Close()
onthesocketimmediatelyafteritsendsthelastbyteofdata,it
willnotbeabletoreceivethelastbytesofUTF-8data.Perhapstheclientcouldwaituntil
itreceivesalloftheUTF-8databeforeitcloses,astheechoprotocoldoes.Unfortunately,
neithertheservernortheclientknowshowmanybytestoexpectsinceUTF-8encodingis
ofvariablelength(seeSection3.1.1),sothiswillnotworkeither.Whatisneededisaway
totelltheotherendoftheconnectionIamthroughsending,withoutlosingtheability
toreceive.
Fortunately,socketsprovideawaytodothis.The
Shutdown()
methodof
Socket
allowstheI/Ostreamstobeclosedindependently.The
Shutdown()
methodtakesasan
argumentaninstanceofthe
SocketShutdown
enumeration,whichcanhavethevalues
Send
,
Receive
,or
Both
.Afteracallto
Shutdown(SocketShutdown.Receive)
,thesocketcanno
longerreceiveinput.Anyundelivereddataissilentlydiscarded,andanyattempttoread
fromthesocketwillgeneratea
SocketException
.After
Shutdown(SocketShutdown.Send)
is
calledona
Socket
,nomoredatamaybesentonthesocket.Attemptstowritetothestream
alsothrowa
SocketException
.Anydatawrittenbeforethecallto
Shutdown(SocketShut-
down.Send)
maybereadbytheremotesocket.Afterthis,areadontheinputstreamof
theremotesocketwillreturn
0
.Anapplicationcalling
Shutdown(SocketShutdown.Send)
cancontinuetoreadfromthesocketand,similarly,datacanbewrittenaftercalling
Shutdown(SocketShutdown.Receive)
.
IntheTranscodeprotocol(seeFigure4.3),theclientwritestheUnicodebytes,clos-
ingtheoutputstreamusing
Shutdown(SocketShutdown.Send)
whennishedsending,and
readstheUTF-8bytestreamfromtheserver.TheserverrepeatedlyreadstheUnicode
dataandwritestheUTF-8datauntiltheclientperformsashutdown,causingtheserver
readtoreturn
0
,indicatinganend-of-stream.Theserverthenclosestheconnection
andexits.Aftertheclientcalls
Shutdown(SocketShutdown.Send)
,itneedstoreadany
remainingUTF-8bytesfromtheserver.
Ourclient,
TranscodeClient.cs
,implementstheclientsideoftheTranscodepro-
tocol.TheUnicodebytesarereadfromthelespeciedonthecommandline,andthe
UTF-8bytesarewrittentoanewle.IftheUnicodelenameis
data
,theUTF-8le
nameis
data.ut8
.Notethatthisimplementationworksforsmallles,butthatthereis
aawthatcausesdeadlockforlargeles.(Wediscussandcorrectthisshortcomingin
Section5.2.) 6MoresophisticatedfeaturesofHTTP,suchaspersistentconnections,arequitecommontodayand
operatedifferently.  140Chapter4:BeyondtheBasics TranscodeServer TranscodeClient <unencoded bytes>
<unencoded bytes>
<encoded bytes>
Shutdown
<encoded bytes>
Closed Figure4.3:
TranscodeServerprotocoltermination.Aswementionedearlier,someadvancedfunctionalityisavailableonlyinthe
Socket
classandnotthehigherlevelsocketclasseslike
TcpClient
.The
Shutdown()
methodof
the
Socket
classisanexampleofafeaturethatisnotdirectlyaccessibleinthe
TcpClient
class.However,the
TcpClient
classdoesgiveusaccesstoitsunderlying
Socket
instance
throughitsprotected
Socket
property.Sincethepropertyisprotected,itcanonlybe
accessedbyextendingtheoriginal
TcpClient
class.Wehavedecidedtoillustratethis
techniqueherebyextendingthe
TcpClient
classtoaccessthe
Socket
method
Shutdown()
.
Wehavecreatedthe
TcpClientShutdown
classinordertodothis.
TcpClientShutdown.cs 0
usingSystem;//ForString
1
usingSystem.Net;//ForIPEndPoint,EndPoint
2
usingSystem.Net.Sockets;//ForTcpClient,SocketShutdown
3
4
classTcpClientShutdown:TcpClient{
5
6
publicTcpClientShutdown():base(){}
7
publicTcpClientShutdown(IPEndPointlocalEP):base(localEP){}
8
publicTcpClientShutdown(Stringserver,intport):base(server,port){}
9
10
publicvoidShutdown(SocketShutdownss){
11
//InvoketheShutdownmethodontheunderlyingsocket
12
this.Client.Shutdown(ss);
13
}  4.6ClosingConnections14114
publicEndPointGetRemoteEndPoint(){
15
//ReturntheRemoteEndPointfromtheunderlyingsocket
16
returnthis.Client.RemoteEndPoint;
17
}
18
} TcpClientShutdown.cs
1.
Extendthe
TcpClient
class:
line4
2.
Extendtheconstructors:
lines68
Extendingtheconstructorswiththe
base
keywordisrequired.Additionalconstructor
logiccanalsobeaddedbutisnotrequired.
3.
Shutdown()
:
lines1013
Thenewuser-dened
Shutdown()
methodinvokesthe
Socket
methodofthesame
namebyusingthe
Client
property.
4.
GetRemoteEndPoint()
:
lines1417
Thenewuser-dened
GetRemoteEndPoint()
methodretrievesthe
RemoteEndPoint
propertyfromtheunderlying
Socket
byusingthe
Client
property.
TranscodeClient.cs 0
usingSystem;//ForString,Int32,Console,ArgumentException
1
usingSystem.IO;//ForFileStream
2
usingSystem.Net.Sockets;//ForNetworkStream,TcpClient
3
4
publicclassTranscodeClient{
5
6
privateconstintBUFSIZE=256;//Sizeofreadbuffer
7
8
privatestaticNetworkStreamnetStream;
9
privatestaticFileStreamfileIn;
10
privatestaticTcpClientShutdownclient;
11
12
publicstaticvoidMain(string[]args){
13
14
if(args.Length!=3)//Testforcorrect#ofargs
15
thrownewArgumentException("Parameter(s):<Server><Port><File>");
16
17
Stringserver=args[0];//ServernameorIPaddress
18
intport=Int32.Parse(args[1]);//Serverport
19
Stringfilename=args[2];//Filetoreaddatafrom   4.6ClosingConnections1431.
Applicationsetupandparameterparsing:
lines1419
2.
Createsocketandopenles:
lines2130
Usingthe
TcpClientShutdown
classtoallowusaccesstotheunderlying
Socket
methodsandproperties.
3.
Invoke
sendBytes()
totransmitbytes:
line31
4.
ReceivetheUTF-8datastream:
lines3339
ThewhileloopreceivestheUTF-8datastreamandwritesthebytestotheoutputle
untilanend-of-streamissignaledbya
0
from
Read()
.
5.
Closesocketandstreams:
lines4346
6.
sendBytes()
:
lines4958
GivenasocketconnectedtoaTranscodeserverandtheleinputstream,readallof
theUnicodebytesfromtheleandwritethemtothesocketnetworkstream.Setupinputlebufferedstream:
lines5052SendUnicodebytestoTranscodeserver:
lines5356
Thewhileloopreadsfromtheinputstream(inthiscasefromabufferedlestream)
andrepeatsthebytestothesocketnetworkstreamuntilend-of-le,indicatedby
0
from
Read()
.EachwriteisindicatedbyaWprintedtotheconsole.Shutdownthesocketoutputstream:
line57
Afterreadingandsendingallofthebytesfromtheinputle,shutdowntheoutput
stream,notifyingtheserverthattheclientisnishedsending.Theclosewillcause
a
0
returnfrom
Read()
ontheserver.
ToimplementtheTranscodeserver,wesimplywriteaserver-sideconversionpro-
tocolusingthestaticUTF-8
Encoding
class.TheserverreceivestheUnicodebytesfrom
theclient,convertsthemtoUTF-8,andwritesthembacktotheclient.
TranscodeServer.cs 0
usingSystem;//ForString,Int32,Console
1
usingSystem.Text;//ForEncoding
2
usingSystem.Net;//ForIPAddress
3
usingSystem.Net.Sockets;//ForTcpListener,TcpClient,NetworkStream
4
5
publicclassTranscodeServer{
6
7
publicstaticreadonlyintBUFSIZE=1024;//Sizeofreadbuffer
8
9
publicstaticvoidMain(string[]args){
10
11
if(args.Length!=1)//Testforcorrect#ofargs
12
thrownewArgumentException("Parameter(s):<Port>");    146Chapter4:BeyondtheBasicsInadditiontothesefacilities,.NETprovidesseveralmechanismsthatoperateontopof
TCPorUDPandattempttohidethecomplexityofprotocoldevelopment.Forexample,
Remoting
allows.NETobjectsondifferenthoststoinvokeoneanothersmethodsasif
theobjectsallresidelocally.Manyotherstandard.NETlibrarymechanismsexist,pro-
vidinganamazingrangeofservices.Thesemechanismsarebeyondthescopeofthis
book;however,weencourageyoutolookatthetheMicrosoftDeveloperNetworksiteat
www.msdn.microsoft.com
fordescriptionsandcodeexamplesforsomeoftheselibraries.4.8Exercises1.Statepreciselytheconditionsunderwhichaniterativeserverispreferabletoa
multiprocessingserver.
2.WouldyoueverneedtoimplementatimeoutinaclientorserverthatusesTCP?
3.Howcanyoudeterminetheminimumandmaximumallowablesizesforasockets
sendandreceivebuffers?Determinetheminimumsforyoursystem.
4.Writeaniterativedispatcherusingthedispatchingframeworkfromthischapter.
5.Writetheserversideofarandom-numberserverusingtheprotocolfactoryframe-
workfromthischapter.Theclientwillconnectandsendtheupperbound,
B
,onthe
randomnumbertotheserver.Theservershouldreturnarandomnumberbetween
1
and
B
,inclusive.Allnumbersshouldbespeciedinbinaryformatas4-byte,
twos-complement,big-endianintegers.
6.Modify
TcpEchoClient.cs
sothatitclosesitsoutputsideoftheconnectionbefore
attemptingtoreceiveanyechoeddata.
7.Modify
TcpEchoServerAsync.cs
sothatitpollsfortheaccepttobecompletedafter
eachsleepinthe
doOtherStuff()
method(insteadofwaitinguntileachmethodcall
completes).
8.ModifysomeoftheexistingprogramstoimplementasynchronousDNSlookupsand
asynchronous
Connect()
.  chapter5UndertheHoodSomeofthesubtletiesofnetworkprogrammingaredifculttograspwithoutsome
understandingofthedatastructuresassociatedwiththesocketimplementationandcer-
taindetailsofhowtheunderlyingprotocolswork.ThisisespeciallytrueofTCPsockets
(i.e.,instancesof
TcpClient
,
TcpListener
,oraTCPinstanceof
Socket
).Thischapter
describessomeofwhatgoesonintheruntimeimplementationwhenyoucreateanduse
aninstanceof
Socket
oroneofthehigherlevelTCPclassesthatutilizesockets.Unless
specicallystatedotherwise,referencestothebehaviorofthe
Socket
classinthischapter
alsoapplyto
TcpClient
and
TcpListener
classes,whichcreate
Socket
instancesunderthe
hood.(TheinitialdiscussionandSection5.2applyaswellto
UdpClient
).However,most
ofthischapterfocusesonTCPsockets,thatis,aTCPinstanceof
Socket
(whetherused
directlyorindirectlyviaahigherlevelclass).Pleasenotethatthisdescriptioncoversonly
thenormalsequenceofeventsandglossesovermanydetails.Nevertheless,webelieve
thateventhisbasiclevelofunderstandingishelpful.Readerswhowantthefullstoryare
referredtotheTCPspecication[12]ortooneofthemorecomprehensivetreatisesonthe
subject[3,20,22].
Figure5.1isasimpliedviewofsomeoftheinformationassociatedwitha
Socket
instance.Theclassesaresupportedbyanunderlyingimplementationthatisprovidedby
theCLRand/ortheplatformonwhichitisrunning(i.e.,thesocketlayeroftheWindows
operatingsystem).OperationsontheC#objectsaretranslatedintomanipulationsofthis
underlyingabstraction.Inthischapter,
Socket
refersgenericallytooneoftheclasses
inFigure5.1,whilesocketreferstotheunderlyingabstraction,whetheritisprovided
byanunderlyingOSortheCLRimplementationitself(e.g.,inanembeddedsystem).Itis
importanttonotethatother(possiblynon-C#/.NET)programsrunningonthesamehost
maybeusingthenetworkviatheunderlyingsocketabstractionandthuscompetingwith
C#
Socket
instancesforresourcessuchasports.147  148Chapter5:UndertheHood Closed Local port
Local IP
Remote port
Remote IP Underlying socket structureNetworkStream / byte array
NetworkStream / byte array SendQ RecvQ To network Socket, TcpClient,
TcpListener, or
UdpClient instance Application program
Underlying implementation Figure5.1:
Datastructuresassociatedwithasocket.  5.1BufferingandTCP149Bysocketstructureherewemeanthecollectionofdatastructuresintheunderlying
implementation(ofboththeCLRandTCP/IP,butprimarilythelatter)thatcontainthe
informationassociatedwithaparticular
Socket
instance.Forexample,thesocketstructure
contains,amongotherinformation:ThelocalandremoteInternetaddressesandportnumbersassociatedwiththesocket.
ThelocalInternetaddress(labeledLocalIPinFigure5.1)isoneofthoseassigned
tothelocalhost;thelocalportissetat
Socket
creationtime.Theremoteaddressand
portidentifytheremotesocket,ifany,towhichthelocalsocketisconnected.We
willsaymoreabouthowandwhenthesevaluesaredeterminedshortly(Section5.5
containsaconcisesummary).AFIFOqueueofreceiveddatawaitingtobedeliveredandaqueuefordatawaiting
tobetransmitted.ForaTCPsocket,additionalprotocolstateinformationrelevanttotheopeningand
closingTCPhandshakes.InFigure5.1,thestateisClosed;allsocketsstartoutin
theClosedstate.
Knowingthatthesedatastructuresexistandhowtheyareaffectedbytheunderlying
protocolsisusefulbecausetheycontrolvariousaspectsofthebehaviorofthevarious
Socket
objects.Forexample,becauseTCPprovidesa
reliable
byte-streamservice,acopy
ofanydatawrittentoa
TcpClient
s
NetworkStream
mustbekeptuntilithasbeensuccess-
fullyreceivedattheotherendoftheconnection.Writingdatatothenetworkstreamdoes
not
implythatthedatahasactuallybeensent,onlythatithasbeencopiedintothelocal
buffer.Even
Flush()
inga
NetworkStream
doesntguaranteethatanythinggoesoverthe
wireimmediately.(Thisisalsotrueforabytearraysenttoa
Socket
instance.)Moreover,
thenatureofthebyte-streamservicemeansthatmessageboundariesare
not
preservedin
thenetworkstream.AswesawinSection3.3,thiscomplicatestheprocessofreceivingand
parsingforsomeprotocols.Ontheotherhand,witha
UdpClient
,packetsare
not
buffered
forretransmission,andbythetimeacalltothe
Send()
methodreturns,thedatahasbeen
giventothenetworksubsystemfortransmission.Ifthenetworksubsystemcannothandle
themessageforsomereason,thepacketissilentlydropped(butthisisrare).
Thenextthreesectionsdealwithsomeofthesubtletiesofsendingandreceivingwith
TCPsbyte-streamservice.Then,Section5.4considerstheconnectionestablishmentand
terminationoftheTCPprotocol.Finally,Section5.5discussestheprocessofmatching
incomingpacketstosocketsandtherulesaboutbindingtoportnumbers.5.1BufferingandTCPAsaprogrammer,themostimportantthingtorememberwhenusingaTCPsocketisthis:
Youcannotassumeanycorrespondencebetweenwritestotheoutputnetwork
streamatoneendoftheconnectionandreadsfromtheinputnetworkstreamatthe
otherend.  150Chapter5:UndertheHoodInparticular,datapassedinasingleinvocationoftheoutputnetworkstreams
Write()
methodatthesendercanbespreadacrossmultipleinvocationsoftheinputnetwork
streams
Read()
methodattheotherend;andasingle
Read()
mayreturndatapassedin
multiple
Write()
s.Toseethis,consideraprogramthatdoesthefollowing:byte[]buffer0=newbyte[1000];
byte[]buffer1=newbyte[2000];
byte[]buffer2=newbyte[5000];
:
:
:
TcpClientclient=newTcpClient();
client.Connect(destAddr,destPort);
NetworkStreamout=client.GetStream();
:
:
:
out.Write(buffer0);
:
:
:
out.Write(buffer1);
:
:
:
out.Write(buffer2);
:
:
:
out.Close();wheretheellipsesrepresentcodethatsetsupthedatainthebuffersbutcontainsno
othercallsto
out.Write()
.Throughoutthisdiscussion,inreferstotheincoming
Net-
workStream
ofthereceivers
Socket
,andoutreferstotheoutgoing
NetworkStream
ofthe
senders
Socket
.
ThisTCPconnectiontransfers8000bytestothereceiver.Thewaythese8000bytes
aregroupedfordeliveryatthereceivingendoftheconnectiondependsonthetiming
betweenthe
out.Write()
sand
in.Read()
satthetwoendsoftheconnectionaswellas
thesizeofthebuffersprovidedtothe
in.Read()
calls.
Wecanthinkofthesequenceofallbytessent(inonedirection)onaTCPconnection
uptoaparticularinstantintimeasbeingdividedintothreeFIFOqueues:
1.
SendQ
:Bytesbufferedintheunderlyingimplementationatthesenderthathave
beenwrittentotheoutputnetworkstreambutnotyetsuccessfullytransmittedto
thereceivinghost.
2.
RecvQ
:Bytesbufferedintheunderlyingimplementationatthereceiverwaitingto
bedeliveredtothereceivingprogramthatis,readfromtheinputnetworkstream.
3.
Delivered
:Bytesalreadyreadfromtheinputnetworkstreambythereceiver.
Acallto
out.Write()
atthesenderappendsbytesto
SendQ
.TheTCPprotocolisresponsi-
bleformovingbytesinorderfrom
SendQ
to
RecvQ
.Itisimportanttorealizethatthis
transfercannotbecontrolledordirectlyobservedbytheuserprogram,andthatitoccurs
inchunkswhosesizesaremoreorlessindependentofthesizeofthebufferspassed  5.1BufferingandTCP151in
Write()
s.Bytesaremovedfrom
RecvQ
to
Delivered
astheyarereadfromthe
Socket
s
NetworkStream
(orbytearray)bythereceivingprogram;thesizeofthetransferredchunks
dependsontheamountofdatain
RecvQ
andthesizeofthebuffergivento
Read()
.
Figure5.2showsonepossiblestateofthethreequeues
after
thethree
out.Write()
s
intheexampleabove,but
before
any
in.Read()
sattheotherend.Thedifferentshad-
ingpatternsdenotebytespassedinthethreedifferentinvocationsof
Write()
shownin
Figure5.2.
Nowsupposethereceivercalls
Read()
withabytearrayofsize2000.The
Read()
callwillmoveallofthe1500bytespresentinthewaiting-for-delivery(
RecvQ
)queueinto
thebytearrayandreturnthevalue1500.Notethatthisdataincludesbytespassedinboth
therstandsecondcallsto
Write()
.Atsometimelater,afterTCPhascompletedtransfer
ofmoredata,thethreepartitionsmightbeinthestateshowninFigure5.3.
Ifthereceivernowcalls
Read()
withabufferofsize4000,thatmanybyteswillbe
movedfromthewaiting-for-delivery(
RecvQ
)queuetothealready-delivered(
Delivered
) 2
3
send() 1
2
TCP protocol
Receiving implementationReceiving program
6500 bytes1500 bytes
SendQRecvQ recv()
0 bytes
Delivered Sending implementation 1
2
3
First write (1000 bytes)
Second write (2000 bytes)
Third write (5000 bytes) Figure5.2:
Stateofthethreequeuesafterthreewrites. 1
2 2
3
3
Receiving implementationReceiving program
500 bytes6000 bytes
SendQRecvQ
1500 bytes
Delivered Sending implementation 1
2
3
First write (1000 bytes)
Second write (2000 bytes)
Third write (5000 bytes) Figure5.3:
Afterrst
read()
.  152Chapter5:UndertheHood 1
2 3
3
3
Receiving implementationReceiving program
500 bytes2000 bytes
SendQRecvQ
5500 bytes
Delivered Sending implementation 1
2
3
First write (1000 bytes)
Second write (2000 bytes)
Third write (5000 bytes) Figure5.4:
Afteranother
Read()
.queue;thisincludestheremaining1500bytesfromthesecond
Write()
,plustherst
2500bytesfromthethird
Write()
.TheresultingstateofthequeuesisshowninFigure5.4.
Thenumberofbytesreturnedbythenextcallto
Read()
dependsonthesizeof
thebufferandthetimingofthetransferofdataoverthenetworkfromthesend-side
socket/TCPimplementationtothereceive-sideimplementation.Themovementofdata
fromthe
SendQ
tothe
RecvQ
bufferhasimportantimplicationsforthedesignofappli-
cationprotocols.Wehavealreadyencounteredtheneedtoparsemessagesastheyare
receivedviaa
Socket
whenin-banddelimitersareusedforframing(seeSection3.3).In
thefollowingsections,weconsidertwomoresubtleramications.5.2BufferDeadlockApplicationprotocolshavetobedesignedwithsomecaretoavoid
deadlock
thatis,a
stateinwhicheachpeerisblockedwaitingfortheothertodosomething.Forexample,
itisprettyobviousthatifbothclientandservertrytodoablockingreceiveimmediately
afteraconnectionisestablished,deadlockwillresult.Deadlockcanalsooccurinless
immediateways.
Thebuffers
SendQ
and
RecvQ
intheimplementationhavelimitsontheircapacity.
Althoughtheactualamountofmemorytheyusemaygrowandshrinkdynamically,ahard
limitisnecessarytopreventallofthesystemsmemoryfrombeinggobbledupbyasingle
TCPconnectionundercontrolofamisbehavingprogram.Becausethesebuffersarenite,
theycanllup,anditisthisfact,coupledwithTCPs
owcontrol
mechanism,thatleads
tothepossibilityofanotherformofdeadlock.
Once
RecvQ
isfull,theTCPowcontrolmechanismkicksinandpreventsthetransfer
ofanybytesfromthesendinghosts
SendQ
,untilspacebecomesavailablein
RecvQ
asa
resultofthereceivercallingtheinputnetworkstreams
Read()
method.(Thepurposeof
theowcontrolmechanismistoensurethatthesenderdoesnottransmitmoredatathan
thereceivingsystemcanhandle.)Asendingprogramcancontinuetocallsenduntil
SendQ  5.2BufferDeadlock153isfull;however,once
SendQ
isfull,acallto
out.Write()
willblockuntilspacebecomes
available,thatis,untilsomebytesaretransferredtothereceivingsockets
RecvQ
.If
RecvQ
isalsofull,everythingstopsuntilthereceivingprogramcalls
in.Read()
andsomebytes
aretransferredto
Delivered
.
Letsassumethatthesizesof
SendQ
and
RecvQ
are
SQS
and
RQS
,respectively.
A
write()
callwithabytearrayofsize
n
suchthat
n>
SQS
willnotreturnuntilatleast
n

SQS
byteshavebeentransferredto
RecvQ
atthereceivinghost.If
n
exceeds(
SQS
+
RQS
),
Write()
cannotreturnuntilafterthereceivingprogramhasreadatleast
n

(
SQS
+
RQS
)
bytesfromtheinputnetworkstream.Ifthereceivingprogramdoesnotcall
Read()
,a
large
Send()
maynotcompletesuccessfully.Inparticular,ifbothendsoftheconnec-
tioninvoketheirrespectiveoutputnetworkstreams
Write()
methodsimultaneouslywith
buffersgreaterthan
SQS
+
RQS
,deadlockwillresult:neitherwritewillevercomplete,and
bothprogramswillremainblockedforever.
Asaconcreteexample,consideraconnectionbetweenaprogramonHostAand
aprogramonHostB.Assume
SQS
and
RQS
are500atbothAandB.Figure5.5shows
whathappenswhenbothprogramstrytosend1500bytesatthesametime.Therst500
bytesofdataintheprogramatHostAhavebeentransferredtotheotherend;another
500byteshavebeencopiedinto
SendQ
atHostA.Theremaining500bytescannotbe
sentandtherefore
out.Write()
willnotreturnuntilspacefreesupin
RecvQ
atHostB.
Unfortunately,thesamesituationholdsintheprogramatHostB.Therefore,neither
programs
Write()
callwillevercomplete.
Themoralofthestory:Designtheprotocolcarefullytoavoidsendinglargequantities
ofdatasimultaneouslyinbothdirections.
Canthisreallyhappen?LetsreviewtheTranscodeconversionprotocolexamplein
Section4.6.TryrunningtheTranscodeclientwithalargele.TheprecisedenitionofTo be sent To be sent
SendQ SendQ Delivered
Program
RecvQ RecvQDelivered Host A Host B
send(s,buffer,1500,0);send(s,buffer,1500,0); Implementation Program Implementation Figure5.5:
Deadlockduetosimultaneous
Write()
stooutputnetworkstreamsatoppositeendsof
theconnection.  154Chapter5:UndertheHoodlargeheredependsonyoursystem,butalethatexceeds2MBshoulddonicely.Foreach
read/write,theclientprintsanR/Wtotheconsole.Ifboththeversionsoftheleare
largeenough(theUTF-8versionwillbeataminimumhalfthesizeoftheUnicodebytes
sentbytheclient),yourclientwillprintaseriesofWsandthenstopwithoutterminating
orprintinganyRs.
Whydoesthishappen?Theprogram
TranscodeClient.cs
sends
all
oftheUnicode
datatotheserver
before
itattemptstoreadanythingfromtheencodedstream.Theserver,
ontheotherhand,simplyreadstheUnicodebytesequenceandwritestheUTF-8sequence
backtotheclient.Considerthecasewhere
SendQ
and
RecvQ
forbothclientandserver
hold500byteseachandtheclientsendsa10,000-byteUnicodele.Letsassumethat
thelehasnocharactersrequiringdoublebyterepresentation,soweknowwewillbe
sendinghalfthenumberofbytesback.Aftertheclientsends2000bytes,theserverwill
eventuallyhavereadthemallandsentback1000bytes,andtheclients
RecvQ
andthe
servers
SendQ
willbothbefull.Aftertheclientsendsanother1000bytesandtheserver
readsthem,theserverssubsequentattempttowritewillblock.Whentheclientsendsthe
next1000bytes,theclients
SendQ
andtheservers
RecvQ
willbothllup.Thenextclient
writewillblock,creatingdeadlock.
Howdowesolvethisproblem?Theeasiestsolutionistoexecutetheclientwriting
andreadingloopinseparatethreads.OnethreadrepeatedlyreadsabufferofUnicode
bytesfromaleandsendsthemtotheserveruntiltheendoftheleisreached,whereupon
itcalls
Shutdown(SocketShutdown.Send)
onthesocket.Theotherthreadrepeatedlyreads
abufferofUTF-8bytesfromtheserverandwritesthemtotheoutputle,untiltheinput
networkstreamends(i.e.,theserverclosesthesocket).Whenonethreadblocks,theother
threadcanproceedindependently.Wecaneasilymodifyourclienttofollowthisapproach
byputtingthecallto
SendBytes()
in
TranscodeClient.cs
insideathreadasfollows:Threadthread=newThread(newThreadStart(sendBytes));
thread.Start();See
TranscodeClientNoDeadlock.cs
onthebookswebsite(www.mkp.com/practical/
csharpsockets)forthecompleteexampleofsolvingthisproblemwiththreads.Canwe
alsosolvethisproblemwithoutusingthreads?Toguaranteedeadlockavoidanceina
singlethreadedsolution,weneednonblockingwrites.Nonblockingwritesareavailable
viathe
SocketBlocking
propertyorusingthe
SocketBeginSend()
/
EndSend()
methodsor
the
NetworkStreamBeginRead()
/
EndRead()
methods.5.3PerformanceImplicationsTheTCPimplementationsneedtocopyuserdatainto
SendQ
forpotentialretransmission
alsohasimplicationsforperformance.Inparticular,thesizesofthe
SendQ
and
RecvQ
buffersaffectthethroughputachievableoveraTCPconnection.Throughputrefersto
therateatwhichbytesofuserdatafromthesenderaremadeavailabletothereceiving
program;inprogramsthattransferalargeamountofdata,wewanttomaximizethisrate.  5.4TCPSocketLifeCycle155Intheabsenceofnetworkcapacityorotherlimitations,biggerbuffersgenerallyresultin
higherthroughput.
Thereasonforthishastodowiththecostoftransferringdataintoandoutofthe
buffersintheunderlyingimplementation.Ifyouwanttotransfer
n
bytesofdata(where
n
islarge),itisgenerallymuchmoreefcienttocall
Write()
oncewithabufferofsize
n
than
itistocallit
n
timeswithasinglebyte.1However,ifyoucall
Write()
withasizeparameter
thatismuchlargerthan
SQS
,thesystemhastotransferthedatafromtheuseraddress
spacein
SQS
-sizedchunks.Thatis,thesocketimplementationllsupthe
SendQ
buffer,
waitsfordatatobetransferredoutofitbytheTCPprotocol,rells
SendQ
,waitssome
more,andsoon.Eachtimethesocketimplementationhastowaitfordatatoberemoved
from
SendQ
,sometimeiswastedintheformofoverhead(acontextswitchoccurs).This
overheadiscomparabletothatincurredbyacompletelynewcallto
Write()
.Thus,the
effective
sizeofacallto
Write()
islimitedbytheactual
SQS
.Forreadingfromthe
Network-
Stream
/
Socket
,thesameprincipleapplies:howeverlargethebufferwegiveto
Read()
,it
willbecopiedoutinchunksnolargerthan
RQS
,withoverheadincurredbetweenchunks.
Ifyouarewritingaprogramforwhichthroughputisanimportantperformance
metric,youwillwanttochangethesendandreceivebuffersizesusingthe
Set-
SocketOption()
methodsof
Socket
with
SocketOptionName.SendBufferSize
and
Socket-
OptionName.ReceiveBufferSize
,orthe
SendBufferSize
and
ReceiveBufferSize()
public
propertiesof
TcpClient
.Althoughthereisalwaysasystem-imposedmaximumsizefor
eachbuffer,itistypicallysignicantlylargerthanthedefaultonmodernsystems.Remem-
berthattheseconsiderationsapplyonlyifyourprogramneedstosendanamountof
datasignicantlylargerthanthebuffersize,allatonce.Notealsothatthesefactorsmay
makelittledifferenceiftheprogramdealswithsomehigher-levelstreamderivedfromthe
Socket
sbasicnetworkstream(say,byusingittocreateaninstanceof
BufferedStream
or
BinaryWriter
),whichmayperformitsowninternalbufferingoraddotheroverhead.5.4TCPSocketLifeCycleWhenanewinstanceofthe
Socket
classisconnectedeitherviaoneofthe
Connect()
calls
orbycallingonethe
Accept()
methodsofa
Socket
or
TcpListener
itcanimmediately
beusedforsendingandreceivingdata.Thatis,whentheinstanceisreturned,itisalready
connectedtoaremotepeerandtheopeningTCPmessageexchange,orhandshake,has
beencompletedbytheimplementation.
Letusthereforeconsiderinmoredetailhowtheunderlyingstructuregetstoand
fromtheconnected,orEstablished,state;asyoullseelater(inSection5.4.2),these
detailsaffectthedenitionofreliabilityandtheabilitytocreatea
Socket
boundtoa
particularport. 1Thesamethinggenerallyappliestoreadingdatafromthe
Socket
,althoughcalling
Read()
/
Receive()
withalargerbufferdoesnotguaranteethatmoredatawillbereturned.  156Chapter5:UndertheHood5.4.1ConnectingTherelationshipbetweenaninvocationofaTCPclientconnection(whetherby
TcpClient
constructor,
TcpClient.Connect()
,or
Socket.Connect()
)andtheprotocoleventsasso-
ciatedwithconnectionestablishmentattheclientareillustratedinFigure5.6.Inthis
andtheremainingguresinthissection,thelargearrowsdepictexternaleventsthat
causetheunderlyingsocketstructurestochangestate.Eventsthatoccurintheapplica-
tionprogramthatis,methodcallsandreturnsareshownintheupperpartofthegure;
eventssuchasmessagearrivalsareshowninthelowerpartofthegure.Timeproceeds
lefttorightinthesegures.TheclientsInternetaddressisdepictedasA.B.C.D,whilethe
serversisW.X.Y.Z;theserversportnumberisQ.
Whentheclientcallsthe
TcpClient
constructorwiththeserversInternetaddress,
W.X.Y.Z,andport,Q,theunderlyingimplementationcreatesasocketinstance;itisinitially
intheClosedstate.Iftheclientdidnotspecifythelocaladdressandportnumberinthe
constructorcall,alocalportnumber(P),notalreadyinusebyanotherTCPsocket,ischosen
bytheimplementation.ThelocalInternetaddressisalsoassigned;ifnotexplicitlyspeci-
ed,theaddressofthenetworkinterfacethroughwhichpacketswillbesenttotheserver
isused.Theimplementationcopiesthelocalandremoteaddressesandportsintothe
underlyingsocketstructure,andinitiatestheTCPconnectionestablishmenthandshake.
TheTCPopeninghandshakeisknownasa
3-wayhandshake
becauseittypically
involvesthreemessages:aconnectionrequestfromclienttoserver,anacknowledgment
fromservertoclient,andanotheracknowledgmentfromclientbacktoserver.Theclient
TCPconsiderstheconnectiontobeestablishedassoonasitreceivestheacknowledgment
fromtheserver.Inthenormalcase,thishappensquickly.However,theInternetisabest-
effortnetwork,andeithertheclientsinitialmessageortheserversresponsecangetlost.
Forthisreason,theTCPimplementationretransmitshandshakemessagesmultipletimes,
atincreasingintervals.IftheclientTCPdoesnotreceivearesponsefromtheserverafter
sometime,it
timesout
andgivesup.Inthiscasetheconstructorthrowsa
SocketException
withthe
ErrorCode
propertysetto10060(connectiontimedout).Theconnectiontimeout
isgenerallylong(bydefault20secondsonMicrosoftWindows),andthusitcantakesome
timefora
TcpClient()
constructortofail.Iftheserverisnotacceptingconnectionssay,
ifthereisnoprogramassociatedwiththegivenportatthedestinationtheserver-side
TCPwillsendarejectionmessageinsteadofanacknowledgment,andtheconstructorwill
throwa
SocketException
almostimmediately,withthe
ErrorCode
propertysetto10061
(connectionrefused).
Thesequenceofeventsattheserversideisratherdifferent;wedescribeitin
Figures5.7,5.8,and5.9.Theserverrstcreatesaninstanceof
TcpListener
/
Socket
asso-
ciatedwithitswell-knownport(here,Q).Thesocketimplementationcreatesanunderlying
socketstructureforthenew
TcpListener
/
Socket
instance,andllsinQasthelocalport
andthespecial
wildcardaddress
(

inthegures,
IPAddress.Any
inC#)forthelocal
IPaddress.(TheservermayalsospecifyalocalIPaddressintheconstructor,buttypically
itdoesnot.IncasetheserverhosthasmorethanoneIPaddress,notspecifyingthelocal
addressallowsthesockettoreceiveconnectionsaddressedtoanyoftheserverhosts  5.4TCPSocketLifeCycle157Send
connection
request to
server
Create
structure Blocks
Call TcpClient.Connect(W.X.Y.Z, Q) Application
program
Underlying
implementation Local port Closed Remote port
Local IP
Remote IP Local port Connecting P W.X.Y.Z Q A.B.C.D
Remote port
Local IP
Remote IP Local port Established P W.X.Y.Z Q A.B.C.D
Remote port
Local IP
Remote IPFill in
local and
remote
address Handshake
completes Call Socket.Connect(W.X.Y.Z, Q)
Call new TcpClient(W.X.Y.Z, Q) Returns instance Figure5.6:
Client-sideconnectionestablishment.  158Chapter5:UndertheHoodCreate
structure Returns instance
Call TcpListener
(IPAddress.Any, Q) Application
program
Underlying
implementation Local port Closed Remote port
Local IP
Remote IP Local port Listening Q * * *
Remote port
Local IP
Remote IP
Fill in
local port,
set state Call Start() Call Socket.Bind
(new EPEndPoint
(IPAddress.Any, Q))
Call Listen()
Returns instance Figure5.7:
Server-sidesocketsetup.addresses.)Afterthecallto
Start()
for
TcpListener
or
Listen()
for
Socket
,thestateof
thesocketissettoListening,indicatingthatitisreadytoacceptincomingconnection
requestsaddressedtoitsport.ThissequenceisdepictedinFigure5.7.
Theservercanmaketheacceptcall(
Accept()
for
Socket
oreither
AcceptSocket()
or
AcceptTcpClient()
for
TcpListener
,whichwillallbereferredtocollectivelyas
Accept()
fromhereon)blocksuntiltheTCPopeninghandshakehasbeencompletedwithsomeclient
andanewconnectionhasbeenestablished.WethereforefocusinFigure5.8ontheevents
thatoccurintheTCPimplementationwhenaclientconnectionrequestarrives.Notethat
everythingdepictedinthisgurehappensunderthecovers,intheTCPimplementation.
Whentherequestforaconnectionarrivesfromtheclient,anewsocketstructureis
createdfortheconnection.Thenewsocketsaddressesarelledinbasedonthearriving
packet:thepacketsdestinationInternetaddressandport(W.X.Y.ZandQ,respectively)
becomethelocalInternetaddressandport;thepacketssourceaddressandport(A.B.C.D
andP)becometheremoteInternetaddressandport.Notethatthelocalportnumberof
thenewsocketisalwaysthesameasthatofthe
TcpListener
.Thenewsocketsstateisset
toConnecting,anditisaddedtoalistofnot-quite-connectedsocketsassociatedwith  5.4TCPSocketLifeCycle159Create  new structure and
continue handshake Underlying implementationIncoming
connection
request
from
A.B.C.D/P TcpListener/Socket
Structure
Associated Socket/
TcpClient StructureHandshake
completes Local port Established Q A.B.C.D P W.X.Y.Z
Local IP
Remote IP
Remote port Local port Connecting Q A.B.C.D P W.X.Y.Z
Local IP
Remote IP
Remote port Listening Listening Local port Listening Q * * *
Local IP
Remote IP
Remote port
Local portQ
*
*
*
Local IP
Remote IP
Remote port
Local portQ
*
*
*
Local IP
Remote IP
Remote port Figure5.8:
Incomingconnectionrequestprocessing.  160Chapter5:UndertheHoodthesocketstructureofthe
TcpListener
.Notethatthe
TcpListener
itselfdoesnotchange
state,nordoesanyofitsaddressinformationchange.
Inadditiontocreatinganewunderlyingsocketstructure,theserver-sideTCPimple-
mentationsendsanacknowledgingTCPhandshakemessagebacktotheclient.However,
theserverTCPdoesnotconsiderthehandshakecompleteuntilthethirdmessageofthe
3-wayhandshakeisreceivedfromtheclient.Whenthatmessageeventuallyarrives,the
newstructuresstateissettoEstablished,anditisthen(andonlythen)movedtoalist
ofsocketstructuresassociatedwiththe
TcpListener
structure,whichrepresentestab-
lishedconnectionsreadytobe
Accept()
edviathe
TcpListener
.(Ifthethirdhandshake
messagefailstoarrive,eventuallytheConnectingstructureisdeleted.)
Nowwecanconsider(inFigure5.9)whathappenswhentheserverprogramcallsthe
TcpListener
/
Socket
s
Accept()
method.Thecallunblocksassoonasthereissomething
initsassociatedlistofsocketstructuresfornewconnections.(Notethatthislistmay
alreadybenonemptywhen
Accept()
iscalled.)Atthattime,oneofthenewconnection
structuresisremovedfromthelist,andaninstanceof
Socket
or
TcpClient
iscreatedfor
itandreturnedastheresultofthe
Accept()
.
Itisimportanttonotethateachstructureinthe
TcpListener
sassociatedlistrepre-
sentsafullyestablishedTCPconnectionwithaclientattheotherend.Indeed,theclient
cansenddataassoonasitreceivesthesecondmessageoftheopeninghandshakewhich
maybelongbeforetheservercalls
Accept()
togeta
Socket
instanceforit.5.4.2ClosingaTCPConnectionTCPhasa
gracefulclose
mechanismthatallowsapplicationstoterminateaconnection
withouthavingtoworryaboutlossofdatathatmightstillbeintransit.Themechanism
isalsodesignedtoallowdatatransfersineachdirectiontobeterminatedindependently,
asintheencodingexampleofSection4.6.Itworkslikethis:theapplicationindicates
thatitisnishedsendingdataonaconnectedsocketbycalling
Close()
orbycalling
Shutdown(SocketShutdown.Send)
.Atthatpoint,theunderlyingTCPimplementationrst
transmitsanydataremainingin
SendQ
(subjecttoavailablespacein
RecvQ
attheother
end),andthensendsaclosingTCPhandshakemessagetotheotherend.Thisclosinghand-
shakemessagecanbethoughtofasanend-of-transmissionmarker:ittellsthereceiving
TCPthatnomorebyteswillbeplacedin
RecvQ
.(Notethattheclosinghandshakemessage
itselfis
not
passedtothereceivingapplication,butthatitspositioninthebytestream
isindicatedby
Read()
returning
0
.)TheclosingTCPwaitsforanacknowledgmentofits
closinghandshakemessage,whichindicatesthatalldatasentontheconnectionmadeit
safelyto
RecvQ
.Oncethatacknowledgmentisreceived,theconnectionisHalfclosed.It
isnot
completely
closeduntilasymmetrichandshakehappensintheotherdirectionthat
is,until
both
endshaveindicatedthattheyhavenomoredatatosend.
TheclosingeventsequenceinTCPcanhappenintwoways:eitheroneapplication
calls
Close()
(or
Shutdown(SocketShutdown.Send)
)andcompletesitsclosinghandshake
beforetheothercalls
Close()
,orbothcall
Close()
simultaneously,sothattheirclosing
handshakemessagescrossinthenetwork.Figure5.10showsthesequenceofeventsin  5.4TCPSocketLifeCycle161 Underlying implementationEvents of
Figure 5.8 TcpListener/Socket
Structure
Associated Socket/
TcpClient Structure Local port Connecting Q A.B.C.D P W.X.Y.Z
Local IP
Remote IP
Remote port Local port Listening Q * * *
Local IP
Remote IP
Remote port Local port Listening Q * * *
Local IP
Remote IP
Remote port Local port Listening Q * * *
Local IP
Remote IP
Remote port Returns Socket or TcpClient
instance for this structure Blocks until new
connection is established
Call Accept(), AcceptSocket() or
AcceptTcpClient() Application
Program Figure5.9:
Accept()
processing.  162Chapter5:UndertheHood Underlying
implementation Local port Time-Wait Q A.B.C.D P W.X.Y.Z
Local IP
Remote IP
Remote port Returns immediately
Call Close()or
Shutdown(SocketShutdown.Send) Application
ProgramClose
handshake
initiated by
remote
completes Local port Established Q A.B.C.D P W.X.Y.Z
Local IP
Remote IP
Remote port Local port Closing Q A.B.C.D P W.X.Y.Z
Local IP
Remote IP
Remote port Local port Half closed Q A.B.C.D P W.X.Y.Z
Local IP
Remote IP
Remote port
Start
close
handshake
Close
handshake
completes Figure5.10:
ClosingaTCPconnectionrst.  5.4TCPSocketLifeCycle163theimplementationwhentheapplicationinvokes
Close()
before
theotherendcloses.The
closinghandshakemessageissent,thestateofthesocketstructureissettoClosing,and
thecallreturns.Afterthispoint,furtherreadsandwritesonthe
Socket
aredisallowed
(theythrowanexception).Whentheacknowledgmentfortheclosehandshakeisreceived,
thestatechangestoHalfclosed,whereitremainsuntiltheotherendsclosehandshake
messageisreceived.Notethatiftheremoteendpointgoesawaywhiletheconnectionisin
thisstate,thelocalunderlyingstructurewillstayaroundindenitely.Whentheotherends
closehandshakemessagearrives,anacknowledgmentissentandthestateischangedto
Time-Wait.Althoughthecorresponding
Socket
instanceintheapplicationprogrammay
havelongsincevanished,theassociatedunderlyingstructurecontinuestoexistinthe
implementationforaminuteormore;thereasonsforthisarediscussedonpage164.
Figure5.11showsthesimplersequenceofeventsattheendpointthatdoesnotclose
rst.Whentheclosinghandshakemessagearrives,anacknowledgmentissentimmedi-
ately,andtheconnectionstatebecomesClose-Wait.Atthispoint,wearejustwaitingfor
theapplicationtoinvokethe
Socket
s
Close()
method.Whenitdoes,thenalclosehand-
shakeisinitiatedandtheunderlyingsocketstructureisdeallocated,althoughreferences
toitsoriginal
Socket
instancemaypersistintheC#program.
Inviewofthefactthatboth
Close()
and
Shutdown(SocketShutdown.Send)
return
withoutwaitingfortheclosinghandshaketocomplete,youmaywonderhowthesender Underlying
implementation Local port Close-Wait P W.X.Y.Z Q A.B.C.D
Local IP
Remote IP
Remote port Local port Established P W.X.Y.Z Q A.B.C.D
Local IP
Remote IP
Remote port Returns immediately
Call Close() Application
ProgramClose
handshake
initiated by
remote
completes
Finish close handshake,
delete structure Figure5.11:
Closingaftertheotherendcloses.  164Chapter5:UndertheHoodcanbeassuredthatsentdatahasactuallymadeittothereceivingprogram(i.e.,to
Delivered
).Infact,itispossibleforanapplicationtocall
Close()
or
Shutdown(Socket-
Shutdown.Send)
andhaveitcompletesuccessfully(i.e.,notthrowanexception)
while
thereisstilldatainSendQ
.Ifeitherendoftheconnectionthencrashesbeforethedata
makesitto
RecvQ
,datamaybelostwithoutthesendingapplicationknowingaboutit.
Thebestsolutionistodesigntheapplicationprotocolsothatthesidethatcalls
Close()
rstdoesso
onlyafter
receivingapplication-levelassurancethatitsdatawas
received.Forexample,whenour
TCPEchoClient
programreceivestheechoedcopyofthe
dataitsent,thereshouldbenothingmoreintransitineitherdirection,soitissafeto
closetheconnection.
.NETdoesprovideawaytomodifythebehaviorofthe
Socket
s
Close()
method,
namelybymodifyingthelingeroption.Thelingeroptionisaccessedbyeitherusing
the
LingerState
propertyof
TcpClient
class,orby
Socket
s
Get/SetSocketOption()
methods.Inbothcasesthe
LingerOption
classisusedtocontrolhowlong
Close()
waits
fortheclosinghandshaketocompletebeforereturning.The
LingerOption
classtakestwo
parameters:aBooleanthatindicateswhethertowait,andanintegerspecifyingthenumber
ofsecondstowaitbeforegivingup.Thatis,whenatimeoutisspeciedvia
LingerOption
,
Close()
blocksuntiltheclosinghandshakeiscompleted,oruntilthespeciedamountof
timepasses.
Hereisanexampleofsettingthesocketoption:sock.SetSocketOption(SocketOptionLevel.Socket,
SocketOptionName.Linger,
(object)newLingerOption(true,10));Hereisanexampleofsettingthe
TcpClient
public
LingerState
property:client.LingerState=newLingerOption(true,10);Atthetimeofthiswriting,however,
Close()
providesnoindicationthattheclosing
handshakefailedtocomplete,evenifthetimelimitsetbythe
LingerOption
expiresbefore
theclosingsequencecompletes.Inotherwords,usingthe
LingerOption
mayprovide
additionaltime,butdoesnotprovideanyadditionalconrmationtotheapplicationin
currentimplementations.
ThenalsubtletyofclosingaTCPconnectionrevolvesaroundtheneedfortheTime-
Waitstate.TheTCPspecicationrequiresthatwhenaconnectionterminates,atleast
oneofthesocketspersistsintheTime-Waitstateforaperiodoftimeafterbothclosing
handshakescomplete.Thisrequirementismotivatedbythepossibilityofmessagesbeing
delayedinthenetwork.Ifbothendsunderlyingstructuresgoawayassoonasbothclos-
inghandshakescomplete,anda
new
connectionisimmediatelyestablishedbetweenthe
samepairofsocketaddresses,amessagefromthepreviousconnection,whichhappened
tobedelayedinthenetwork,couldarrivejustafterthenewconnectionisestablished.
Becauseitwouldcontainthesamesourceanddestinationaddresses,theoldmessage
couldbemistakenforamessagebelongingtothenewconnection,anditsdatamight
(incorrectly)bedeliveredtotheapplication.  5.5DemultiplexingDemystied165Unlikelythoughthisscenariomaybe,TCPemploysmultiplemechanismstoprevent
it,includingtheTime-Waitstate.TheTime-WaitstateensuresthateveryTCPconnection
endswithaquiettime,duringwhichnodataissent.Thequiettimeissupposedtobe
equaltotwicethemaximumamountoftimeapacketcanremaininthenetwork.Thus,by
thetimeaconnectiongoesawaycompletely(i.e.,thesocketstructureleavestheTime-Wait
stateandisdeallocated)andclearsthewayforanewconnectionbetweenthesamepairof
addresses,nomessagesfromtheoldinstancecanstillbeinthenetwork.Inpractice,the
lengthofthequiettimeisimplementationdependent,becausethereisnorealmechanism
thatlimitshowlongapacketcanbedelayedbythenetwork.Valuesinuserangefrom
4minutesdownto30secondsorevenshorter(4minutesisthedefaultonMicrosoft
Windows).
ThemostimportantconsequenceofTime-Waitisthataslongastheunderlying
socketstructureexists,noothersocketispermittedtobeassociatedwiththesamelocal
port.Inparticular,anyattempttocreatea
Socket
instanceusingthatportwillthrowa
SocketException
witha
ErrorCode
of10048(addressalreadyinuse).5.5DemultiplexingDemystiedThefactthatdifferentsocketsonthesamemachinecanhavethesamelocaladdressand
portnumberisimplicitintheprecedingdiscussions.Forexample,onamachinewith
onlyoneIPaddress,everynew
Socket
or
TcpClient
instance
Accept()
edviaaserver
Socket
or
TcpListener
willhavethesamelocalportnumberastheserversocket.Clearly
theprocessofdecidingtowhichsocketanincomingpacketshouldbedeliveredthatis,
the
demultiplexing
processinvolveslookingatmorethanjustthepacketsdestination
addressandport.Otherwisetherecouldbeambiguityaboutwhichsocketanincoming
packetisintendedfor.Theprocessofmatchinganincomingpackettoasocketisactually
thesameforbothTCPandUDP,andcanbesummarizedbythefollowingpoints:Thelocalportinthesocketstructure
must
matchthedestinationportnumberinthe
incomingpacket.Anyaddresseldsinthesocketstructurethatcontainthewildcardvalue()are
consideredtomatch
any
valueinthecorrespondingeldinthepacket.Ifthereismorethanonesocketstructurethatmatchesanincomingpacketforall
fouraddresselds,theonethatmatchesusingthefewestwildcardsgetsthepacket.
Forexample,considerahostwithtwoIPaddresses,10.1.2.3and192.168.3.2,and
withasubsetofitsactiveTCPsocketstructures,asshowninFigure5.12.Thestruc-
turelabeled0isassociatedwitha
TcpListener
andhasport99withawildcardlocal
address.Socketstructure1isalsofora
TcpListener
onthesameport,butwiththelocal
IPaddress10.1.2.3specied(soitwillonlyacceptconnectionrequeststothataddress).
Structure2isforaconnectionthatwasacceptedviathe
TcpListener
forstructure0,and
thushasthesamelocalportnumber,butalsohasitslocalandremoteInternetaddresses  166Chapter5:UndertheHood Local port99
*
*
*ListeningLocal IP
Remote port
Remote IP Local port99
10.1.2.3
*
*ListeningLocal IP
Remote port
Remote IP Local port99
192.168.3.2
30001
172.16.1.9Established012
Local IP
Remote port
Remote IP Local port1025
10.1.2.3
25
10.5.5.8EstablishedLocal IP
Remote port
Remote IP
 Figure5.12:
Demultiplexingwithmultiplematchingsockets.lledin.Othersocketsbelongtootheractiveconnections.Nowconsiderapacketwith
sourceIPaddress172.16.1.10,sourceport56789,destinationIPaddress10.1.2.3,and
destinationport99.Itwillbedeliveredtothesocketassociatedwithstructure1,because
thatonematcheswiththefewestwildcards.
Whenaprogramattemptstocreateasocketwithaparticularlocalportnumber,the
existingsocketsarecheckedtomakesurethatnosocketisalreadyusingthatlocalport.
A
SocketBind()
willthrowanexceptionif
any
socketmatchesthelocalportandlocalIP
address(ifany)specied.Thiscancauseproblemsinthefollowingscenario:
1.Aclientprogramcreatesa
Socket
withaspeciclocalportnumber,say,
P
,anduses
ittocommunicatewithaserver.
2.Theclientclosesthe
Socket
,andtheunderlyingstructuregoesintotheTime-Wait
state.
3.Theclientprogramterminatesandisimmediatelyrestarted.
Ifthenewincarnationoftheclientattemptstousethesamelocalportnumber,the
Socket
constructorwillthrowan
SocketException
withan
ErrorCode
of10048(addressalready
inuse),becauseoftheotherstructureintheTime-Waitstate.2Onewaytocircumvent
thisproblemistowaituntiltheunderlyingstructureleavestheTime-Waitstate.However,
.NETalsopermitsoverridingthisbehaviorbysettingthe
ReuseAddress
socketoption,but
thisisonlyaccessibleviathe
Socket
classandnotanyofthehigherlevelclasses:sock.SetSocketOption(SocketOptionLevel.Socket,
SocketOptionName.ReuseAddress,1);Sowhatdeterminesthelocal/foreignaddress/port?Fora
TcpListener
,allconstruc-
torsrequirethatthelocalportbespecied.Thelocaladdressmaybespeciedtothe
constructor;otherwise,thelocaladdressisthewildcard()address.Theforeignaddress 2Anotherscenariothatdoesnotrequireaconvergenceofseveraleventstoencounterthisproblem
isseveralmulticastreceiverclientsrunningonthesamehost.  5.6Exercises167andportfora
TcpListener
arealwayswildcards.Fora
TcpClient
,allconstructorsrequire
specicationoftheforeignaddressandport.Thelocaladdressand/orportmaybespec-
iedtotheconstructor.3Otherwise,thelocaladdressistheaddressofthenetwork
interfacethroughwhichtheconnectiontotheserverisestablished,andthelocalport
isarandomlyselected,unusedportnumbergreaterthan1023.Fora
Socket
or
TcpClient
instancereturnedbyan
Accept()
,
AcceptSocket()
,or
AcceptTcpClient()
call,thelocal
addressisthedestinationaddressfromtheinitialhandshakemessagefromtheclient,
thelocalportisthelocalportoftheserver(
Socket
or
TcpListener
),andtheforeign
address/portisthelocaladdress/portoftheclient.Fora
UdpClient
,thelocaladdress
and/orportmaybespeciedtotheconstructor.Otherwise,thelocaladdressisthewild-
cardaddress,andthelocalportisarandomlyselected,unusedportnumbergreater
than1023.Theforeignaddressandportareinitiallybothwildcardsandremainthatway
unlessthe
Connect()
methodisinvokedtospecifyparticularvalues.5.6Exercises1.TheTCPprotocolisdesignedsothatsimultaneousconnectionattemptswillsucceed.
Thatis,ifanapplicationusingportPandInternetaddressW.X.Y.Zattemptstocon-
necttoaddressA.B.C.D,portQ,atthesametimeasanapplicationusingthesame
addressandporttriestoconnecttoW.X.Y.Z,portP,theywillendupconnectedto
eachother.CanthisbemadetohappenwhentheprogramsusethesocketsAPI?
2.Therstexampleofbufferdeadlockinthischapterinvolvestheprogramsonboth
endsofaconnectiontryingtosendlargemessages.However,thisisnotnecessary
fordeadlock.Howcouldthe
TCPEchoClient
fromChapter2bemadetodeadlock
whenitconnectstothe
TCPEchoServer
fromthatchapter?
3.Writeaversionof
UnicodeClientNoDeadlock
usingnonblockingwrites(
BeginSend()
and
EndSend()
). 3Thisistrueforthehigherlevel.NETsocketclassesbutnotforthe.NET
Socket
classitself.  This Page Intentionally Left Blank appendixHandlingSocketErrorsMostofthesocketconstructorsandmethodsinthe.NETlibrarycanthrowa
Socket-
Exception
.Unlikesomeotherexceptionclassesinthe.NETlibrary,the
SocketException
classisfairlygenericandrequiressomeadditionalworktondoutwhattypeoferror
occurred.
SocketException
containstwousefulproperties,
Message
and
ErrorCode
.The
Message
propertycontainsahuman-readableerrormessage.The
ErrorCode
propertycon-
tainsaWinSockerrorcodefromtheunderlyingimplementation,andcanbeusedtotrap
andhandleveryspecicerrorconditions.
TableA.1liststheWinSockerrorcodesthatcanberetrievedfromthe
ErrorCode
property.TheErrorNameeldistheheaderconstantusedwithWinSock.Theseconstants
arenotaccessiblewithinC#,butitisusefultoknowtheconstantnamesbecausethey
areoftenreferencedinWinSockdocumentation.Thistableisjustaquickreferencefor
convenience;youshouldrefertotheMicrosoftdocumentationonWinSockerrorcodesat
www.msdn.microsoft.com
formoredetailedinformation. ErrorName
ValueDescription WSAEINTR10004Interruptedfunctioncall.
WSAEACCES10013Permissiondenied.
WSAEFAULT10014Badaddress.
WSAEINVAL10022Invalidargument.
WSAEMFILE10024Toomanyopenles.
WSAEWOULDBLOCK10035Resourcetemporarilyunavailable.
WSAEINPROGRESS10036Operationnowinprogress.
WSAEALREADY10037Operationalreadyinprogress. TableA.1:
Continued169  170Appendix:HandlingSocketErrors ErrorName
ValueDescription WSAENOTSOCK10038Socketoperationonnonsocket.
WSAEDESTADDRREQ10039Destinationaddressrequired.
WSAEMSGSIZE10040Messagetoolong.
WSAEPROTOTYPE10041Protocolwrongtypeforsocket.
WSAENOPROTOOPT10042Badprotocoloption.
WSAEPROTONOSUPPORT10043Protocolnotsupported.
WSAESOCKTNOSUPPORT10044Sockettypenotsupported.
WSAEOPNOTSUPP10045Operationnotsupported.
WSAEPFNOSUPPORT10046Protocolfamilynotsupported.
WSAEAFNOSUPPORT10047Addressfamilynotsupportedbyprotocolfamily.
WSAEADDRINUSE10048Addressalreadyinuse.
WSAEADDRNOTAVAIL10049Cannotassignrequestedaddress.
WSAENETDOWN10050Networkisdown.
WSAENETUNREACH10051Networkisunreachable.
WSAENETRESET10052Networkdroppedconnectiononreset.
WSAECONNABORTED10053Softwarecausedconnectionabort.
WSAECONNRESET10054Connectionresetbypeer.
WSAENOBUFS10055Nobufferspaceavailable.
WSAEISCONN10056Socketisalreadyconnected.
WSAENOTCONN10057Socketisnotconnected.
WSAESHUTDOWN10058Cannotsendaftersocketshutdown.
WSAETIMEDOUT10060Connectiontimedout.
WSAECONNREFUSED10061Connectionrefused.
WSAEHOSTDOWN10064Hostisdown.
WSAEHOSTUNREACH10065Noroutetohost.
WSAEPROCLIM10067Toomanyprocesses.
WSASYSNOTREADY10091Networksubsystemisunavailable.
WSAVERNOTSUPPORTED10092Winsock.dllversionoutofrange.
WSANOTINITIALIZED10093SuccessfulWSAStartupnotyetperformed.
WSAEDISCON10101Gracefulshutdowninprogress.
WSATYPE_NOT_FOUND10109Classtypenotfound.
WSAHOST_NOT_FOUND11001Hostnotfound.
WSATRY_AGAIN11002Nonauthoritativehostnotfound.
WSANO_RECOVERY11003Thisisanonrecoverableerror.
WSANO_DATA11004Validname,nodatarecordofrequestedtype.
WSA_INVALID_HANDLEOSdependentSpeciedeventobjecthandleisinvalid.
WSA_INVALID_PARAMETEROSdependentOneormoreparametersareinvalid.
WSA_IO_INCOMPLETEOSdependentOverlappedI/Oeventobjectnotinsignaledstate.
WSA_IO_PENDINGOSdependentOverlappedoperationswillcompletelater.
WSA_NOT_ENOUGH_MEMORYOSdependentInsufcientmemoryavailable.
WSA_OPERATION_ABORTEDOSdependentOverlappedoperationaborted.
WSAINVALIDPROCTABLEOSdependentInvalidproceduretablefromserviceprovider.
WSAINVALIDPROVIDEROSdependentInvalidserviceproviderversionnumber.
WSAPROVIDERFAILEDINITOSdependentUnabletoinitializeaserviceprovider.
WSASYSCALLFAILUREOSdependentSystemcallfailure. TableA.1:
WinSockErrorCodes  Bibliography[1]Case,J.D.,Fedor,M.,andSchoffstall,M.L.SimpleNetworkManagementProtocol
(SNMP).InternetRequestforComments1157,May1990.
[2]Comer,DouglasE.
InternetworkingwithTCP/IP,
volume1,
Principles,Protocols,and
Architecture
(thirdedition).UpperSaddleRiver,NJ:Prentice-Hall,1995.
[3]Comer,DouglasE.,andStevens,DavidL.
InternetworkingwithTCP/IP,
volume2,
Design,Implementation,andInternals
(thirdedition).UpperSaddleRiver,NJ:
Prentice-Hall,1999.
[4]Comer,DouglasE.,andStevens,DavidL.
InternetworkingwithTCP/IP,
volume3,
Client-ServerProgrammingandApplications
(BSDversion,secondedition).Upper
SaddleRiver,NJ:Prentice-Hall,1996.
[5]Deering,S.,andHinden,R.InternetProtocol,Version6(IPv6)Specication.Internet
RequestforComments2460,December1998.
[6]Gilligan,R.,Thomson,S.,Bound,J.,andStevens,W.BasicSocketInterface
ExtensionsforIPv6.InternetRequestforComments2553,March1999.
[7]InternationalOrganizationforStandardization.
BasicEncodingInformationProcess-
ingSystems:OpenSystemsInterconnectionSpecicationofAbstractSyntaxNotation
One(ASN.1)
.InternationalStandard8824,December1987.
[8]Mockapetris,Paul.DomainNames:ConceptsandFacilities.InternetRequestfor
Comments1034,November1987.
[9]Mockapetris,Paul.DomainNames:ImplementationandSpecication.Internet
RequestforComments1035,November1987.171  172Bibliography[10]Peterson,LarryL.,andDavie,BruceS.
ComputerNetworks:ASystemsApproach
(secondedition).SanFrancisco:MorganKaufmann,2000.
[11]Postel,John.InternetProtocol.InternetRequestforComments791,September
1981.
[12]Postel,John.TransmissionControlProtocol.InternetRequestforComments793,
September1981.
[13]Postel,John.UserDatagramProtocol.InternetRequestforComments768,August
1980.
[14]Steedman,Douglas.
AbstractSyntaxNotationOne(ASN.1):TheTutorialandRefer-
ence.
London,U.K.:TechnologyAppraisals,1990.
[15]Stevens,W.Richard.
TCP/IPIllustrated,
volume1,
TheProtocols
.Reading,MA:
Addison-Wesley,1994.
[16]Stevens,W.Richard.
UNIXNetworkProgramming:NetworkingAPIs:SocketsandXTI
(secondedition).UpperSaddleRiver,NJ:Prentice-Hall,1997.
[17]SunMicrosystems,Incorporated.ExternalDataRepresentationStandard.Internet
RequestforComments1014,June1987.
[18]SunMicrosystems,Incorporated.NetworkFileSystemProtocolSpecication.
InternetRequestforComments1094,March1989.
[19]SunMicrosystems,Incorporated.NetworkFileSystemProtocolVersion3Specica-
tion.InternetRequestforComments1813,June1995.
[20]Wright,GaryR.,andStevens,W.Richard.
TCP/IPIllustrated,
volume2,
The
Implementation
.Reading,MA:Addison-Wesley,1995.
[21]Krowczyk,A.,Kumar,V.,Laghari,N.,Mungale,A.,Nagel,C.,Parker,T.,and
Sivakumar,S.
.NETNetworkProgramming
.Birmingham,U.K.:WroxPressLtd,2002.
[22]Quinn,B.,andShute,D.
WindowsSocketsNetworkProgramming
.Reading,MA:
Addison-Wesley,1995.
[23]TheUnicodeConsortium.
TheUnicodeStandard,Version3
.Reading,MA:Addison-
Wesley,Longman,2000.
[24]Donahoo,M.,andCalvert,K.
TCP/IPSocketsinC:PracticalGuideforProgrammers
.
SanFrancisco:MorganKaufmann,2001.
[25]Calvert,K.,andDonahoo,M.
TCP/IPSocketsinJava:PracticalGuideforProgrammers
.
SanFrancisco:MorganKaufmann,2002.
[26]Makofske,D.,andAlmeroth,K.
MulticastSockets:PracticalGuideforProgrammers
.
SanFrancisco:MorganKaufmann,2002.
[27]Braden,R.RequirementsforInternetHostsCommunicationsLayers.Internet
RequestforComments1122,October1989.
[28]Braden,R.RequirementsforInternetHostsApplicationandSupport.Internet
RequestforComments1123,October1989.  IndexA
Addresses
denitionof,34
destination,9
directedbroadcast,132
sockets,915
ANSII,62
Application,5
Applicationprogramming
interface
asynchronous,119
descriptionof,16
Applicationprotocols,3,59
AsynchronousI/O,117131
B
Binarynumbers,6365
BinaryWriter
,6465
Blockingcallswithtimeout,
8892
Booleanvalues,71
Broadcast,132
Buffer,20
Bufferdeadlock,152154
Buffering,149152
Bytes
denitionof,61
orderof,63
C
Callback,117
Clients
descriptionof,56
TCP,1723
UDP,2932
Closingconnections
descriptionof,138145
TCP,160165
Communicationchannel,12
Connection-oriented
protocol,3
ConsoleLogger
,105106
D
Datagramservice,3
Datagramsockets,6
Deadlock,152154
Delegate,117
Delimiter,67
Demultiplexing,165167
Descriptor,7
Destinationaddress,9
Directoryservices,6
DNS,
see
Domainnamesystem
Dns
class,910
Domainnamesystem,5
Domainnames,5
Dotted-quadnotation,4
E
EBCDIC,63
EchoProtocol
,103105
EchoProtocolFactory
,
110111
Encodingofinformation
binarynumbers,6365
descriptionof,61
framing,6670
parsing,6670
text,6163
Endcall,117
End-to-endtransport
protocols,3
Errors,sockets,169170
ExtendedBinaryCoded
DecimalInterchange
Code,63
F
Factoringofservers,109112
Factoryobject,109
Fields,59
FileLogger
,106107
First-in,rst-outqueue,36
Framer
,6870
Framing,6670
H
Handshakemessages,3
Hosts
denitionof,12
namesof,5
HypertextTransferProtocol,2
I
IDispatcher
,111173  174IndexILogger
,105
Informationencoding
binarynumbers,6365
descriptionof,61
framing,6670
parsing,6670
text,6163
Integers
signed,63
sizeof,63
Internetaddress,4
I/O
asynchronous,117131
nonblocking,8595
statusprechecking,8688
streams,6566
IPAddressExample.
cs,1015
IProtocol
,103
IProtocolFactory
,110
ItemQuote
,6061
ItemQuoteBinConst
,7577
ItemQuoteDecoder
,70
ItemQuoteDecoderBin
,7779
ItemQuoteDecoderText
,7374
ItemQuoteEncoder
,70
ItemQuoteEncoderText
,7273
ItemQuoteTextConst
,7172
Iterativeserver,99
L
Layers
denitionof,2
network,2
transport,3
M
MCIPAddress
,133
Messages,59
Microseconds,88
Mode,88
Multicast
denitionof,132133
receivers,137
senders,135
Multicastgroup,135
Multiplexing,9599
N
Names,5
.NET
descriptionof,9
encodingofinformation,
62
I/Ostreams,6566
serializationcapabilities
of,8384
socketimplementationin,
1516
Networkbyteorder,63
Networklayer,2
NonblockingI/O,8595
Nonblockingsockets,9295
P
Packets,2
Parsing,6670
Peer,5
Polling,89
PoolDispatcher
,113115
Portnumber,4
Portnumbers,3,6
Protocol(s)
application,3
connection-oriented,3
denitionof,2
layersof,2
organizingof,2
Protocolsuite,2
R
RecvQ,150152,155
RecvTcp
,8182
RecvUdp
,83
RecvUDPMulticast
,135137
Routers
denitionof,1
functionof,2
S
SendQ,150,152,155
SendTcp
,7981
SendUdp
,82
SendUDPMulticast
,133135
Serializable
,84
Serialization,8384
Servers
constructionof,2327
descriptionof,56
factoringof,109112
iterative,99
TCP,2327,4050
thread-per-client,
107109UDP,3236
Signedintegers,63
Socket(s)
addresses,915
closingof,138145
datastructuresassociated
with,148f
datagram,6
denitionof,6,16
demultiplexingwith,
165167
errors,169170
in.NET,1516
nonblocking,9295
schematicdiagramof,7f
server-side,157f
stream,6
structureof,149
TCP,
see
TCPsockets
typesof,6
UDP,
see
UDPsockets
Socket
,4346
Socketags,5657
Socketoptions,5156
SocketException
,50
SocketFlags
,47
SocketOptionLevel
,46,
4849
SocketOptionName
,47
SocketSelect()
,9599
Stream(s)
descriptionof,28
I/O,6566
Streamsockets,6
System.Runtime.Serializable
,
84
System.Text
,62
System.Xml.Serializable
,
8384
T
TCPclient
connectingof,156160
descriptionof,1723
withsocket,3739
TCPconnection,17
TCPserver
descriptionof,2327
withsocket,4050  Index175TCPsockets
buffering,149152
closingof,160165
descriptionof,1617
lifecycleof,155165
performanceof,154155
UDPsocketsvs.,29
TcpClient
,16,2123
TcpClientShutdown
,140141
TcpEchoClient
,1723
TcpEchoClientAsync
,120125
TcpEchoClientSocket
,3739
TcpEchoServer
,2426
TcpEchoServerAsync
,125131
TcpEchoServerSelectSocket
,
9699
TcpEchoServerSocket
,4050
TcpEchoServerThread
,
108109
TcpEchoServerTimeout
,8992
TcpListener
,16,2627
TcpListenerAcceptSocket
,
5051
TcpNBEchoClient
,9395
Text,6163
Text-orientedrepresentation,
71
TextReader
,67
Thread(s)
deadlockavoidance,154
descriptionof,99103
thread-per-clientservers,
107109
Threadpool,112116
ThreadExample
,101103
ThreadMain
,115116
ThreadPerDispatcher
,
111112
3-wayhandshake,156
Timeout,blockingcallswith,
8892
TranscodeClient
,141143
TranscodeServer
,143145
Transportlayer,3
U
UDPclient,2932
UDPservers,3236
UDPsockets
descriptionof,29
receivingwith,36
sendingwith,36
TCPsocketsvs.,29
UdpClient
,3536
UdpEchoClient
,3032,52
UdpEchoClientTimeoutSocket
,
5356
UdpEchoServer
,3335
Unicast
denitionof,131
receivers,137
senders,135
Universalresourcelocator,6
URL,
see
Universalresource
locator
W
Wireformats
combineddata
representation,7579
descriptionof,7075
sendingandreceiving,
7983
X
XML,84  